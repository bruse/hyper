var searchIndex = {};
searchIndex['hyper'] = {"items":[[0,"","hyper","# Hyper\nHyper is a fast, modern HTTP implementation written in and for Rust. It\nis a low-level typesafe abstraction over raw HTTP, providing an elegant\nlayer over \"stringly-typed\" HTTP."],[2,"HttpError","","A set of errors that can occur parsing HTTP streams."],[12,"HttpMethodError","","An invalid `Method`, such as `GE,T`.",0],[12,"HttpUriError","","An invalid `RequestUri`, such as `exam ple.domain`.",0],[12,"HttpVersionError","","An invalid `HttpVersion`, such as `HTP/1.1`",0],[12,"HttpHeaderError","","An invalid `Header`.",0],[12,"HttpStatusError","","An invalid `Status`, such as `1337 ELITE`.",0],[12,"HttpIoError","","An `IoError` that occured while trying to read or write to a network stream.",0],[0,"client","","HTTP Client"],[0,"request","hyper::client","Client Requests"],[1,"Request","hyper::client::request","A client request to a remote server."],[11,"url","","The target URI for this request.",1],[11,"version","","The HTTP version of this request.",1],[10,"headers","","Read the Request headers.",1],[10,"method","","Read the Request method.",1],[10,"new","","Create a new client request.",1],[10,"with_stream","","Create a new client request with a specific underlying NetworkStream.",1],[10,"get","","Create a new GET request.",1],[10,"post","","Create a new POST request.",1],[10,"delete","","Create a new DELETE request.",1],[10,"put","","Create a new PUT request.",1],[10,"patch","","Create a new PATCH request.",1],[10,"head","","Create a new HEAD request.",1],[10,"options","","Create a new OPTIONS request.",1],[10,"start","","Consume a Fresh Request, writing the headers and method,\nreturning a Streaming Request.",1],[10,"headers_mut","","Get a mutable reference to the Request headers.",1],[10,"send","","Completes writing the request, and returns a response to read from.",1],[10,"write","","",1],[10,"flush","","",1],[0,"response","hyper::client","Client Responses"],[1,"Response","hyper::client::response","A response for a client request to a remote server."],[11,"status","","The status from the server.",2],[11,"headers","","The headers from the server.",2],[11,"version","","The HTTP version of this response from the server.",2],[10,"new","","Creates a new response from a server.",2],[10,"read","","",2],[0,"method","hyper","The HTTP request method"],[2,"Method","hyper::method","The Request Method (VERB)"],[12,"Options","","OPTIONS",3],[12,"Get","","GET",3],[12,"Post","","POST",3],[12,"Put","","PUT",3],[12,"Delete","","DELETE",3],[12,"Head","","HEAD",3],[12,"Trace","","TRACE",3],[12,"Connect","","CONNECT",3],[12,"Patch","","PATCH",3],[12,"Extension","","Method extentions. An example would be `let m = Extension(\"FOO\".to_string())`.",3],[10,"eq","","",3],[10,"ne","","",3],[10,"clone","","",3],[10,"safe","","Whether a method is considered \"safe\", meaning the request is\nessentially read-only.",3],[10,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has\nthe same result is executed multiple times.",3],[10,"from_str","","",3],[10,"fmt","","",3],[0,"header","hyper","Headers container, and common header fields."],[1,"Headers","hyper::header","A map of header fields on requests and responses."],[1,"HeadersItems","","An `Iterator` over the fields in a `Headers` map."],[1,"HeaderView","","Returned with the `HeadersItems` iterator."],[0,"common","","Common Headers\nA Collection of Header implementations for common HTTP Headers."],[0,"host","hyper::header::common","Exposes the Host header."],[1,"Host","hyper::header::common::host","The `Host` header."],[10,"fmt","","",4],[10,"eq","","",4],[10,"ne","","",4],[10,"clone","","",4],[10,"header_name","","",4],[10,"parse_header","","",4],[10,"fmt_header","","",4],[0,"content_length","hyper::header::common","Exposes the ContentLength header."],[1,"ContentLength","hyper::header::common::content_length","The `Content-Length` header."],[10,"fmt","","",5],[10,"eq","","",5],[10,"ne","","",5],[10,"clone","","",5],[10,"header_name","","",5],[10,"parse_header","","",5],[10,"fmt_header","","",5],[10,"len","","Returns the wrapped length.",5],[0,"content_type","hyper::header::common","Exposes the ContentType header."],[1,"ContentType","hyper::header::common::content_type","The `Content-Type` header."],[10,"fmt","","",6],[10,"eq","","",6],[10,"ne","","",6],[10,"clone","","",6],[10,"header_name","","",6],[10,"parse_header","","",6],[10,"fmt_header","","",6],[0,"accept","hyper::header::common","Exposes the Accept header."],[1,"Accept","hyper::header::common::accept","The `Accept` header."],[10,"fmt","","",7],[10,"eq","","",7],[10,"ne","","",7],[10,"clone","","",7],[10,"header_name","","",7],[10,"parse_header","","",7],[10,"fmt_header","","",7],[0,"connection","hyper::header::common","Exposes the Connection header."],[2,"Connection","hyper::header::common::connection","The `Connection` header."],[12,"KeepAlive","","The `keep-alive` connection value.",8],[12,"Close","","The `close` connection value.",8],[10,"fmt","","",8],[10,"eq","","",8],[10,"ne","","",8],[10,"clone","","",8],[10,"from_str","","",8],[10,"header_name","","",8],[10,"parse_header","","",8],[10,"fmt_header","","",8],[0,"transfer_encoding","hyper::header::common","Exposes the TransferEncoding header."],[1,"TransferEncoding","hyper::header::common::transfer_encoding","The `Transfer-Encoding` header."],[2,"Encoding","","A value to be used with the `Transfer-Encoding` header."],[12,"Chunked","","The `chunked` encoding.",9],[12,"Gzip","","The `gzip` encoding.",9],[12,"Deflate","","The `deflate` encoding.",9],[12,"Compress","","The `compress` encoding.",9],[12,"EncodingExt","","Some other encoding that is less common, can be any String.",9],[10,"fmt","","",10],[10,"eq","","",10],[10,"ne","","",10],[10,"clone","","",10],[10,"fmt","","",9],[10,"eq","","",9],[10,"ne","","",9],[10,"clone","","",9],[10,"from_str","","",9],[10,"header_name","","",10],[10,"parse_header","","",10],[10,"fmt_header","","",10],[0,"user_agent","hyper::header::common","Exposes the UserAgent header."],[1,"UserAgent","hyper::header::common::user_agent","The `User-Agent` header field."],[10,"fmt","","",11],[10,"eq","","",11],[10,"ne","","",11],[10,"clone","","",11],[10,"header_name","","",11],[10,"parse_header","","",11],[10,"fmt_header","","",11],[0,"server","hyper::header::common","Exposes the Server header."],[1,"Server","hyper::header::common::server","The `Server` header field."],[10,"fmt","","",12],[10,"eq","","",12],[10,"ne","","",12],[10,"clone","","",12],[10,"header_name","","",12],[10,"parse_header","","",12],[10,"fmt_header","","",12],[0,"date","hyper::header::common","Exposes the Date header."],[1,"Date","hyper::header::common::date","The `Date` header field."],[10,"clone","","",13],[10,"eq","","",13],[10,"ne","","",13],[10,"header_name","","",13],[10,"parse_header","","",13],[10,"fmt_header","","",13],[10,"fmt","","",13],[10,"from_str","","",13],[6,"Header","hyper::header","A trait for any object that will represent a header field and value."],[9,"header_name","","Returns the name of the header field this belongs to.",14],[9,"parse_header","","Parse a header from a raw stream of bytes.",14],[9,"fmt_header","","Format a header to be output into a TcpStream.",14],[10,"new","","Creates a new, empty headers map.",15],[10,"set","","Set a header field to the corresponding value.",15],[10,"get_raw","","Access the raw value of a header, if it exists and has not\nbeen already parsed.",15],[10,"get","","Get a reference to the header field's value, if it exists.",15],[10,"get_mut","","Get a mutable reference to the header field's value, if it exists.",15],[10,"has","","Returns a boolean of whether a certain header is in the map.",15],[10,"remove","","Removes a header from the map, if one existed.\nReturns true if a header has been removed.",15],[10,"iter","","Returns an iterator over the header fields.",15],[10,"fmt","","",15],[10,"next","","",16],[10,"fmt","","",17],[10,"len","","",15],[10,"clear","","",15],[0,"http","hyper","Pieces pertaining to the HTTP message protocol."],[2,"HttpReader","hyper::http","Readers to handle different Transfer-Encodings."],[12,"SizedReader","","A Reader used when a Content-Length header is passed with a positive integer.",18],[12,"ChunkedReader","","A Reader used when Transfer-Encoding is `chunked`.",18],[12,"EofReader","","A Reader used for responses that don't indicate a length or chunked.\nNote: This should only used for `Response`s. It is illegal for a\n`Request` to be made with both `Content-Length` and\n`Transfer-Encoding: chunked` missing, as explained from the spec:",18],[2,"HttpWriter","","Writers to handle different Transfer-Encodings."],[12,"ThroughWriter","","A no-op Writer, used initially before Transfer-Encoding is determined.",19],[12,"ChunkedWriter","","A Writer for when Transfer-Encoding includes `chunked`.",19],[12,"SizedWriter","","A Writer for when Content-Length is set.",19],[3,"is_token","","Determines if byte is a token char."],[3,"read_method","","Read a `Method` from a raw stream, such as `GET`."],[3,"read_uri","","Read a `RequestUri` from a raw stream."],[3,"read_http_version","","Read the `HttpVersion` from a raw stream, such as `HTTP/1.1`."],[3,"read_header","","Read a RawHeaderLine from a Reader."],[3,"read_request_line","","Read the `RequestLine`, such as `GET / HTTP/1.1`."],[3,"read_status_line","","Read the StatusLine, such as `HTTP/1.1 200 OK`."],[3,"read_status","","Read the StatusCode from a stream."],[4,"RawHeaderLine","","The raw bytes when parsing a header line."],[4,"RequestLine","","`request-line   = method SP request-target SP HTTP-version CRLF`"],[4,"StatusLine","","`status-line = HTTP-version SP status-code SP reason-phrase CRLF`"],[5,"SP","",""],[5,"CR","",""],[5,"LF","",""],[5,"STAR","",""],[5,"LINE_ENDING","",""],[10,"read","","",18],[10,"unwrap","","Unwraps the HttpWriter and returns the underlying Writer.",19],[10,"end","","Ends the HttpWriter, and returns the underlying Writer.",19],[10,"write","","",19],[10,"flush","","",19],[0,"net","hyper","A collection of traits abstracting over Listeners and Streams."],[1,"Fresh","hyper::net","The write-status indicating headers have not been written."],[1,"Streaming","","The write-status indicating headers have been written."],[1,"HttpListener","","A `NetworkListener` for `HttpStream`s."],[1,"HttpAcceptor","","A `NetworkAcceptor` for `HttpStream`s."],[2,"HttpStream","","A wrapper around a TcpStream."],[12,"Http","","A stream over the HTTP protocol.",20],[12,"Https","","A stream over the HTTP protocol, protected by SSL.",20],[6,"NetworkListener","","An abstraction to listen for connections on a certain port."],[9,"bind","","Bind to a socket.",21],[9,"socket_name","","Get the address this Listener ended up listening on.",21],[6,"NetworkAcceptor","","An abstraction to receive `NetworkStream`s."],[9,"close","","Closes the Acceptor, so no more incoming connections will be handled.",22],[6,"NetworkStream","","An abstraction over streams that a Server can utilize."],[9,"peer_name","","Get the remote address of the underlying connection.",23],[9,"connect","","Connect to a remote address.",23],[10,"abstract","","Turn this into an appropriately typed trait object.",23],[10,"clone","alloc::boxed","",24],[10,"read","","",24],[10,"write","","",24],[10,"flush","","",24],[10,"listen","hyper::net","",25],[10,"bind","","",25],[10,"socket_name","","",25],[10,"clone","","",26],[10,"accept","","",26],[10,"close","","",26],[10,"clone","","",20],[10,"read","","",20],[10,"write","","",20],[10,"flush","","",20],[10,"connect","","",20],[10,"peer_name","","",20],[0,"server","hyper","HTTP Server"],[1,"Server","hyper::server","A server can listen on a TCP socket."],[1,"Incoming","","An iterator over incoming connections, represented as pairs of\nhyper Requests and Responses."],[1,"Listening","","A listening server, which can later be closed."],[11,"sockets","","The socket addresses that the server is bound to.",27],[0,"request","","Server Requests"],[1,"Request","hyper::server::request","A request bundles several parts of an incoming `NetworkStream`, given to a `Handler`."],[11,"remote_addr","","The IP address of the remote connection.",28],[11,"method","","The `Method`, such as `Get`, `Post`, etc.",28],[11,"headers","","The headers of the incoming request.",28],[11,"uri","","The target request-uri for this request.",28],[11,"version","","The version of HTTP for this request.",28],[10,"new","","Create a new Request, reading the StartLine and Headers so they are\nimmediately useful.",28],[10,"read","","",28],[0,"response","hyper::server","Server Responses"],[1,"Response","hyper::server::response","The outgoing half for a Tcp connection, created by a `Server` and given to a `Handler`."],[11,"version","","The HTTP version of this response.",29],[10,"status","","The status of this response.",29],[10,"headers","","The headers of this response.",29],[10,"construct","","Construct a Response from its constituent parts.",29],[10,"new","","Creates a new Response that can be used to write to a network stream.",29],[10,"start","","Consume this Response<Fresh>, writing the Headers and Status and creating a Response<Streaming>",29],[10,"status_mut","","Get a mutable reference to the status.",29],[10,"headers_mut","","Get a mutable reference to the Headers.",29],[10,"deconstruct","","Deconstruct this Response into its constituent parts.",29],[10,"end","","Flushes all writing of a response to the client.",29],[10,"write","","",29],[10,"flush","","",29],[6,"Handler","hyper::server","A handler that can handle incoming requests for a server."],[9,"handle","","Receives a `Request`/`Response` pair, and should perform some action on them.",30],[10,"http","","Creates a new server that will handle `HttpStream`s.",31],[10,"many","","Creates a server that can listen to many (ip, port) pairs.",31],[10,"listen_network","","Binds to a socket, and starts handling connections.",31],[10,"listen","","Binds to a socket and starts handling connections.",31],[10,"next","","",32],[10,"close","","Stop the server from listening to all of its socket addresses.",27],[0,"status","hyper","Status Codes"],[2,"StatusCode","hyper::status","An HTTP status code (`Status-Code` in RFC 2616)."],[12,"Continue","","100 Continue",33],[12,"SwitchingProtocols","","101 Switching Protocols",33],[12,"Processing","","102 Processing",33],[12,"Code103","","103 (unregistered)",33],[12,"Code104","","104 (unregistered)",33],[12,"Code105","","105 (unregistered)",33],[12,"Code106","","106 (unregistered)",33],[12,"Code107","","107 (unregistered)",33],[12,"Code108","","108 (unregistered)",33],[12,"Code109","","109 (unregistered)",33],[12,"Code110","","110 (unregistered)",33],[12,"Code111","","111 (unregistered)",33],[12,"Code112","","112 (unregistered)",33],[12,"Code113","","113 (unregistered)",33],[12,"Code114","","114 (unregistered)",33],[12,"Code115","","115 (unregistered)",33],[12,"Code116","","116 (unregistered)",33],[12,"Code117","","117 (unregistered)",33],[12,"Code118","","118 (unregistered)",33],[12,"Code119","","119 (unregistered)",33],[12,"Code120","","120 (unregistered)",33],[12,"Code121","","121 (unregistered)",33],[12,"Code122","","122 (unregistered)",33],[12,"Code123","","123 (unregistered)",33],[12,"Code124","","124 (unregistered)",33],[12,"Code125","","125 (unregistered)",33],[12,"Code126","","126 (unregistered)",33],[12,"Code127","","127 (unregistered)",33],[12,"Code128","","128 (unregistered)",33],[12,"Code129","","129 (unregistered)",33],[12,"Code130","","130 (unregistered)",33],[12,"Code131","","131 (unregistered)",33],[12,"Code132","","132 (unregistered)",33],[12,"Code133","","133 (unregistered)",33],[12,"Code134","","134 (unregistered)",33],[12,"Code135","","135 (unregistered)",33],[12,"Code136","","136 (unregistered)",33],[12,"Code137","","137 (unregistered)",33],[12,"Code138","","138 (unregistered)",33],[12,"Code139","","139 (unregistered)",33],[12,"Code140","","140 (unregistered)",33],[12,"Code141","","141 (unregistered)",33],[12,"Code142","","142 (unregistered)",33],[12,"Code143","","143 (unregistered)",33],[12,"Code144","","144 (unregistered)",33],[12,"Code145","","145 (unregistered)",33],[12,"Code146","","146 (unregistered)",33],[12,"Code147","","147 (unregistered)",33],[12,"Code148","","148 (unregistered)",33],[12,"Code149","","149 (unregistered)",33],[12,"Code150","","150 (unregistered)",33],[12,"Code151","","151 (unregistered)",33],[12,"Code152","","152 (unregistered)",33],[12,"Code153","","153 (unregistered)",33],[12,"Code154","","154 (unregistered)",33],[12,"Code155","","155 (unregistered)",33],[12,"Code156","","156 (unregistered)",33],[12,"Code157","","157 (unregistered)",33],[12,"Code158","","158 (unregistered)",33],[12,"Code159","","159 (unregistered)",33],[12,"Code160","","160 (unregistered)",33],[12,"Code161","","161 (unregistered)",33],[12,"Code162","","162 (unregistered)",33],[12,"Code163","","163 (unregistered)",33],[12,"Code164","","164 (unregistered)",33],[12,"Code165","","165 (unregistered)",33],[12,"Code166","","166 (unregistered)",33],[12,"Code167","","167 (unregistered)",33],[12,"Code168","","168 (unregistered)",33],[12,"Code169","","169 (unregistered)",33],[12,"Code170","","170 (unregistered)",33],[12,"Code171","","171 (unregistered)",33],[12,"Code172","","172 (unregistered)",33],[12,"Code173","","173 (unregistered)",33],[12,"Code174","","174 (unregistered)",33],[12,"Code175","","175 (unregistered)",33],[12,"Code176","","176 (unregistered)",33],[12,"Code177","","177 (unregistered)",33],[12,"Code178","","178 (unregistered)",33],[12,"Code179","","179 (unregistered)",33],[12,"Code180","","180 (unregistered)",33],[12,"Code181","","181 (unregistered)",33],[12,"Code182","","182 (unregistered)",33],[12,"Code183","","183 (unregistered)",33],[12,"Code184","","184 (unregistered)",33],[12,"Code185","","185 (unregistered)",33],[12,"Code186","","186 (unregistered)",33],[12,"Code187","","187 (unregistered)",33],[12,"Code188","","188 (unregistered)",33],[12,"Code189","","189 (unregistered)",33],[12,"Code190","","190 (unregistered)",33],[12,"Code191","","191 (unregistered)",33],[12,"Code192","","192 (unregistered)",33],[12,"Code193","","193 (unregistered)",33],[12,"Code194","","194 (unregistered)",33],[12,"Code195","","195 (unregistered)",33],[12,"Code196","","196 (unregistered)",33],[12,"Code197","","197 (unregistered)",33],[12,"Code198","","198 (unregistered)",33],[12,"Code199","","199 (unregistered)",33],[12,"Ok","","200 OK",33],[12,"Created","","201 Created",33],[12,"Accepted","","202 Accepted",33],[12,"NonAuthoritativeInformation","","203 Non-Authoritative Information",33],[12,"NoContent","","204 No Content",33],[12,"ResetContent","","205 Reset Content",33],[12,"PartialContent","","206 Partial Content",33],[12,"MultiStatus","","207 Multi-Status",33],[12,"AlreadyReported","","208 Already Reported",33],[12,"Code209","","209 (unregistered)",33],[12,"Code210","","210 (unregistered)",33],[12,"Code211","","211 (unregistered)",33],[12,"Code212","","212 (unregistered)",33],[12,"Code213","","213 (unregistered)",33],[12,"Code214","","214 (unregistered)",33],[12,"Code215","","215 (unregistered)",33],[12,"Code216","","216 (unregistered)",33],[12,"Code217","","217 (unregistered)",33],[12,"Code218","","218 (unregistered)",33],[12,"Code219","","219 (unregistered)",33],[12,"Code220","","220 (unregistered)",33],[12,"Code221","","221 (unregistered)",33],[12,"Code222","","222 (unregistered)",33],[12,"Code223","","223 (unregistered)",33],[12,"Code224","","224 (unregistered)",33],[12,"Code225","","225 (unregistered)",33],[12,"ImUsed","","226 IM Used",33],[12,"Code227","","227 (unregistered)",33],[12,"Code228","","228 (unregistered)",33],[12,"Code229","","229 (unregistered)",33],[12,"Code230","","230 (unregistered)",33],[12,"Code231","","231 (unregistered)",33],[12,"Code232","","232 (unregistered)",33],[12,"Code233","","233 (unregistered)",33],[12,"Code234","","234 (unregistered)",33],[12,"Code235","","235 (unregistered)",33],[12,"Code236","","236 (unregistered)",33],[12,"Code237","","237 (unregistered)",33],[12,"Code238","","238 (unregistered)",33],[12,"Code239","","239 (unregistered)",33],[12,"Code240","","240 (unregistered)",33],[12,"Code241","","241 (unregistered)",33],[12,"Code242","","242 (unregistered)",33],[12,"Code243","","243 (unregistered)",33],[12,"Code244","","244 (unregistered)",33],[12,"Code245","","245 (unregistered)",33],[12,"Code246","","246 (unregistered)",33],[12,"Code247","","247 (unregistered)",33],[12,"Code248","","248 (unregistered)",33],[12,"Code249","","249 (unregistered)",33],[12,"Code250","","250 (unregistered)",33],[12,"Code251","","251 (unregistered)",33],[12,"Code252","","252 (unregistered)",33],[12,"Code253","","253 (unregistered)",33],[12,"Code254","","254 (unregistered)",33],[12,"Code255","","255 (unregistered)",33],[12,"Code256","","256 (unregistered)",33],[12,"Code257","","257 (unregistered)",33],[12,"Code258","","258 (unregistered)",33],[12,"Code259","","259 (unregistered)",33],[12,"Code260","","260 (unregistered)",33],[12,"Code261","","261 (unregistered)",33],[12,"Code262","","262 (unregistered)",33],[12,"Code263","","263 (unregistered)",33],[12,"Code264","","264 (unregistered)",33],[12,"Code265","","265 (unregistered)",33],[12,"Code266","","266 (unregistered)",33],[12,"Code267","","267 (unregistered)",33],[12,"Code268","","268 (unregistered)",33],[12,"Code269","","269 (unregistered)",33],[12,"Code270","","270 (unregistered)",33],[12,"Code271","","271 (unregistered)",33],[12,"Code272","","272 (unregistered)",33],[12,"Code273","","273 (unregistered)",33],[12,"Code274","","274 (unregistered)",33],[12,"Code275","","275 (unregistered)",33],[12,"Code276","","276 (unregistered)",33],[12,"Code277","","277 (unregistered)",33],[12,"Code278","","278 (unregistered)",33],[12,"Code279","","279 (unregistered)",33],[12,"Code280","","280 (unregistered)",33],[12,"Code281","","281 (unregistered)",33],[12,"Code282","","282 (unregistered)",33],[12,"Code283","","283 (unregistered)",33],[12,"Code284","","284 (unregistered)",33],[12,"Code285","","285 (unregistered)",33],[12,"Code286","","286 (unregistered)",33],[12,"Code287","","287 (unregistered)",33],[12,"Code288","","288 (unregistered)",33],[12,"Code289","","289 (unregistered)",33],[12,"Code290","","290 (unregistered)",33],[12,"Code291","","291 (unregistered)",33],[12,"Code292","","292 (unregistered)",33],[12,"Code293","","293 (unregistered)",33],[12,"Code294","","294 (unregistered)",33],[12,"Code295","","295 (unregistered)",33],[12,"Code296","","296 (unregistered)",33],[12,"Code297","","297 (unregistered)",33],[12,"Code298","","298 (unregistered)",33],[12,"Code299","","299 (unregistered)",33],[12,"MultipleChoices","","300 Multiple Choices",33],[12,"MovedPermanently","","301 Moved Permanently",33],[12,"Found","","302 Found",33],[12,"SeeOther","","303 See Other",33],[12,"NotModified","","304 Not Modified",33],[12,"UseProxy","","305 Use Proxy",33],[12,"SwitchProxy","","306 Switch Proxy",33],[12,"TemporaryRedirect","","307 Temporary Redirect",33],[12,"PermanentRedirect","","308 Permanent Redirect",33],[12,"Code309","","309 (unregistered)",33],[12,"Code310","","310 (unregistered)",33],[12,"Code311","","311 (unregistered)",33],[12,"Code312","","312 (unregistered)",33],[12,"Code313","","313 (unregistered)",33],[12,"Code314","","314 (unregistered)",33],[12,"Code315","","315 (unregistered)",33],[12,"Code316","","316 (unregistered)",33],[12,"Code317","","317 (unregistered)",33],[12,"Code318","","318 (unregistered)",33],[12,"Code319","","319 (unregistered)",33],[12,"Code320","","320 (unregistered)",33],[12,"Code321","","321 (unregistered)",33],[12,"Code322","","322 (unregistered)",33],[12,"Code323","","323 (unregistered)",33],[12,"Code324","","324 (unregistered)",33],[12,"Code325","","325 (unregistered)",33],[12,"Code326","","326 (unregistered)",33],[12,"Code327","","327 (unregistered)",33],[12,"Code328","","328 (unregistered)",33],[12,"Code329","","329 (unregistered)",33],[12,"Code330","","330 (unregistered)",33],[12,"Code331","","331 (unregistered)",33],[12,"Code332","","332 (unregistered)",33],[12,"Code333","","333 (unregistered)",33],[12,"Code334","","334 (unregistered)",33],[12,"Code335","","335 (unregistered)",33],[12,"Code336","","336 (unregistered)",33],[12,"Code337","","337 (unregistered)",33],[12,"Code338","","338 (unregistered)",33],[12,"Code339","","339 (unregistered)",33],[12,"Code340","","340 (unregistered)",33],[12,"Code341","","341 (unregistered)",33],[12,"Code342","","342 (unregistered)",33],[12,"Code343","","343 (unregistered)",33],[12,"Code344","","344 (unregistered)",33],[12,"Code345","","345 (unregistered)",33],[12,"Code346","","346 (unregistered)",33],[12,"Code347","","347 (unregistered)",33],[12,"Code348","","348 (unregistered)",33],[12,"Code349","","349 (unregistered)",33],[12,"Code350","","350 (unregistered)",33],[12,"Code351","","351 (unregistered)",33],[12,"Code352","","352 (unregistered)",33],[12,"Code353","","353 (unregistered)",33],[12,"Code354","","354 (unregistered)",33],[12,"Code355","","355 (unregistered)",33],[12,"Code356","","356 (unregistered)",33],[12,"Code357","","357 (unregistered)",33],[12,"Code358","","358 (unregistered)",33],[12,"Code359","","359 (unregistered)",33],[12,"Code360","","360 (unregistered)",33],[12,"Code361","","361 (unregistered)",33],[12,"Code362","","362 (unregistered)",33],[12,"Code363","","363 (unregistered)",33],[12,"Code364","","364 (unregistered)",33],[12,"Code365","","365 (unregistered)",33],[12,"Code366","","366 (unregistered)",33],[12,"Code367","","367 (unregistered)",33],[12,"Code368","","368 (unregistered)",33],[12,"Code369","","369 (unregistered)",33],[12,"Code370","","370 (unregistered)",33],[12,"Code371","","371 (unregistered)",33],[12,"Code372","","372 (unregistered)",33],[12,"Code373","","373 (unregistered)",33],[12,"Code374","","374 (unregistered)",33],[12,"Code375","","375 (unregistered)",33],[12,"Code376","","376 (unregistered)",33],[12,"Code377","","377 (unregistered)",33],[12,"Code378","","378 (unregistered)",33],[12,"Code379","","379 (unregistered)",33],[12,"Code380","","380 (unregistered)",33],[12,"Code381","","381 (unregistered)",33],[12,"Code382","","382 (unregistered)",33],[12,"Code383","","383 (unregistered)",33],[12,"Code384","","384 (unregistered)",33],[12,"Code385","","385 (unregistered)",33],[12,"Code386","","386 (unregistered)",33],[12,"Code387","","387 (unregistered)",33],[12,"Code388","","388 (unregistered)",33],[12,"Code389","","389 (unregistered)",33],[12,"Code390","","390 (unregistered)",33],[12,"Code391","","391 (unregistered)",33],[12,"Code392","","392 (unregistered)",33],[12,"Code393","","393 (unregistered)",33],[12,"Code394","","394 (unregistered)",33],[12,"Code395","","395 (unregistered)",33],[12,"Code396","","396 (unregistered)",33],[12,"Code397","","397 (unregistered)",33],[12,"Code398","","398 (unregistered)",33],[12,"Code399","","399 (unregistered)",33],[12,"BadRequest","","400 Bad Request",33],[12,"Unauthorized","","401 Unauthorized",33],[12,"PaymentRequired","","402 Payment Required",33],[12,"Forbidden","","403 Forbidden",33],[12,"NotFound","","404 Not Found",33],[12,"MethodNotAllowed","","405 Method Not Allowed",33],[12,"NotAcceptable","","406 Not Acceptable",33],[12,"ProxyAuthenticationRequired","","407 Proxy Authentication Required",33],[12,"RequestTimeout","","408 Request Timeout",33],[12,"Conflict","","409 Conflict",33],[12,"Gone","","410 Gone",33],[12,"LengthRequired","","411 Length Required",33],[12,"PreconditionFailed","","412 Precondition Failed",33],[12,"RequestEntityTooLarge","","413 Request Entity Too Large",33],[12,"RequestUriTooLong","","414 Request-URI Too Long",33],[12,"UnsupportedMediaType","","415 Unsupported Media Type",33],[12,"RequestedRangeNotSatisfiable","","416 Requested Range Not Satisfiable",33],[12,"ExpectationFailed","","417 Expectation Failed",33],[12,"ImATeapot","","418 I'm a teapot",33],[12,"AuthenticationTimeout","","419 Authentication Timeout",33],[12,"Code420","","420 (unregistered)",33],[12,"Code421","","421 (unregistered)",33],[12,"UnprocessableEntity","","422 Unprocessable Entity",33],[12,"Locked","","423 Locked",33],[12,"FailedDependency","","424 Failed Dependency",33],[12,"UnorderedCollection","","425 Unordered Collection",33],[12,"UpgradeRequired","","426 Upgrade Required",33],[12,"Code427","","427 (unregistered)",33],[12,"PreconditionRequired","","428 Precondition Required",33],[12,"TooManyRequests","","429 Too Many Requests",33],[12,"Code430","","430 (unregistered)",33],[12,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large",33],[12,"Code432","","432 (unregistered)",33],[12,"Code433","","433 (unregistered)",33],[12,"Code434","","434 (unregistered)",33],[12,"Code435","","435 (unregistered)",33],[12,"Code436","","436 (unregistered)",33],[12,"Code437","","437 (unregistered)",33],[12,"Code438","","438 (unregistered)",33],[12,"Code439","","439 (unregistered)",33],[12,"Code440","","440 (unregistered)",33],[12,"Code441","","441 (unregistered)",33],[12,"Code442","","442 (unregistered)",33],[12,"Code443","","443 (unregistered)",33],[12,"Code444","","444 (unregistered)",33],[12,"Code445","","445 (unregistered)",33],[12,"Code446","","446 (unregistered)",33],[12,"Code447","","447 (unregistered)",33],[12,"Code448","","448 (unregistered)",33],[12,"Code449","","449 (unregistered)",33],[12,"Code450","","450 (unregistered)",33],[12,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons",33],[12,"Code452","","452 (unregistered)",33],[12,"Code453","","453 (unregistered)",33],[12,"Code454","","454 (unregistered)",33],[12,"Code455","","455 (unregistered)",33],[12,"Code456","","456 (unregistered)",33],[12,"Code457","","457 (unregistered)",33],[12,"Code458","","458 (unregistered)",33],[12,"Code459","","459 (unregistered)",33],[12,"Code460","","460 (unregistered)",33],[12,"Code461","","461 (unregistered)",33],[12,"Code462","","462 (unregistered)",33],[12,"Code463","","463 (unregistered)",33],[12,"Code464","","464 (unregistered)",33],[12,"Code465","","465 (unregistered)",33],[12,"Code466","","466 (unregistered)",33],[12,"Code467","","467 (unregistered)",33],[12,"Code468","","468 (unregistered)",33],[12,"Code469","","469 (unregistered)",33],[12,"Code470","","470 (unregistered)",33],[12,"Code471","","471 (unregistered)",33],[12,"Code472","","472 (unregistered)",33],[12,"Code473","","473 (unregistered)",33],[12,"Code474","","474 (unregistered)",33],[12,"Code475","","475 (unregistered)",33],[12,"Code476","","476 (unregistered)",33],[12,"Code477","","477 (unregistered)",33],[12,"Code478","","478 (unregistered)",33],[12,"Code479","","479 (unregistered)",33],[12,"Code480","","480 (unregistered)",33],[12,"Code481","","481 (unregistered)",33],[12,"Code482","","482 (unregistered)",33],[12,"Code483","","483 (unregistered)",33],[12,"Code484","","484 (unregistered)",33],[12,"Code485","","485 (unregistered)",33],[12,"Code486","","486 (unregistered)",33],[12,"Code487","","487 (unregistered)",33],[12,"Code488","","488 (unregistered)",33],[12,"Code489","","489 (unregistered)",33],[12,"Code490","","490 (unregistered)",33],[12,"Code491","","491 (unregistered)",33],[12,"Code492","","492 (unregistered)",33],[12,"Code493","","493 (unregistered)",33],[12,"Code494","","494 (unregistered)",33],[12,"Code495","","495 (unregistered)",33],[12,"Code496","","496 (unregistered)",33],[12,"Code497","","497 (unregistered)",33],[12,"Code498","","498 (unregistered)",33],[12,"Code499","","499 (unregistered)",33],[12,"InternalServerError","","500 Internal Server Error",33],[12,"NotImplemented","","501 Not Implemented",33],[12,"BadGateway","","502 Bad Gateway",33],[12,"ServiceUnavailable","","503 Service Unavailable",33],[12,"GatewayTimeout","","504 Gateway Timeout",33],[12,"HttpVersionNotSupported","","505 HTTP Version Not Supported",33],[12,"VariantAlsoNegotiates","","506 Variant Also Negotiates",33],[12,"InsufficientStorage","","507 Insufficient Storage",33],[12,"LoopDetected","","508 Loop Detected",33],[12,"Code509","","509 (unregistered)",33],[12,"NotExtended","","510 Not Extended",33],[12,"NetworkAuthenticationRequired","","511 Network Authentication Required",33],[12,"Code512","","512 (unregistered)",33],[12,"Code513","","513 (unregistered)",33],[12,"Code514","","514 (unregistered)",33],[12,"Code515","","515 (unregistered)",33],[12,"Code516","","516 (unregistered)",33],[12,"Code517","","517 (unregistered)",33],[12,"Code518","","518 (unregistered)",33],[12,"Code519","","519 (unregistered)",33],[12,"Code520","","520 (unregistered)",33],[12,"Code521","","521 (unregistered)",33],[12,"Code522","","522 (unregistered)",33],[12,"Code523","","523 (unregistered)",33],[12,"Code524","","524 (unregistered)",33],[12,"Code525","","525 (unregistered)",33],[12,"Code526","","526 (unregistered)",33],[12,"Code527","","527 (unregistered)",33],[12,"Code528","","528 (unregistered)",33],[12,"Code529","","529 (unregistered)",33],[12,"Code530","","530 (unregistered)",33],[12,"Code531","","531 (unregistered)",33],[12,"Code532","","532 (unregistered)",33],[12,"Code533","","533 (unregistered)",33],[12,"Code534","","534 (unregistered)",33],[12,"Code535","","535 (unregistered)",33],[12,"Code536","","536 (unregistered)",33],[12,"Code537","","537 (unregistered)",33],[12,"Code538","","538 (unregistered)",33],[12,"Code539","","539 (unregistered)",33],[12,"Code540","","540 (unregistered)",33],[12,"Code541","","541 (unregistered)",33],[12,"Code542","","542 (unregistered)",33],[12,"Code543","","543 (unregistered)",33],[12,"Code544","","544 (unregistered)",33],[12,"Code545","","545 (unregistered)",33],[12,"Code546","","546 (unregistered)",33],[12,"Code547","","547 (unregistered)",33],[12,"Code548","","548 (unregistered)",33],[12,"Code549","","549 (unregistered)",33],[12,"Code550","","550 (unregistered)",33],[12,"Code551","","551 (unregistered)",33],[12,"Code552","","552 (unregistered)",33],[12,"Code553","","553 (unregistered)",33],[12,"Code554","","554 (unregistered)",33],[12,"Code555","","555 (unregistered)",33],[12,"Code556","","556 (unregistered)",33],[12,"Code557","","557 (unregistered)",33],[12,"Code558","","558 (unregistered)",33],[12,"Code559","","559 (unregistered)",33],[12,"Code560","","560 (unregistered)",33],[12,"Code561","","561 (unregistered)",33],[12,"Code562","","562 (unregistered)",33],[12,"Code563","","563 (unregistered)",33],[12,"Code564","","564 (unregistered)",33],[12,"Code565","","565 (unregistered)",33],[12,"Code566","","566 (unregistered)",33],[12,"Code567","","567 (unregistered)",33],[12,"Code568","","568 (unregistered)",33],[12,"Code569","","569 (unregistered)",33],[12,"Code570","","570 (unregistered)",33],[12,"Code571","","571 (unregistered)",33],[12,"Code572","","572 (unregistered)",33],[12,"Code573","","573 (unregistered)",33],[12,"Code574","","574 (unregistered)",33],[12,"Code575","","575 (unregistered)",33],[12,"Code576","","576 (unregistered)",33],[12,"Code577","","577 (unregistered)",33],[12,"Code578","","578 (unregistered)",33],[12,"Code579","","579 (unregistered)",33],[12,"Code580","","580 (unregistered)",33],[12,"Code581","","581 (unregistered)",33],[12,"Code582","","582 (unregistered)",33],[12,"Code583","","583 (unregistered)",33],[12,"Code584","","584 (unregistered)",33],[12,"Code585","","585 (unregistered)",33],[12,"Code586","","586 (unregistered)",33],[12,"Code587","","587 (unregistered)",33],[12,"Code588","","588 (unregistered)",33],[12,"Code589","","589 (unregistered)",33],[12,"Code590","","590 (unregistered)",33],[12,"Code591","","591 (unregistered)",33],[12,"Code592","","592 (unregistered)",33],[12,"Code593","","593 (unregistered)",33],[12,"Code594","","594 (unregistered)",33],[12,"Code595","","595 (unregistered)",33],[12,"Code596","","596 (unregistered)",33],[12,"Code597","","597 (unregistered)",33],[12,"Code598","","598 (unregistered)",33],[12,"Code599","","599 (unregistered)",33],[2,"StatusClass","","The class of an HTTP `Status-Code`."],[12,"Informational","","1xx: Informational - Request received, continuing process",34],[12,"Success","","2xx: Success - The action was successfully received, understood, and accepted",34],[12,"Redirection","","3xx: Redirection - Further action must be taken in order to complete the request",34],[12,"ClientError","","4xx: Client Error - The request contains bad syntax or cannot be fulfilled",34],[12,"ServerError","","5xx: Server Error - The server failed to fulfill an apparently valid request",34],[10,"canonical_reason","","Get the standardised `Reason-Phrase` for this status code.",33],[10,"class","","Determine the class of a status code, based on its first digit.",33],[10,"fmt","","",33],[10,"fmt","","",33],[10,"eq","","",33],[10,"clone","","",33],[10,"from_i64","","",33],[10,"from_u64","","",33],[10,"partial_cmp","","",33],[10,"cmp","","",33],[10,"to_i64","","",33],[10,"to_u64","","",33],[10,"cmp","","",34],[10,"partial_cmp","","",34],[10,"lt","","",34],[10,"le","","",34],[10,"gt","","",34],[10,"ge","","",34],[10,"eq","","",34],[10,"ne","","",34],[10,"clone","","",34],[10,"default_code","","Get the default status code for the class.",34],[10,"to_i64","","",34],[10,"to_u64","","",34],[0,"uri","hyper","HTTP RequestUris"],[2,"RequestUri","hyper::uri","The Request-URI of a Request's StartLine."],[12,"AbsolutePath","","The most common request target, an absolute path and optional query.",35],[12,"AbsoluteUri","","An absolute URI. Used in conjunction with proxies.",35],[12,"Authority","","The authority form is only for use with `CONNECT` requests.",35],[12,"Star","","The star is used to target the entire server, instead of a specific resource.",35],[10,"clone","","",35],[10,"eq","","",35],[10,"ne","","",35],[10,"fmt","","",35],[0,"version","hyper","HTTP Versions enum"],[2,"HttpVersion","hyper::version","Represents a version of the HTTP spec."],[12,"Http09","","`HTTP/0.9`",36],[12,"Http10","","`HTTP/1.0`",36],[12,"Http11","","`HTTP/1.1`",36],[12,"Http20","","`HTTP/2.0`",36],[10,"partial_cmp","","",36],[10,"lt","","",36],[10,"le","","",36],[10,"gt","","",36],[10,"ge","","",36],[10,"eq","","",36],[10,"ne","","",36],[10,"fmt","","",36],[4,"HttpResult","hyper","Result type often returned from methods that can have `HttpError`s."],[10,"clone","","",0],[10,"eq","","",0],[10,"ne","","",0],[10,"fmt","","",0],[10,"new","std::rand::os::imp","Create a new `OsRng`.",37],[10,"next_u32","","",37],[10,"next_u64","","",37],[10,"fill_bytes","","",37],[10,"next_u64","","",37],[10,"fill_bytes","","",37],[10,"gen","","",37],[10,"gen_iter","","",37],[10,"gen_range","","",37],[10,"gen_weighted_bool","","",37],[10,"gen_ascii_chars","","",37],[10,"choose","","",37],[10,"choose_option","","",37],[10,"shuffle","","",37],[10,"new","std::rand::reader","Create a new `ReaderRng` from a `Reader`.",38],[10,"next_u32","","",38],[10,"next_u64","","",38],[10,"fill_bytes","","",38],[10,"next_u64","","",38],[10,"fill_bytes","","",38],[10,"gen","","",38],[10,"gen_iter","","",38],[10,"gen_range","","",38],[10,"gen_weighted_bool","","",38],[10,"gen_ascii_chars","","",38],[10,"choose","","",38],[10,"choose_option","","",38],[10,"shuffle","","",38],[10,"new","std::rand","Create a randomly seeded instance of `StdRng`.",39],[10,"next_u32","","",39],[10,"next_u64","","",39],[10,"next_u64","","",39],[10,"fill_bytes","","",39],[10,"gen","","",39],[10,"gen_iter","","",39],[10,"gen_range","","",39],[10,"gen_weighted_bool","","",39],[10,"gen_ascii_chars","","",39],[10,"choose","","",39],[10,"choose_option","","",39],[10,"shuffle","","",39],[10,"reseed","","",39],[10,"from_seed","","",39],[10,"reseed","","",40],[10,"next_u32","","",41],[10,"next_u64","","",41],[10,"fill_bytes","","",41],[10,"next_u64","","",41],[10,"fill_bytes","","",41],[10,"gen","","",41],[10,"gen_iter","","",41],[10,"gen_range","","",41],[10,"gen_weighted_bool","","",41],[10,"gen_ascii_chars","","",41],[10,"choose","","",41],[10,"choose_option","","",41],[10,"shuffle","","",41],[10,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Fails if `low >= high`.",42],[10,"sample","","",42],[10,"ind_sample","","",42],[10,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",43],[10,"sample","","",43],[10,"sample","","",44],[10,"sample","","",45],[10,"ind_sample","","",43],[10,"ind_sample","","",44],[10,"ind_sample","","",45],[10,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Fails if `k < 0`.",46],[10,"sample","","",46],[10,"ind_sample","","",46],[10,"new","","Create a new `FisherF` distribution, with the given\nparameter. Fails if either `m` or `n` are not positive.",47],[10,"sample","","",47],[10,"ind_sample","","",47],[10,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Fails if `n <= 0`.",48],[10,"sample","","",48],[10,"ind_sample","","",48],[10,"rand","rand::distributions::normal","",49],[10,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation. Fails if `std_dev < 0`.",50],[10,"sample","","",50],[10,"ind_sample","","",50],[10,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation. Fails if `std_dev < 0`.",51],[10,"sample","","",51],[10,"ind_sample","","",51],[10,"rand","rand::distributions::exponential","",52],[10,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Fails if `lambda <= 0`.",53],[10,"sample","","",53],[10,"ind_sample","","",53],[10,"sample","rand::distributions","",54],[10,"ind_sample","","",54],[10,"new","","Create a new `WeightedChoice`.",55],[10,"sample","","",55],[10,"ind_sample","","",55],[10,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",56],[10,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",56],[10,"next_u32","","",56],[10,"next_u64","","",56],[10,"fill_bytes","","",56],[10,"next_u64","","",56],[10,"fill_bytes","","",56],[10,"gen","","",56],[10,"gen_iter","","",56],[10,"gen_range","","",56],[10,"gen_weighted_bool","","",56],[10,"gen_ascii_chars","","",56],[10,"choose","","",56],[10,"choose_option","","",56],[10,"shuffle","","",56],[10,"reseed","","",56],[10,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",56],[10,"reseed","","",57],[10,"default","","",57],[10,"hash","std::ascii","",58],[10,"assert_receiver_is_total_eq","","",58],[10,"cmp","","",58],[10,"partial_cmp","","",58],[10,"lt","","",58],[10,"le","","",58],[10,"gt","","",58],[10,"ge","","",58],[10,"lt","","",58],[10,"le","","",58],[10,"gt","","",58],[10,"ge","","",58],[10,"eq","","",58],[10,"ne","","",58],[10,"ne","","",58],[10,"clone","","",58],[10,"clone_from","","",58],[10,"to_byte","","Converts an ascii character into a `u8`.",58],[10,"to_char","","Converts an ascii character into a `char`.",58],[10,"to_lower","","",58],[10,"to_lowercase","","Convert to lowercase.",58],[10,"to_upper","","",58],[10,"to_uppercase","","Convert to uppercase.",58],[10,"eq_ignore_case","","Compares two ascii characters of equality, ignoring case.",58],[10,"is_alpha","","",58],[10,"is_alphabetic","","Check if the character is a letter (a-z, A-Z)",58],[10,"is_digit","","Check if the character is a number (0-9)",58],[10,"is_alnum","","",58],[10,"is_alphanumeric","","Check if the character is a letter or number",58],[10,"is_blank","","Check if the character is a space or horizontal tab",58],[10,"is_control","","Check if the character is a control character",58],[10,"is_graph","","Checks if the character is printable (except space)",58],[10,"is_print","","Checks if the character is printable (including space)",58],[10,"is_lower","","",58],[10,"is_lowercase","","Checks if the character is lowercase",58],[10,"is_upper","","",58],[10,"is_uppercase","","Checks if the character is uppercase",58],[10,"is_punctuation","","Checks if the character is punctuation",58],[10,"is_hex","","Checks if the character is a valid hex digit",58],[10,"fmt","","",58],[10,"is_ascii","collections::string","",59],[10,"into_ascii_nocheck","","",59],[10,"into_ascii","","",59],[10,"into_ascii_opt","","",59],[10,"is_ascii","collections::vec","",60],[10,"into_ascii_nocheck","","",60],[10,"into_ascii","","",60],[10,"into_ascii_opt","","",60],[10,"into_string","","",60],[10,"into_bytes","","",60],[10,"into_ascii_upper","collections::string","",59],[10,"into_ascii_lower","","",59],[10,"into_ascii_upper","collections::vec","",60],[10,"into_ascii_lower","","",60],[10,"clone","std::gc","Clone the pointer only",61],[10,"clone_from","","",61],[10,"eq","","",61],[10,"ne","","",61],[10,"ne","","",61],[10,"partial_cmp","","",61],[10,"lt","","",61],[10,"le","","",61],[10,"ge","","",61],[10,"gt","","",61],[10,"lt","","",61],[10,"le","","",61],[10,"gt","","",61],[10,"ge","","",61],[10,"cmp","","",61],[10,"assert_receiver_is_total_eq","","",61],[10,"deref","","",61],[10,"default","","",61],[10,"repr","","",61],[10,"hash","","",61],[10,"fmt","","",61],[10,"cmp","std::time::duration","",62],[10,"partial_cmp","","",62],[10,"lt","","",62],[10,"le","","",62],[10,"gt","","",62],[10,"ge","","",62],[10,"lt","","",62],[10,"le","","",62],[10,"gt","","",62],[10,"ge","","",62],[10,"assert_receiver_is_total_eq","","",62],[10,"eq","","",62],[10,"ne","","",62],[10,"ne","","",62],[10,"clone","","",62],[10,"clone_from","","",62],[10,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60), with overflow checks.\nFails when the duration is out of bounds.",62],[10,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nFails when the duration is out of bounds.",62],[10,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nFails when the duration is out of bounds.",62],[10,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nFails when the duration is out of bounds.",62],[10,"seconds","","Makes a new `Duration` with given number of seconds.\nFails when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",62],[10,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",62],[10,"microseconds","","Makes a new `Duration` with given number of microseconds.",62],[10,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",62],[10,"num_weeks","","Returns the total number of whole weeks in the duration.",62],[10,"num_days","","Returns the total number of whole days in the duration.",62],[10,"num_hours","","Returns the total number of whole hours in the duration.",62],[10,"num_minutes","","Returns the total number of whole minutes in the duration.",62],[10,"num_seconds","","Returns the total number of whole seconds in the duration.",62],[10,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",62],[10,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",62],[10,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",62],[10,"min_value","","",62],[10,"max_value","","",62],[10,"zero","","",62],[10,"is_zero","","",62],[10,"neg","","",62],[10,"add","","",62],[10,"checked_add","","",62],[10,"sub","","",62],[10,"checked_sub","","",62],[10,"mul","","",62],[10,"div","","",62],[10,"fmt","","",62],[10,"from_str","collections::string","",59],[10,"clone","std::collections::hashmap::map","",63],[10,"clone_from","","",63],[10,"clone","","",64],[10,"clone_from","","",64],[10,"deref","","",65],[10,"deref_mut","","",65],[10,"len","","Return the number of elements in the map.",64],[10,"is_empty","","",64],[10,"clear","","Clear the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",64],[10,"find","","",64],[10,"contains_key","","",64],[10,"contains_key","","",64],[10,"find_mut","","",64],[10,"swap","","",64],[10,"pop","","",64],[10,"insert","","",64],[10,"remove","","",64],[10,"new","","Create an empty HashMap.",64],[10,"with_capacity","","Creates an empty hash map with the given initial capacity.",64],[10,"with_hasher","","Creates an empty hashmap which will use the given hasher to hash keys.",64],[10,"with_capacity_and_hasher","","Create an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",64],[10,"reserve","","The hashtable will never try to shrink below this size. You can use\nthis function to reduce reallocations if your hashtable frequently\ngrows and shrinks by large amounts.",64],[10,"find_or_insert","","Deprecated: use `entry` as follows instead:",64],[10,"find_or_insert_with","","Deprecated: use `entry` as follows instead:",64],[10,"insert_or_update_with","","Deprecated: use `entry` as follows instead:",64],[10,"find_with_or_insert_with","","Deprecated: use `entry` as follows instead:",64],[10,"get","","Retrieves a value for the given key.\nSee [`find`](../trait.Map.html#tymethod.find) for a non-failing alternative.",64],[10,"get_mut","","Retrieves a mutable value for the given key.\nSee [`find_mut`](../trait.MutableMap.html#tymethod.find_mut) for a non-failing alternative.",64],[10,"contains_key_equiv","","Return true if the map contains a value for the specified key,\nusing equivalence.",64],[10,"find_equiv","","Return the value corresponding to the key in the map, using\nequivalence.",64],[10,"pop_equiv","","Remove an equivalent key from the map, returning the value at the\nkey if the key was previously in the map.",64],[10,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",64],[10,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",64],[10,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",64],[10,"mut_iter","","Deprecated: use `iter_mut`.",64],[10,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",64],[10,"move_iter","","Deprecated: use `into_iter`.",64],[10,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",64],[10,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation",64],[10,"find_copy","","Return a copy of the value corresponding to the key.",64],[10,"get_copy","","Return a copy of the value corresponding to the key.",64],[10,"eq","","",64],[10,"ne","","",64],[10,"assert_receiver_is_total_eq","","",64],[10,"fmt","","",64],[10,"default","","",64],[10,"index","","",64],[10,"next","","",66],[10,"size_hint","","",66],[10,"size_hint","","",66],[10,"chain","","",66],[10,"zip","","",66],[10,"map","","",66],[10,"filter","","",66],[10,"filter_map","","",66],[10,"enumerate","","",66],[10,"peekable","","",66],[10,"skip_while","","",66],[10,"take_while","","",66],[10,"skip","","",66],[10,"take","","",66],[10,"scan","","",66],[10,"flat_map","","",66],[10,"fuse","","",66],[10,"inspect","","",66],[10,"by_ref","","",66],[10,"advance","","",66],[10,"collect","","",66],[10,"nth","","",66],[10,"last","","",66],[10,"fold","","",66],[10,"count","","",66],[10,"all","","",66],[10,"any","","",66],[10,"find","","",66],[10,"position","","",66],[10,"max_by","","",66],[10,"min_by","","",66],[10,"next","","",67],[10,"size_hint","","",67],[10,"size_hint","","",67],[10,"chain","","",67],[10,"zip","","",67],[10,"map","","",67],[10,"filter","","",67],[10,"filter_map","","",67],[10,"enumerate","","",67],[10,"peekable","","",67],[10,"skip_while","","",67],[10,"take_while","","",67],[10,"skip","","",67],[10,"take","","",67],[10,"scan","","",67],[10,"flat_map","","",67],[10,"fuse","","",67],[10,"inspect","","",67],[10,"by_ref","","",67],[10,"advance","","",67],[10,"collect","","",67],[10,"nth","","",67],[10,"last","","",67],[10,"fold","","",67],[10,"count","","",67],[10,"all","","",67],[10,"any","","",67],[10,"find","","",67],[10,"position","","",67],[10,"max_by","","",67],[10,"min_by","","",67],[10,"next","","",68],[10,"size_hint","","",68],[10,"size_hint","","",68],[10,"chain","","",68],[10,"zip","","",68],[10,"map","","",68],[10,"filter","","",68],[10,"filter_map","","",68],[10,"enumerate","","",68],[10,"peekable","","",68],[10,"skip_while","","",68],[10,"take_while","","",68],[10,"skip","","",68],[10,"take","","",68],[10,"scan","","",68],[10,"flat_map","","",68],[10,"fuse","","",68],[10,"inspect","","",68],[10,"by_ref","","",68],[10,"advance","","",68],[10,"collect","","",68],[10,"nth","","",68],[10,"last","","",68],[10,"fold","","",68],[10,"count","","",68],[10,"all","","",68],[10,"any","","",68],[10,"find","","",68],[10,"position","","",68],[10,"max_by","","",68],[10,"min_by","","",68],[10,"get","","Gets a reference to the value in the entry",69],[10,"get_mut","","Gets a mutable reference to the value in the entry",69],[10,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",69],[10,"set","","Sets the value of the entry, and returns the entry's old value",69],[10,"take","","Takes the value out of the entry, and returns it",69],[10,"set","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",70],[10,"from_iter","","",64],[10,"extend","","",64],[10,"clone","std::collections::hashmap::set","",71],[10,"clone_from","","",71],[10,"new","","Create an empty HashSet.",71],[10,"with_capacity","","Create an empty HashSet with space for at least `n` elements in\nthe hash table.",71],[10,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",71],[10,"with_capacity_and_hasher","","Create an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",71],[10,"reserve","","Reserve space for at least `n` elements in the hash table.",71],[10,"contains_equiv","","Returns true if the hash set contains a value equivalent to the\ngiven query value.",71],[10,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",71],[10,"move_iter","","Deprecated: use `into_iter`.",71],[10,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",71],[10,"difference","","Visit the values representing the difference.",71],[10,"symmetric_difference","","Visit the values representing the symmetric difference.",71],[10,"intersection","","Visit the values representing the intersection.",71],[10,"union","","Visit the values representing the union.",71],[10,"eq","","",71],[10,"ne","","",71],[10,"assert_receiver_is_total_eq","","",71],[10,"len","","",71],[10,"is_empty","","",71],[10,"clear","","",71],[10,"contains","","",71],[10,"is_disjoint","","",71],[10,"is_subset","","",71],[10,"is_superset","","",71],[10,"insert","","",71],[10,"remove","","",71],[10,"fmt","","",71],[10,"from_iter","","",71],[10,"extend","","",71],[10,"default","","",71],[10,"eq","std::collections::hashmap::table","",72],[10,"ne","","",72],[10,"ne","","",72],[10,"inspect","","Peek at the hash value, which is guaranteed to be non-zero.",72],[10,"table","","Borrow a reference to the table.",73],[10,"into_table","","Move out the reference to the table.",73],[10,"index","","Get the raw index.",73],[10,"table","","Borrow a reference to the table.",74],[10,"into_table","","Move out the reference to the table.",74],[10,"into_table","","Move out the reference to the table.",75],[10,"index","","Get the raw index.",75],[10,"new","","",75],[10,"at_index","","",75],[10,"first","","",75],[10,"peek","","Reads a bucket at a given index, returning an enum indicating whether\nit's initialized or not. You need to match on this enum to get\nthe appropriate types to call most of the other functions in\nthis module.",75],[10,"next","","Modifies the bucket pointer in place to make it point to the next slot.",75],[10,"next","","",74],[10,"into_bucket","","",74],[10,"gap_peek","","",74],[10,"put","","Puts given key and value pair, along with the key's hash,\ninto this bucket in the hashtable. Note how `self` is 'moved' into\nthis function, because this slot will no longer be empty when\nwe return! A `FullBucket` is returned for later use, pointing to\nthe newly-filled slot in the hashtable.",74],[10,"next","","",73],[10,"into_bucket","","",73],[10,"distance","","Get the distance between this bucket and the 'ideal' location\nas determined by the key's hash stored in it.",73],[10,"hash","","",73],[10,"read","","Gets references to the key and value at a given index.",73],[10,"take","","Removes this bucket's key and value from the hashtable.",73],[10,"replace","","",73],[10,"read_mut","","Gets mutable references to the key and value at a given index.",73],[10,"into_refs","","Exchange a bucket state for immutable references into the table.\nBecause the underlying reference to the table is also consumed,\nno further changes to the structure of the table are possible;\nin exchange for this, the returned references have a longer lifetime\nthan the references returned by `read()`.",73],[10,"into_mut_refs","","This works similarly to `into_refs`, exchanging a bucket state\nfor mutable references into the table.",73],[10,"expect_full","","",76],[10,"full","","",77],[10,"shift","","",77],[10,"new","","Creates a new raw table from a given capacity. All buckets are\ninitially empty.",78],[10,"capacity","","The hashtable's capacity, similar to a vector's.",78],[10,"size","","The number of elements ever `put` in the hashtable, minus the number\nof elements ever `take`n.",78],[10,"iter","","",78],[10,"iter_mut","","",78],[10,"into_iter","","",78],[10,"next","","",79],[10,"size_hint","","",79],[10,"chain","","",79],[10,"zip","","",79],[10,"map","","",79],[10,"filter","","",79],[10,"filter_map","","",79],[10,"enumerate","","",79],[10,"peekable","","",79],[10,"skip_while","","",79],[10,"take_while","","",79],[10,"skip","","",79],[10,"take","","",79],[10,"scan","","",79],[10,"flat_map","","",79],[10,"fuse","","",79],[10,"inspect","","",79],[10,"by_ref","","",79],[10,"advance","","",79],[10,"collect","","",79],[10,"nth","","",79],[10,"last","","",79],[10,"fold","","",79],[10,"count","","",79],[10,"all","","",79],[10,"any","","",79],[10,"find","","",79],[10,"position","","",79],[10,"max_by","","",79],[10,"min_by","","",79],[10,"next","","",80],[10,"size_hint","","",80],[10,"chain","","",80],[10,"zip","","",80],[10,"map","","",80],[10,"filter","","",80],[10,"filter_map","","",80],[10,"enumerate","","",80],[10,"peekable","","",80],[10,"skip_while","","",80],[10,"take_while","","",80],[10,"skip","","",80],[10,"take","","",80],[10,"scan","","",80],[10,"flat_map","","",80],[10,"fuse","","",80],[10,"inspect","","",80],[10,"by_ref","","",80],[10,"advance","","",80],[10,"collect","","",80],[10,"nth","","",80],[10,"last","","",80],[10,"fold","","",80],[10,"count","","",80],[10,"all","","",80],[10,"any","","",80],[10,"find","","",80],[10,"position","","",80],[10,"max_by","","",80],[10,"min_by","","",80],[10,"next","","",81],[10,"size_hint","","",81],[10,"size_hint","","",81],[10,"chain","","",81],[10,"zip","","",81],[10,"map","","",81],[10,"filter","","",81],[10,"filter_map","","",81],[10,"enumerate","","",81],[10,"peekable","","",81],[10,"skip_while","","",81],[10,"take_while","","",81],[10,"skip","","",81],[10,"take","","",81],[10,"scan","","",81],[10,"flat_map","","",81],[10,"fuse","","",81],[10,"inspect","","",81],[10,"by_ref","","",81],[10,"advance","","",81],[10,"collect","","",81],[10,"nth","","",81],[10,"last","","",81],[10,"fold","","",81],[10,"count","","",81],[10,"all","","",81],[10,"any","","",81],[10,"find","","",81],[10,"position","","",81],[10,"max_by","","",81],[10,"min_by","","",81],[10,"next","","",82],[10,"size_hint","","",82],[10,"size_hint","","",82],[10,"chain","","",82],[10,"zip","","",82],[10,"map","","",82],[10,"filter","","",82],[10,"filter_map","","",82],[10,"enumerate","","",82],[10,"peekable","","",82],[10,"skip_while","","",82],[10,"take_while","","",82],[10,"skip","","",82],[10,"take","","",82],[10,"scan","","",82],[10,"flat_map","","",82],[10,"fuse","","",82],[10,"inspect","","",82],[10,"by_ref","","",82],[10,"advance","","",82],[10,"collect","","",82],[10,"nth","","",82],[10,"last","","",82],[10,"fold","","",82],[10,"count","","",82],[10,"all","","",82],[10,"any","","",82],[10,"find","","",82],[10,"position","","",82],[10,"max_by","","",82],[10,"min_by","","",82],[10,"next","","",83],[10,"size_hint","","",83],[10,"size_hint","","",83],[10,"chain","","",83],[10,"zip","","",83],[10,"map","","",83],[10,"filter","","",83],[10,"filter_map","","",83],[10,"enumerate","","",83],[10,"peekable","","",83],[10,"skip_while","","",83],[10,"take_while","","",83],[10,"skip","","",83],[10,"take","","",83],[10,"scan","","",83],[10,"flat_map","","",83],[10,"fuse","","",83],[10,"inspect","","",83],[10,"by_ref","","",83],[10,"advance","","",83],[10,"collect","","",83],[10,"nth","","",83],[10,"last","","",83],[10,"fold","","",83],[10,"count","","",83],[10,"all","","",83],[10,"any","","",83],[10,"find","","",83],[10,"position","","",83],[10,"max_by","","",83],[10,"min_by","","",83],[10,"clone","","",78],[10,"clone_from","","",78],[10,"drop","","",78],[10,"hash","std::collections::lru_cache","",84],[10,"eq","","",84],[10,"ne","","",84],[10,"assert_receiver_is_total_eq","","",84],[10,"new","","Create an LRU Cache that holds at most `capacity` items.",85],[10,"put","","Put a key-value pair into cache.",85],[10,"get","","Return a value corresponding to the key in the cache.",85],[10,"pop","","Remove and return a value corresponding to the key from the cache.",85],[10,"capacity","","Return the maximum number of key-value pairs the cache can hold.",85],[10,"change_capacity","","Change the number of key-value pairs the cache can hold. Remove\nleast-recently-used key-value pairs if necessary.",85],[10,"fmt","","Return a string that lists the key-value pairs from most-recently\nused to least-recently used.",85],[10,"len","","Return the number of key-value pairs in the cache.",85],[10,"is_empty","","",85],[10,"clear","","Clear the cache of all key-value pairs.",85],[10,"drop","","",85],[10,"hash","collections::enum_set","",86],[10,"assert_receiver_is_total_eq","","",86],[10,"eq","","",86],[10,"ne","","",86],[10,"ne","","",86],[10,"clone","","",86],[10,"clone_from","","",86],[10,"fmt","","",86],[10,"empty","","Returns an empty `EnumSet`.",86],[10,"is_empty","","Returns true if the `EnumSet` is empty.",86],[10,"intersects","","Returns `true` if the `EnumSet` contains any enum of the given `EnumSet`.",86],[10,"intersection","","Returns the intersection of both `EnumSets`.",86],[10,"contains","","Returns `true` if a given `EnumSet` is included in an `EnumSet`.",86],[10,"union","","Returns the union of both `EnumSets`.",86],[10,"add","","Adds an enum to an `EnumSet`.",86],[10,"contains_elem","","Returns `true` if an `EnumSet` contains a given enum.",86],[10,"iter","","Returns an iterator over an `EnumSet`.",86],[10,"sub","","",86],[10,"bitor","","",86],[10,"bitand","","",86],[10,"next","","",87],[10,"size_hint","","",87],[10,"size_hint","","",87],[10,"chain","","",87],[10,"zip","","",87],[10,"map","","",87],[10,"filter","","",87],[10,"filter_map","","",87],[10,"enumerate","","",87],[10,"peekable","","",87],[10,"skip_while","","",87],[10,"take_while","","",87],[10,"skip","","",87],[10,"take","","",87],[10,"scan","","",87],[10,"flat_map","","",87],[10,"fuse","","",87],[10,"inspect","","",87],[10,"by_ref","","",87],[10,"advance","","",87],[10,"collect","","",87],[10,"nth","","",87],[10,"last","","",87],[10,"fold","","",87],[10,"count","","",87],[10,"all","","",87],[10,"any","","",87],[10,"find","","",87],[10,"position","","",87],[10,"max_by","","",87],[10,"min_by","","",87],[10,"assert_receiver_is_total_eq","collections::smallintmap","",88],[10,"eq","","",88],[10,"ne","","",88],[10,"ne","","",88],[10,"len","","Returns the number of elements in the map.",88],[10,"is_empty","","Returns`true` if there are no elements in the map.",88],[10,"is_empty","","",88],[10,"clear","","Clears the map, removing all key-value pairs.",88],[10,"find","","Returns a reference to the value corresponding to the key.",88],[10,"contains_key","","",88],[10,"find_mut","","Returns a mutable reference to the value corresponding to the key.",88],[10,"insert","","Inserts a key-value pair into the map. An existing value for a\nkey is replaced by the new value. Returns `true` if the key did\nnot already exist in the map.",88],[10,"remove","","Removes a key-value pair from the map. Returns `true` if the key\nwas present in the map.",88],[10,"swap","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise `None` is returned.",88],[10,"pop","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",88],[10,"insert","","",88],[10,"remove","","",88],[10,"default","","",88],[10,"clone","","",88],[10,"clone_from","","",88],[10,"clone_from","","",88],[10,"hash","","",88],[10,"new","","Creates an empty `SmallIntMap`.",88],[10,"with_capacity","","Creates an empty `SmallIntMap` with space for at least `capacity`\nelements before resizing.",88],[10,"get","","Retrieves a value for the given key.\nSee [`find`](../trait.Map.html#tymethod.find) for a non-failing alternative.",88],[10,"keys","","Returns an iterator visiting all keys in ascending order by the keys.\nThe iterator's element type is `uint`.",88],[10,"values","","Returns an iterator visiting all values in ascending order by the keys.\nThe iterator's element type is `&'r V`.",88],[10,"iter","","Returns an iterator visiting all key-value pairs in ascending order by the keys.\nThe iterator's element type is `(uint, &'r V)`.",88],[10,"mut_iter","","Deprecated: use `iter_mut`",88],[10,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order by the keys,\nwith mutable references to the values.\nThe iterator's element type is `(uint, &'r mut V)`.",88],[10,"move_iter","","Deprecated: use `into_iter` instead.",88],[10,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order by\nthe keys, emptying (but not consuming) the original `SmallIntMap`.\nThe iterator's element type is `(uint, &'r V)`.",88],[10,"update","","Updates a value in the map. If the key already exists in the map,\nmodifies the value with `ff` taking `oldval, newval`.\nOtherwise, sets the value to `newval`.\nReturns `true` if the key did not already exist in the map.",88],[10,"update_with_key","","Updates a value in the map. If the key already exists in the map,\nmodifies the value with `ff` taking `key, oldval, newval`.\nOtherwise, sets the value to `newval`.\nReturns `true` if the key did not already exist in the map.",88],[10,"partial_cmp","","",88],[10,"lt","","",88],[10,"le","","",88],[10,"gt","","",88],[10,"ge","","",88],[10,"cmp","","",88],[10,"fmt","","",88],[10,"from_iter","","",88],[10,"extend","","",88],[10,"index","","",88],[10,"next","","",89],[10,"size_hint","","",89],[10,"size_hint","","",89],[10,"chain","","",89],[10,"zip","","",89],[10,"map","","",89],[10,"filter","","",89],[10,"filter_map","","",89],[10,"enumerate","","",89],[10,"peekable","","",89],[10,"skip_while","","",89],[10,"take_while","","",89],[10,"skip","","",89],[10,"take","","",89],[10,"scan","","",89],[10,"flat_map","","",89],[10,"fuse","","",89],[10,"inspect","","",89],[10,"by_ref","","",89],[10,"advance","","",89],[10,"collect","","",89],[10,"nth","","",89],[10,"last","","",89],[10,"fold","","",89],[10,"count","","",89],[10,"all","","",89],[10,"any","","",89],[10,"find","","",89],[10,"position","","",89],[10,"max_by","","",89],[10,"min_by","","",89],[10,"next_back","","",89],[10,"rev","","",89],[10,"next","","",90],[10,"size_hint","","",90],[10,"size_hint","","",90],[10,"chain","","",90],[10,"zip","","",90],[10,"map","","",90],[10,"filter","","",90],[10,"filter_map","","",90],[10,"enumerate","","",90],[10,"peekable","","",90],[10,"skip_while","","",90],[10,"take_while","","",90],[10,"skip","","",90],[10,"take","","",90],[10,"scan","","",90],[10,"flat_map","","",90],[10,"fuse","","",90],[10,"inspect","","",90],[10,"by_ref","","",90],[10,"advance","","",90],[10,"collect","","",90],[10,"nth","","",90],[10,"last","","",90],[10,"fold","","",90],[10,"count","","",90],[10,"all","","",90],[10,"any","","",90],[10,"find","","",90],[10,"position","","",90],[10,"max_by","","",90],[10,"min_by","","",90],[10,"next_back","","",90],[10,"rev","","",90],[10,"clone","collections::treemap","",91],[10,"clone_from","","",91],[10,"eq","","",91],[10,"ne","","",91],[10,"assert_receiver_is_total_eq","","",91],[10,"partial_cmp","","",91],[10,"lt","","",91],[10,"le","","",91],[10,"gt","","",91],[10,"ge","","",91],[10,"cmp","","",91],[10,"fmt","","",91],[10,"len","","",91],[10,"is_empty","","",91],[10,"clear","","",91],[10,"find","","",91],[10,"contains_key","","",91],[10,"find_mut","","",91],[10,"swap","","",91],[10,"pop","","",91],[10,"insert","","",91],[10,"remove","","",91],[10,"default","","",91],[10,"index","","",91],[10,"new","","Creates an empty `TreeMap`.",91],[10,"keys","","Gets a lazy iterator over the keys in the map, in ascending order.",91],[10,"values","","Gets a lazy iterator over the values in the map, in ascending order\nwith respect to the corresponding keys.",91],[10,"iter","","Gets a lazy iterator over the key-value pairs in the map, in ascending order.",91],[10,"rev_iter","","Gets a lazy reverse iterator over the key-value pairs in the map, in descending order.",91],[10,"mut_iter","","Deprecated: use `iter_mut`.",91],[10,"iter_mut","","Gets a lazy forward iterator over the key-value pairs in the\nmap, with the values being mutable.",91],[10,"mut_rev_iter","","Deprecated: use `rev_iter_mut`.",91],[10,"rev_iter_mut","","Gets a lazy reverse iterator over the key-value pairs in the\nmap, with the values being mutable.",91],[10,"move_iter","","Deprecated: use `into_iter`.",91],[10,"into_iter","","Gets a lazy iterator that consumes the treemap.",91],[10,"find_with","","Returns the value for which `f(key)` returns `Equal`. `f` is invoked\nwith current key and guides tree navigation. That means `f` should\nbe aware of natural ordering of the tree.",91],[10,"find_mut_with","","Deprecated: use `find_with_mut`.",91],[10,"find_with_mut","","Returns the value for which `f(key)` returns `Equal`. `f` is invoked\nwith current key and guides tree navigation. That means `f` should\nbe aware of natural ordering of the tree.",91],[10,"lower_bound","","Returns a lazy iterator to the first key-value pair whose key is not less than `k`\nIf all keys in map are less than `k` an empty iterator is returned.",91],[10,"upper_bound","","Returns a lazy iterator to the first key-value pair whose key is greater than `k`\nIf all keys in map are less than or equal to `k` an empty iterator is returned.",91],[10,"mut_lower_bound","","Deprecated: use `lower_bound_mut`.",91],[10,"lower_bound_mut","","Returns a lazy value iterator to the first key-value pair (with\nthe value being mutable) whose key is not less than `k`.",91],[10,"mut_upper_bound","","Deprecated: use `upper_bound_mut`.",91],[10,"upper_bound_mut","","Returns a lazy iterator to the first key-value pair (with the\nvalue being mutable) whose key is greater than `k`.",91],[10,"next","","Advances the iterator to the next node (in order) and return a\ntuple with a reference to the key and value. If there are no\nmore nodes, return `None`.",92],[10,"size_hint","","",92],[10,"size_hint","","",92],[10,"chain","","",92],[10,"zip","","",92],[10,"map","","",92],[10,"filter","","",92],[10,"filter_map","","",92],[10,"enumerate","","",92],[10,"peekable","","",92],[10,"skip_while","","",92],[10,"take_while","","",92],[10,"skip","","",92],[10,"take","","",92],[10,"scan","","",92],[10,"flat_map","","",92],[10,"fuse","","",92],[10,"inspect","","",92],[10,"by_ref","","",92],[10,"advance","","",92],[10,"collect","","",92],[10,"nth","","",92],[10,"last","","",92],[10,"fold","","",92],[10,"count","","",92],[10,"all","","",92],[10,"any","","",92],[10,"find","","",92],[10,"position","","",92],[10,"max_by","","",92],[10,"min_by","","",92],[10,"next","","",93],[10,"size_hint","","",93],[10,"size_hint","","",93],[10,"chain","","",93],[10,"zip","","",93],[10,"map","","",93],[10,"filter","","",93],[10,"filter_map","","",93],[10,"enumerate","","",93],[10,"peekable","","",93],[10,"skip_while","","",93],[10,"take_while","","",93],[10,"skip","","",93],[10,"take","","",93],[10,"scan","","",93],[10,"flat_map","","",93],[10,"fuse","","",93],[10,"inspect","","",93],[10,"by_ref","","",93],[10,"advance","","",93],[10,"collect","","",93],[10,"nth","","",93],[10,"last","","",93],[10,"fold","","",93],[10,"count","","",93],[10,"all","","",93],[10,"any","","",93],[10,"find","","",93],[10,"position","","",93],[10,"max_by","","",93],[10,"min_by","","",93],[10,"next","","Advances the iterator to the next node (in order) and return a\ntuple with a reference to the key and value. If there are no\nmore nodes, return `None`.",94],[10,"size_hint","","",94],[10,"size_hint","","",94],[10,"chain","","",94],[10,"zip","","",94],[10,"map","","",94],[10,"filter","","",94],[10,"filter_map","","",94],[10,"enumerate","","",94],[10,"peekable","","",94],[10,"skip_while","","",94],[10,"take_while","","",94],[10,"skip","","",94],[10,"take","","",94],[10,"scan","","",94],[10,"flat_map","","",94],[10,"fuse","","",94],[10,"inspect","","",94],[10,"by_ref","","",94],[10,"advance","","",94],[10,"collect","","",94],[10,"nth","","",94],[10,"last","","",94],[10,"fold","","",94],[10,"count","","",94],[10,"all","","",94],[10,"any","","",94],[10,"find","","",94],[10,"position","","",94],[10,"max_by","","",94],[10,"min_by","","",94],[10,"next","","",95],[10,"size_hint","","",95],[10,"size_hint","","",95],[10,"chain","","",95],[10,"zip","","",95],[10,"map","","",95],[10,"filter","","",95],[10,"filter_map","","",95],[10,"enumerate","","",95],[10,"peekable","","",95],[10,"skip_while","","",95],[10,"take_while","","",95],[10,"skip","","",95],[10,"take","","",95],[10,"scan","","",95],[10,"flat_map","","",95],[10,"fuse","","",95],[10,"inspect","","",95],[10,"by_ref","","",95],[10,"advance","","",95],[10,"collect","","",95],[10,"nth","","",95],[10,"last","","",95],[10,"fold","","",95],[10,"count","","",95],[10,"all","","",95],[10,"any","","",95],[10,"find","","",95],[10,"position","","",95],[10,"max_by","","",95],[10,"min_by","","",95],[10,"next","","",96],[10,"size_hint","","",96],[10,"size_hint","","",96],[10,"chain","","",96],[10,"zip","","",96],[10,"map","","",96],[10,"filter","","",96],[10,"filter_map","","",96],[10,"enumerate","","",96],[10,"peekable","","",96],[10,"skip_while","","",96],[10,"take_while","","",96],[10,"skip","","",96],[10,"take","","",96],[10,"scan","","",96],[10,"flat_map","","",96],[10,"fuse","","",96],[10,"inspect","","",96],[10,"by_ref","","",96],[10,"advance","","",96],[10,"collect","","",96],[10,"nth","","",96],[10,"last","","",96],[10,"fold","","",96],[10,"count","","",96],[10,"all","","",96],[10,"any","","",96],[10,"find","","",96],[10,"position","","",96],[10,"max_by","","",96],[10,"min_by","","",96],[10,"next","","",97],[10,"size_hint","","",97],[10,"chain","","",97],[10,"zip","","",97],[10,"map","","",97],[10,"filter","","",97],[10,"filter_map","","",97],[10,"enumerate","","",97],[10,"peekable","","",97],[10,"skip_while","","",97],[10,"take_while","","",97],[10,"skip","","",97],[10,"take","","",97],[10,"scan","","",97],[10,"flat_map","","",97],[10,"fuse","","",97],[10,"inspect","","",97],[10,"by_ref","","",97],[10,"advance","","",97],[10,"collect","","",97],[10,"nth","","",97],[10,"last","","",97],[10,"fold","","",97],[10,"count","","",97],[10,"all","","",97],[10,"any","","",97],[10,"find","","",97],[10,"position","","",97],[10,"max_by","","",97],[10,"min_by","","",97],[10,"next","","",98],[10,"size_hint","","",98],[10,"chain","","",98],[10,"zip","","",98],[10,"map","","",98],[10,"filter","","",98],[10,"filter_map","","",98],[10,"enumerate","","",98],[10,"peekable","","",98],[10,"skip_while","","",98],[10,"take_while","","",98],[10,"skip","","",98],[10,"take","","",98],[10,"scan","","",98],[10,"flat_map","","",98],[10,"fuse","","",98],[10,"inspect","","",98],[10,"by_ref","","",98],[10,"advance","","",98],[10,"collect","","",98],[10,"nth","","",98],[10,"last","","",98],[10,"fold","","",98],[10,"count","","",98],[10,"all","","",98],[10,"any","","",98],[10,"find","","",98],[10,"position","","",98],[10,"max_by","","",98],[10,"min_by","","",98],[10,"clone","","",99],[10,"clone_from","","",99],[10,"eq","","",99],[10,"ne","","",99],[10,"assert_receiver_is_total_eq","","",99],[10,"partial_cmp","","",99],[10,"lt","","",99],[10,"le","","",99],[10,"gt","","",99],[10,"ge","","",99],[10,"cmp","","",99],[10,"fmt","","",99],[10,"len","","",99],[10,"is_empty","","",99],[10,"clear","","",99],[10,"contains","","",99],[10,"is_disjoint","","",99],[10,"is_subset","","",99],[10,"is_superset","","",99],[10,"insert","","",99],[10,"remove","","",99],[10,"default","","",99],[10,"new","","Creates an empty `TreeSet`.",99],[10,"iter","","Gets a lazy iterator over the values in the set, in ascending order.",99],[10,"rev_iter","","Gets a lazy iterator over the values in the set, in descending order.",99],[10,"move_iter","","Deprecated: use `into_iter`.",99],[10,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the\nset in ascending order. The set cannot be used after calling this.",99],[10,"lower_bound","","Gets a lazy iterator pointing to the first value not less than `v` (greater or equal).\nIf all elements in the set are less than `v` empty iterator is returned.",99],[10,"upper_bound","","Gets a lazy iterator pointing to the first value greater than `v`.\nIf all elements in the set are less than or equal to `v` an\nempty iterator is returned.",99],[10,"difference","","Visits the values representing the difference, in ascending order.",99],[10,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",99],[10,"intersection","","Visits the values representing the intersection, in ascending order.",99],[10,"union","","Visits the values representing the union, in ascending order.",99],[10,"next","","",100],[10,"size_hint","","",100],[10,"chain","","",100],[10,"zip","","",100],[10,"map","","",100],[10,"filter","","",100],[10,"filter_map","","",100],[10,"enumerate","","",100],[10,"peekable","","",100],[10,"skip_while","","",100],[10,"take_while","","",100],[10,"skip","","",100],[10,"take","","",100],[10,"scan","","",100],[10,"flat_map","","",100],[10,"fuse","","",100],[10,"inspect","","",100],[10,"by_ref","","",100],[10,"advance","","",100],[10,"collect","","",100],[10,"nth","","",100],[10,"last","","",100],[10,"fold","","",100],[10,"count","","",100],[10,"all","","",100],[10,"any","","",100],[10,"find","","",100],[10,"position","","",100],[10,"max_by","","",100],[10,"min_by","","",100],[10,"next","","",101],[10,"size_hint","","",101],[10,"chain","","",101],[10,"zip","","",101],[10,"map","","",101],[10,"filter","","",101],[10,"filter_map","","",101],[10,"enumerate","","",101],[10,"peekable","","",101],[10,"skip_while","","",101],[10,"take_while","","",101],[10,"skip","","",101],[10,"take","","",101],[10,"scan","","",101],[10,"flat_map","","",101],[10,"fuse","","",101],[10,"inspect","","",101],[10,"by_ref","","",101],[10,"advance","","",101],[10,"collect","","",101],[10,"nth","","",101],[10,"last","","",101],[10,"fold","","",101],[10,"count","","",101],[10,"all","","",101],[10,"any","","",101],[10,"find","","",101],[10,"position","","",101],[10,"max_by","","",101],[10,"min_by","","",101],[10,"next","","",102],[10,"size_hint","","",102],[10,"chain","","",102],[10,"zip","","",102],[10,"map","","",102],[10,"filter","","",102],[10,"filter_map","","",102],[10,"enumerate","","",102],[10,"peekable","","",102],[10,"skip_while","","",102],[10,"take_while","","",102],[10,"skip","","",102],[10,"take","","",102],[10,"scan","","",102],[10,"flat_map","","",102],[10,"fuse","","",102],[10,"inspect","","",102],[10,"by_ref","","",102],[10,"advance","","",102],[10,"collect","","",102],[10,"nth","","",102],[10,"last","","",102],[10,"fold","","",102],[10,"count","","",102],[10,"all","","",102],[10,"any","","",102],[10,"find","","",102],[10,"position","","",102],[10,"max_by","","",102],[10,"min_by","","",102],[10,"next","","",103],[10,"size_hint","","",103],[10,"chain","","",103],[10,"zip","","",103],[10,"map","","",103],[10,"filter","","",103],[10,"filter_map","","",103],[10,"enumerate","","",103],[10,"peekable","","",103],[10,"skip_while","","",103],[10,"take_while","","",103],[10,"skip","","",103],[10,"take","","",103],[10,"scan","","",103],[10,"flat_map","","",103],[10,"fuse","","",103],[10,"inspect","","",103],[10,"by_ref","","",103],[10,"advance","","",103],[10,"collect","","",103],[10,"nth","","",103],[10,"last","","",103],[10,"fold","","",103],[10,"count","","",103],[10,"all","","",103],[10,"any","","",103],[10,"find","","",103],[10,"position","","",103],[10,"max_by","","",103],[10,"min_by","","",103],[10,"clone","","",104],[10,"clone_from","","",104],[10,"new","","Creates a new tree node.",104],[10,"from_iter","","",91],[10,"extend","","",91],[10,"hash","","",91],[10,"from_iter","","",99],[10,"extend","","",99],[10,"hash","","",99],[10,"clone","collections::priority_queue","",105],[10,"clone_from","","",105],[10,"len","","Returns the length of the queue.",105],[10,"is_empty","","",105],[10,"clear","","Drops all items from the queue.",105],[10,"default","","",105],[10,"new","","Creates an empty `PriorityQueue` as a max-heap.",105],[10,"with_capacity","","Creates an empty `PriorityQueue` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `PriorityQueue` does not have to be reallocated\nuntil it contains at least that many values.",105],[10,"from_vec","","Creates a `PriorityQueue` from a vector. This is sometimes called\n`heapifying` the vector.",105],[10,"iter","","An iterator visiting all values in underlying vector, in\narbitrary order.",105],[10,"top","","Returns the greatest item in a queue, or `None` if it is empty.",105],[10,"maybe_top","","",105],[10,"capacity","","Returns the number of elements the queue can hold without reallocating.",105],[10,"reserve_exact","","Reserves capacity for exactly `n` elements in the `PriorityQueue`.\nDo nothing if the capacity is already sufficient.",105],[10,"reserve","","Reserves capacity for at least `n` elements in the `PriorityQueue`.\nDo nothing if the capacity is already sufficient.",105],[10,"pop","","Removes the greatest item from a queue and returns it, or `None` if it\nis empty.",105],[10,"maybe_pop","","",105],[10,"push","","Pushes an item onto the queue.",105],[10,"push_pop","","Pushes an item onto a queue then pops the greatest item off the queue in\nan optimized fashion.",105],[10,"replace","","Pops the greatest item off a queue then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the queue\nwas empty.",105],[10,"into_vec","","Consumes the `PriorityQueue` and returns the underlying vector\nin arbitrary order.",105],[10,"into_sorted_vec","","Consumes the `PriorityQueue` and returns a vector in sorted\n(ascending) order.",105],[10,"next","","",106],[10,"size_hint","","",106],[10,"size_hint","","",106],[10,"chain","","",106],[10,"zip","","",106],[10,"map","","",106],[10,"filter","","",106],[10,"filter_map","","",106],[10,"enumerate","","",106],[10,"peekable","","",106],[10,"skip_while","","",106],[10,"take_while","","",106],[10,"skip","","",106],[10,"take","","",106],[10,"scan","","",106],[10,"flat_map","","",106],[10,"fuse","","",106],[10,"inspect","","",106],[10,"by_ref","","",106],[10,"advance","","",106],[10,"collect","","",106],[10,"nth","","",106],[10,"last","","",106],[10,"fold","","",106],[10,"count","","",106],[10,"all","","",106],[10,"any","","",106],[10,"find","","",106],[10,"position","","",106],[10,"max_by","","",106],[10,"min_by","","",106],[10,"from_iter","","",105],[10,"extend","","",105],[10,"clone","collections::dlist","",107],[10,"clone_from","","",107],[10,"clone","","",108],[10,"clone_from","","",108],[10,"clone","","",109],[10,"clone_from","","",109],[10,"is_empty","","Returns `true` if the `DList` is empty.",110],[10,"len","","Returns the length of the `DList`.",110],[10,"is_empty","","",110],[10,"clear","","Removes all elements from the `DList`.",110],[10,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",110],[10,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",110],[10,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",110],[10,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",110],[10,"push_front","","Adds an element first in the list.",110],[10,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",110],[10,"push_back","","",110],[10,"pop_back","","",110],[10,"push","","",110],[10,"pop","","",110],[10,"default","","",110],[10,"new","","Creates an empty `DList`.",110],[10,"rotate_forward","","Moves the last element to the front of the list.",110],[10,"rotate_backward","","Moves the first element to the back of the list.",110],[10,"append","","Adds all elements from `other` to the end of the list.",110],[10,"prepend","","Adds all elements from `other` to the beginning of the list.",110],[10,"insert_when","","Inserts `elt` before the first `x` in the list where `f(x, elt)` is\ntrue, or at the end.",110],[10,"merge","","Merges `other` into this `DList`, using the function `f`.",110],[10,"iter","","Provides a forward iterator.",110],[10,"mut_iter","","Deprecated: use `iter_mut`.",110],[10,"iter_mut","","Provides a forward iterator with mutable references.",110],[10,"move_iter","","Deprecated: use `into_iter`.",110],[10,"into_iter","","Consumes the list into an iterator yielding elements by value.",110],[10,"insert_ordered","","Inserts `elt` sorted in ascending order.",110],[10,"drop","","",110],[10,"next","","",107],[10,"size_hint","","",107],[10,"size_hint","","",107],[10,"chain","","",107],[10,"zip","","",107],[10,"map","","",107],[10,"filter","","",107],[10,"filter_map","","",107],[10,"enumerate","","",107],[10,"peekable","","",107],[10,"skip_while","","",107],[10,"take_while","","",107],[10,"skip","","",107],[10,"take","","",107],[10,"scan","","",107],[10,"flat_map","","",107],[10,"fuse","","",107],[10,"inspect","","",107],[10,"by_ref","","",107],[10,"advance","","",107],[10,"collect","","",107],[10,"nth","","",107],[10,"last","","",107],[10,"fold","","",107],[10,"count","","",107],[10,"all","","",107],[10,"any","","",107],[10,"find","","",107],[10,"position","","",107],[10,"max_by","","",107],[10,"min_by","","",107],[10,"next_back","","",107],[10,"rev","","",107],[10,"rposition","","",107],[10,"len","","",107],[10,"next","","",111],[10,"size_hint","","",111],[10,"size_hint","","",111],[10,"chain","","",111],[10,"zip","","",111],[10,"map","","",111],[10,"filter","","",111],[10,"filter_map","","",111],[10,"enumerate","","",111],[10,"peekable","","",111],[10,"skip_while","","",111],[10,"take_while","","",111],[10,"skip","","",111],[10,"take","","",111],[10,"scan","","",111],[10,"flat_map","","",111],[10,"fuse","","",111],[10,"inspect","","",111],[10,"by_ref","","",111],[10,"advance","","",111],[10,"collect","","",111],[10,"nth","","",111],[10,"last","","",111],[10,"fold","","",111],[10,"count","","",111],[10,"all","","",111],[10,"any","","",111],[10,"find","","",111],[10,"position","","",111],[10,"max_by","","",111],[10,"min_by","","",111],[10,"next_back","","",111],[10,"rev","","",111],[10,"rposition","","",111],[10,"len","","",111],[10,"insert_next","","",111],[10,"peek_next","","",111],[10,"next","","",108],[10,"size_hint","","",108],[10,"size_hint","","",108],[10,"chain","","",108],[10,"zip","","",108],[10,"map","","",108],[10,"filter","","",108],[10,"filter_map","","",108],[10,"enumerate","","",108],[10,"peekable","","",108],[10,"skip_while","","",108],[10,"take_while","","",108],[10,"skip","","",108],[10,"take","","",108],[10,"scan","","",108],[10,"flat_map","","",108],[10,"fuse","","",108],[10,"inspect","","",108],[10,"by_ref","","",108],[10,"advance","","",108],[10,"collect","","",108],[10,"nth","","",108],[10,"last","","",108],[10,"fold","","",108],[10,"count","","",108],[10,"all","","",108],[10,"any","","",108],[10,"find","","",108],[10,"position","","",108],[10,"max_by","","",108],[10,"min_by","","",108],[10,"next_back","","",108],[10,"rev","","",108],[10,"from_iter","","",110],[10,"extend","","",110],[10,"eq","","",110],[10,"ne","","",110],[10,"ne","","",110],[10,"assert_receiver_is_total_eq","","",110],[10,"partial_cmp","","",110],[10,"lt","","",110],[10,"le","","",110],[10,"gt","","",110],[10,"ge","","",110],[10,"cmp","","",110],[10,"clone","","",110],[10,"clone_from","","",110],[10,"fmt","","",110],[10,"hash","","",110],[10,"clone","collections::trie","",112],[10,"clone_from","","",112],[10,"clone","","",113],[10,"clone_from","","",113],[10,"eq","","",113],[10,"ne","","",113],[10,"assert_receiver_is_total_eq","","",113],[10,"partial_cmp","","",113],[10,"lt","","",113],[10,"le","","",113],[10,"gt","","",113],[10,"ge","","",113],[10,"cmp","","",113],[10,"fmt","","",113],[10,"len","","Returns the number of elements in the map.",113],[10,"is_empty","","",113],[10,"clear","","Clears the map, removing all values.",113],[10,"find","","Returns a reference to the value corresponding to the key.",113],[10,"contains_key","","",113],[10,"find_mut","","Returns a mutable reference to the value corresponding to the key.",113],[10,"swap","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",113],[10,"pop","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",113],[10,"insert","","",113],[10,"remove","","",113],[10,"default","","",113],[10,"new","","Creates an empty `TrieMap`.",113],[10,"each_reverse","","Visits all key-value pairs in reverse order. Aborts traversal when `f` returns `false`.\nReturns `true` if `f` returns `true` for all elements.",113],[10,"keys","","Gets an iterator visiting all keys in ascending order by the keys.\nThe iterator's element type is `uint`.",113],[10,"values","","Gets an iterator visiting all values in ascending order by the keys.\nThe iterator's element type is `&'r T`.",113],[10,"iter","","Gets an iterator over the key-value pairs in the map, ordered by keys.",113],[10,"mut_iter","","Deprecated: use `iter_mut`.",113],[10,"iter_mut","","Gets an iterator over the key-value pairs in the map, with the\nability to mutate the values.",113],[10,"lower_bound","","Gets an iterator pointing to the first key-value pair whose key is not less than `key`.\nIf all keys in the map are less than `key` an empty iterator is returned.",113],[10,"upper_bound","","Gets an iterator pointing to the first key-value pair whose key is greater than `key`.\nIf all keys in the map are not greater than `key` an empty iterator is returned.",113],[10,"mut_lower_bound","","Deprecated: use `lower_bound_mut`.",113],[10,"lower_bound_mut","","Gets an iterator pointing to the first key-value pair whose key is not less than `key`.\nIf all keys in the map are less than `key` an empty iterator is returned.",113],[10,"mut_upper_bound","","Deprecated: use `upper_bound_mut`.",113],[10,"upper_bound_mut","","Gets an iterator pointing to the first key-value pair whose key is greater than `key`.\nIf all keys in the map are not greater than `key` an empty iterator is returned.",113],[10,"from_iter","","",113],[10,"extend","","",113],[10,"hash","","",113],[10,"index","","",113],[10,"cmp","","",114],[10,"partial_cmp","","",114],[10,"lt","","",114],[10,"le","","",114],[10,"gt","","",114],[10,"ge","","",114],[10,"lt","","",114],[10,"le","","",114],[10,"gt","","",114],[10,"ge","","",114],[10,"assert_receiver_is_total_eq","","",114],[10,"eq","","",114],[10,"ne","","",114],[10,"ne","","",114],[10,"hash","","",114],[10,"clone","","",114],[10,"clone_from","","",114],[10,"fmt","","",114],[10,"len","","Returns the number of elements in the set.",114],[10,"is_empty","","",114],[10,"clear","","Clears the set, removing all values.",114],[10,"contains","","",114],[10,"is_disjoint","","",114],[10,"is_subset","","",114],[10,"is_superset","","",114],[10,"is_superset","","",114],[10,"insert","","",114],[10,"remove","","",114],[10,"default","","",114],[10,"new","","Creates an empty TrieSet.",114],[10,"each_reverse","","Visits all values in reverse order. Aborts traversal when `f` returns `false`.\nReturns `true` if `f` returns `true` for all elements.",114],[10,"iter","","Gets an iterator over the values in the set, in sorted order.",114],[10,"lower_bound","","Gets an iterator pointing to the first value that is not less than `val`.\nIf all values in the set are less than `val` an empty iterator is returned.",114],[10,"upper_bound","","Gets an iterator pointing to the first value that key is greater than `val`.\nIf all values in the set are less than or equal to `val` an empty iterator is returned.",114],[10,"from_iter","","",114],[10,"extend","","",114],[10,"clone","","",115],[10,"clone_from","","",115],[10,"next","","",116],[10,"size_hint","","",116],[10,"size_hint","","",116],[10,"chain","","",116],[10,"zip","","",116],[10,"map","","",116],[10,"filter","","",116],[10,"filter_map","","",116],[10,"enumerate","","",116],[10,"peekable","","",116],[10,"skip_while","","",116],[10,"take_while","","",116],[10,"skip","","",116],[10,"take","","",116],[10,"scan","","",116],[10,"flat_map","","",116],[10,"fuse","","",116],[10,"inspect","","",116],[10,"by_ref","","",116],[10,"advance","","",116],[10,"collect","","",116],[10,"nth","","",116],[10,"last","","",116],[10,"fold","","",116],[10,"count","","",116],[10,"all","","",116],[10,"any","","",116],[10,"find","","",116],[10,"position","","",116],[10,"max_by","","",116],[10,"min_by","","",116],[10,"next","","",117],[10,"size_hint","","",117],[10,"size_hint","","",117],[10,"chain","","",117],[10,"zip","","",117],[10,"map","","",117],[10,"filter","","",117],[10,"filter_map","","",117],[10,"enumerate","","",117],[10,"peekable","","",117],[10,"skip_while","","",117],[10,"take_while","","",117],[10,"skip","","",117],[10,"take","","",117],[10,"scan","","",117],[10,"flat_map","","",117],[10,"fuse","","",117],[10,"inspect","","",117],[10,"by_ref","","",117],[10,"advance","","",117],[10,"collect","","",117],[10,"nth","","",117],[10,"last","","",117],[10,"fold","","",117],[10,"count","","",117],[10,"all","","",117],[10,"any","","",117],[10,"find","","",117],[10,"position","","",117],[10,"max_by","","",117],[10,"min_by","","",117],[10,"next","","",118],[10,"size_hint","","",118],[10,"size_hint","","",118],[10,"chain","","",118],[10,"zip","","",118],[10,"map","","",118],[10,"filter","","",118],[10,"filter_map","","",118],[10,"enumerate","","",118],[10,"peekable","","",118],[10,"skip_while","","",118],[10,"take_while","","",118],[10,"skip","","",118],[10,"take","","",118],[10,"scan","","",118],[10,"flat_map","","",118],[10,"fuse","","",118],[10,"inspect","","",118],[10,"by_ref","","",118],[10,"advance","","",118],[10,"collect","","",118],[10,"nth","","",118],[10,"last","","",118],[10,"fold","","",118],[10,"count","","",118],[10,"all","","",118],[10,"any","","",118],[10,"find","","",118],[10,"position","","",118],[10,"max_by","","",118],[10,"min_by","","",118],[10,"new","collections::btree","Returns new `BTree` with root node (leaf) and user-supplied lower bound\nThe lower bound applies to every node except the root node.",119],[10,"get","","Returns the value of a given key, which may not exist in the tree.\nCalls the root node's get method.",119],[10,"insert","","An insert method that uses the `clone` method for support.",119],[10,"clone","","",119],[10,"clone_from","","",119],[10,"eq","","",119],[10,"ne","","",119],[10,"assert_receiver_is_total_eq","","",119],[10,"partial_cmp","","",119],[10,"lt","","",119],[10,"le","","",119],[10,"gt","","",119],[10,"ge","","",119],[10,"cmp","","Returns an ordering based on the root nodes of each `BTree`.",119],[10,"fmt","","Returns a string representation of the `BTree`.",119],[10,"clone","","Returns a new `Node` based on whether or not it is a branch or a leaf.",120],[10,"clone_from","","",120],[10,"eq","","",120],[10,"ne","","",120],[10,"assert_receiver_is_total_eq","","",120],[10,"partial_cmp","","",120],[10,"lt","","",120],[10,"le","","",120],[10,"gt","","",120],[10,"ge","","",120],[10,"cmp","","Implementation of `Ord` for `Node`s.",120],[10,"fmt","","Returns a string representation of a `Node`.\nWill iterate over the Node and show `Key: x, value: y, child: ()`\nfor all elements in the `Node`. `child` only exists if the `Node` contains\na branch.",120],[10,"clone","","Returns a new `Leaf` with the same elts.",121],[10,"clone_from","","",121],[10,"eq","","",121],[10,"ne","","",121],[10,"assert_receiver_is_total_eq","","",121],[10,"partial_cmp","","",121],[10,"lt","","",121],[10,"le","","",121],[10,"gt","","",121],[10,"ge","","",121],[10,"cmp","","Returns an ordering based on the first element of each `Leaf`.",121],[10,"fmt","","Returns a string representation of a `Leaf`.",121],[10,"clone","","Returns a new branch using the clone methods of the `Branch`'s internal variables.",122],[10,"clone_from","","",122],[10,"eq","","",122],[10,"ne","","",122],[10,"assert_receiver_is_total_eq","","",122],[10,"partial_cmp","","",122],[10,"lt","","",122],[10,"le","","",122],[10,"gt","","",122],[10,"ge","","",122],[10,"cmp","","Compares the first elements of two `Branch`es to determine an\n`Ordering`.",122],[10,"fmt","","Returns a string representation of a `Branch`.",122],[10,"clone","","Returns a new `LeafElt` by cloning the key and value.",123],[10,"clone_from","","",123],[10,"eq","","",123],[10,"ne","","",123],[10,"assert_receiver_is_total_eq","","",123],[10,"partial_cmp","","",123],[10,"lt","","",123],[10,"le","","",123],[10,"gt","","",123],[10,"ge","","",123],[10,"cmp","","Returns an ordering based on the keys of the `LeafElt`s.",123],[10,"fmt","","Returns a string representation of a `LeafElt`.",123],[10,"clone","","Returns a new `BranchElt` by cloning the key, value, and left child.",124],[10,"clone_from","","",124],[10,"eq","","",124],[10,"ne","","",124],[10,"assert_receiver_is_total_eq","","",124],[10,"partial_cmp","","",124],[10,"lt","","",124],[10,"le","","",124],[10,"gt","","",124],[10,"ge","","",124],[10,"cmp","","Fulfills `Ord` for `BranchElts`.",124],[10,"fmt","","Formats as a string containing the key, value, and child (which should recur to a\nleaf). Consider changing in future to be more readable.",124],[10,"index","collections::bitv","",125],[10,"next","","Returns (offset, word)",126],[10,"size_hint","","",126],[10,"chain","","",126],[10,"zip","","",126],[10,"map","","",126],[10,"filter","","",126],[10,"filter_map","","",126],[10,"enumerate","","",126],[10,"peekable","","",126],[10,"skip_while","","",126],[10,"take_while","","",126],[10,"skip","","",126],[10,"take","","",126],[10,"scan","","",126],[10,"flat_map","","",126],[10,"fuse","","",126],[10,"inspect","","",126],[10,"by_ref","","",126],[10,"advance","","",126],[10,"collect","","",126],[10,"nth","","",126],[10,"last","","",126],[10,"fold","","",126],[10,"count","","",126],[10,"all","","",126],[10,"any","","",126],[10,"find","","",126],[10,"position","","",126],[10,"max_by","","",126],[10,"min_by","","",126],[10,"new","","Creates an empty `Bitv`.",125],[10,"with_capacity","","Creates a `Bitv` that holds `nbits` elements, setting each element\nto `init`.",125],[10,"get","","Retrieves the value at index `i`.",125],[10,"set","","Sets the value of a bit at a index `i`.",125],[10,"set_all","","Sets all bits to 1.",125],[10,"negate","","Flips all bits.",125],[10,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or`\nfunction.",125],[10,"intersect","","Calculates the intersection of two bitvectors. This acts like the\nbitwise `and` function.",125],[10,"difference","","Calculates the difference between two bitvectors.",125],[10,"all","","Returns `true` if all bits are 1.",125],[10,"iter","","Returns an iterator over the elements of the vector in order.",125],[10,"none","","Returns `true` if all bits are 0.",125],[10,"any","","Returns `true` if any bit is 1.",125],[10,"to_bytes","","Organises the bits into bytes, such that the first bit in the\n`Bitv` becomes the high-order bit of the first byte. If the\nsize of the `Bitv` is not a multiple of eight then trailing bits\nwill be filled-in with `false`.",125],[10,"to_bools","","Transforms `self` into a `Vec<bool>` by turning each bit into a `bool`.",125],[10,"eq_vec","","Compares a `Bitv` to a slice of `bool`s.\nBoth the `Bitv` and slice must have the same length.",125],[10,"truncate","","Shortens a `Bitv`, dropping excess elements.",125],[10,"reserve","","Grows the vector to be able to store `size` bits without resizing.",125],[10,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",125],[10,"grow","","Grows the `Bitv` in-place, adding `n` copies of `value` to the `Bitv`.",125],[10,"pop","","Shortens by one element and returns the removed element.",125],[10,"push","","Pushes a `bool` onto the end.",125],[10,"default","","",125],[10,"len","","",125],[10,"is_empty","","",125],[10,"clear","","",125],[10,"from_iter","","",125],[10,"extend","","",125],[10,"clone","","",125],[10,"clone_from","","",125],[10,"clone_from","","",125],[10,"partial_cmp","","",125],[10,"lt","","",125],[10,"le","","",125],[10,"gt","","",125],[10,"ge","","",125],[10,"cmp","","",125],[10,"fmt","","",125],[10,"hash","","",125],[10,"eq","","",125],[10,"ne","","",125],[10,"assert_receiver_is_total_eq","","",125],[10,"next","","",127],[10,"size_hint","","",127],[10,"size_hint","","",127],[10,"chain","","",127],[10,"zip","","",127],[10,"map","","",127],[10,"filter","","",127],[10,"filter_map","","",127],[10,"enumerate","","",127],[10,"peekable","","",127],[10,"skip_while","","",127],[10,"take_while","","",127],[10,"skip","","",127],[10,"take","","",127],[10,"scan","","",127],[10,"flat_map","","",127],[10,"fuse","","",127],[10,"inspect","","",127],[10,"by_ref","","",127],[10,"advance","","",127],[10,"collect","","",127],[10,"nth","","",127],[10,"last","","",127],[10,"fold","","",127],[10,"count","","",127],[10,"all","","",127],[10,"any","","",127],[10,"find","","",127],[10,"position","","",127],[10,"max_by","","",127],[10,"min_by","","",127],[10,"next_back","","",127],[10,"rev","","",127],[10,"rposition","","",127],[10,"len","","",127],[10,"indexable","","",127],[10,"idx","","",127],[10,"clone","","",128],[10,"clone_from","","",128],[10,"default","","",128],[10,"from_iter","","",128],[10,"extend","","",128],[10,"partial_cmp","","",128],[10,"lt","","",128],[10,"le","","",128],[10,"gt","","",128],[10,"ge","","",128],[10,"cmp","","",128],[10,"eq","","",128],[10,"ne","","",128],[10,"assert_receiver_is_total_eq","","",128],[10,"new","","Creates a new bit vector set with initially no contents.",128],[10,"with_capacity","","Creates a new bit vector set with initially no contents, able to\nhold `nbits` elements without resizing.",128],[10,"from_bitv","","Creates a new bit vector set from the given bit vector.",128],[10,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",128],[10,"reserve","","Grows the underlying vector to be able to store `size` bits.",128],[10,"unwrap","","Consumes this set to return the underlying bit vector.",128],[10,"get_ref","","Returns a reference to the underlying bit vector.",128],[10,"get_mut_ref","","Returns a mutable reference to the underlying bit vector.",128],[10,"shrink_to_fit","","Truncates the underlying vector to the least length required.",128],[10,"iter","","Iterator over each uint stored in the `BitvSet`.",128],[10,"union","","Iterator over each uint stored in `self` union `other`.\nSee [union_with](#method.union_with) for an efficient in-place version.",128],[10,"intersection","","Iterator over each uint stored in `self` intersect `other`.\nSee [intersect_with](#method.intersect_with) for an efficient in-place version.",128],[10,"difference","","Iterator over each uint stored in the `self` setminus `other`.\nSee [difference_with](#method.difference_with) for an efficient in-place version.",128],[10,"symmetric_difference","","Iterator over each uint stored in the symmetric difference of `self` and `other`.\nSee [symmetric_difference_with](#method.symmetric_difference_with) for\nan efficient in-place version.",128],[10,"union_with","","Unions in-place with the specified other bit vector.",128],[10,"intersect_with","","Intersects in-place with the specified other bit vector.",128],[10,"difference_with","","Makes this bit vector the difference with the specified other bit vector\nin-place.",128],[10,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other\nbit vector in-place.",128],[10,"fmt","","",128],[10,"hash","","",128],[10,"len","","",128],[10,"is_empty","","",128],[10,"clear","","",128],[10,"contains","","",128],[10,"is_disjoint","","",128],[10,"is_subset","","",128],[10,"is_superset","","",128],[10,"is_superset","","",128],[10,"insert","","",128],[10,"remove","","",128],[10,"next","","",129],[10,"size_hint","","",129],[10,"size_hint","","",129],[10,"chain","","",129],[10,"zip","","",129],[10,"map","","",129],[10,"filter","","",129],[10,"filter_map","","",129],[10,"enumerate","","",129],[10,"peekable","","",129],[10,"skip_while","","",129],[10,"take_while","","",129],[10,"skip","","",129],[10,"take","","",129],[10,"scan","","",129],[10,"flat_map","","",129],[10,"fuse","","",129],[10,"inspect","","",129],[10,"by_ref","","",129],[10,"advance","","",129],[10,"collect","","",129],[10,"nth","","",129],[10,"last","","",129],[10,"fold","","",129],[10,"count","","",129],[10,"all","","",129],[10,"any","","",129],[10,"find","","",129],[10,"position","","",129],[10,"max_by","","",129],[10,"min_by","","",129],[10,"next","","",130],[10,"size_hint","","",130],[10,"size_hint","","",130],[10,"chain","","",130],[10,"zip","","",130],[10,"map","","",130],[10,"filter","","",130],[10,"filter_map","","",130],[10,"enumerate","","",130],[10,"peekable","","",130],[10,"skip_while","","",130],[10,"take_while","","",130],[10,"skip","","",130],[10,"take","","",130],[10,"scan","","",130],[10,"flat_map","","",130],[10,"fuse","","",130],[10,"inspect","","",130],[10,"by_ref","","",130],[10,"advance","","",130],[10,"collect","","",130],[10,"nth","","",130],[10,"last","","",130],[10,"fold","","",130],[10,"count","","",130],[10,"all","","",130],[10,"any","","",130],[10,"find","","",130],[10,"position","","",130],[10,"max_by","","",130],[10,"min_by","","",130],[10,"clone","collections::ringbuf","",131],[10,"clone_from","","",131],[10,"len","","Returns the number of elements in the `RingBuf`.",131],[10,"is_empty","","",131],[10,"clear","","Clears the `RingBuf`, removing all values.",131],[10,"front","","Returns a reference to the first element in the `RingBuf`.",131],[10,"front_mut","","Returns a mutable reference to the first element in the `RingBuf`.",131],[10,"back","","Returns a reference to the last element in the `RingBuf`.",131],[10,"back_mut","","Returns a mutable reference to the last element in the `RingBuf`.",131],[10,"pop_front","","Removes and returns the first element in the `RingBuf`, or `None` if it\nis empty.",131],[10,"push_front","","Prepends an element to the `RingBuf`.",131],[10,"push_back","","",131],[10,"pop_back","","",131],[10,"push","","",131],[10,"pop","","",131],[10,"default","","",131],[10,"new","","Creates an empty `RingBuf`.",131],[10,"with_capacity","","Creates an empty `RingBuf` with space for at least `n` elements.",131],[10,"get","","Retrieve an element in the `RingBuf` by index.",131],[10,"get_mut","","Retrieves an element in the `RingBuf` by index.",131],[10,"swap","","Swaps elements at indices `i` and `j`.",131],[10,"reserve_exact","","Reserves capacity for exactly `n` elements in the given `RingBuf`,\ndoing nothing if `self`'s capacity is already equal to or greater\nthan the requested capacity.",131],[10,"reserve","","Reserves capacity for at least `n` elements in the given `RingBuf`,\nover-allocating in case the caller needs to reserve additional\nspace.",131],[10,"iter","","Returns a front-to-back iterator.",131],[10,"mut_iter","","Deprecated: use `iter_mut`",131],[10,"iter_mut","","Returns a front-to-back iterator which returns mutable references.",131],[10,"next","","",132],[10,"size_hint","","",132],[10,"size_hint","","",132],[10,"chain","","",132],[10,"zip","","",132],[10,"map","","",132],[10,"filter","","",132],[10,"filter_map","","",132],[10,"enumerate","","",132],[10,"peekable","","",132],[10,"skip_while","","",132],[10,"take_while","","",132],[10,"skip","","",132],[10,"take","","",132],[10,"scan","","",132],[10,"flat_map","","",132],[10,"fuse","","",132],[10,"inspect","","",132],[10,"by_ref","","",132],[10,"advance","","",132],[10,"collect","","",132],[10,"nth","","",132],[10,"last","","",132],[10,"fold","","",132],[10,"count","","",132],[10,"all","","",132],[10,"any","","",132],[10,"find","","",132],[10,"position","","",132],[10,"max_by","","",132],[10,"min_by","","",132],[10,"next_back","","",132],[10,"rev","","",132],[10,"rposition","","",132],[10,"len","","",132],[10,"indexable","","",132],[10,"idx","","",132],[10,"next","","",133],[10,"size_hint","","",133],[10,"size_hint","","",133],[10,"chain","","",133],[10,"zip","","",133],[10,"map","","",133],[10,"filter","","",133],[10,"filter_map","","",133],[10,"enumerate","","",133],[10,"peekable","","",133],[10,"skip_while","","",133],[10,"take_while","","",133],[10,"skip","","",133],[10,"take","","",133],[10,"scan","","",133],[10,"flat_map","","",133],[10,"fuse","","",133],[10,"inspect","","",133],[10,"by_ref","","",133],[10,"advance","","",133],[10,"collect","","",133],[10,"nth","","",133],[10,"last","","",133],[10,"fold","","",133],[10,"count","","",133],[10,"all","","",133],[10,"any","","",133],[10,"find","","",133],[10,"position","","",133],[10,"max_by","","",133],[10,"min_by","","",133],[10,"next_back","","",133],[10,"rev","","",133],[10,"rposition","","",133],[10,"len","","",133],[10,"eq","","",131],[10,"ne","","",131],[10,"ne","","",131],[10,"assert_receiver_is_total_eq","","",131],[10,"partial_cmp","","",131],[10,"lt","","",131],[10,"le","","",131],[10,"gt","","",131],[10,"ge","","",131],[10,"cmp","","",131],[10,"hash","","",131],[10,"index","","",131],[10,"from_iter","","",131],[10,"extend","","",131],[10,"fmt","","",131],[10,"clone","std::hash","",134],[10,"clone_from","","",134],[10,"new","","Construct a new `RandomSipHasher` that is initialized with random keys.",134],[10,"hash","","",134],[10,"default","","",134],[10,"new","collections::hash::sip","Creates a `SipState` that is keyed off the provided keys.",135],[10,"new_with_keys","","Creates a `SipState` that is keyed off the provided keys.",135],[10,"reset","","Resets the state to its initial state.",135],[10,"result","","Returns the computed hash.",135],[10,"write","","",135],[10,"clone","","",135],[10,"clone_from","","",135],[10,"default","","",135],[10,"clone","","",136],[10,"clone_from","","",136],[10,"new","","Creates a `Sip`.",136],[10,"new_with_keys","","Creates a `Sip` that is keyed off the provided keys.",136],[10,"hash","","",136],[10,"default","","",136],[10,"spawn","std::task","",137],[10,"new","","Generate the base configuration for spawning a task, off of which more\nconfiguration methods can be chained.",138],[10,"named","","Name the task-to-be. Currently the name is used for identification\nonly in failure messages.",138],[10,"stack_size","","Set the size of the stack for the new task.",138],[10,"stdout","","Redirect task-local stdout.",138],[10,"stderr","","Redirect task-local stderr.",138],[10,"spawner","","Set the spawning mechanism for the task.",138],[10,"with_wrapper","","Add a wrapper to the body of the spawned task.",138],[10,"spawn","","Creates and executes a new child task.",138],[10,"try_future","","Execute a proc in a newly-spawned task and return a future representing\nthe task's result. The task has the properties and behavior\nspecified by the `TaskBuilder`.",138],[10,"try","","Execute a function in a newly-spawnedtask and block until the task\ncompletes or fails. Equivalent to `.try_future(f).unwrap()`.",138],[10,"get","std::sync::future","Get the value of the future.",139],[10,"unwrap","","Gets the value from this future, forcing evaluation.",139],[10,"get_ref","","Executes the future's closure and then returns a reference\nto the result.  The reference lasts as long as\nthe future.",139],[10,"from_value","","Create a future from a value.",139],[10,"from_fn","","Create a future from a function.",139],[10,"from_receiver","","Create a future from a port",139],[10,"spawn","","Create a future from a unique closure.",139],[10,"drop","std::sync::task_pool","",140],[10,"new","","Spawns a new task pool with `n_tasks` tasks. The provided\n`init_fn_factory` returns a function which, given the index of the\ntask, should return local data to be kept around in that task.",140],[10,"execute","","Executes the function `f` on a task in the pool. The function\nreceives a reference to the local data returned by the `init_fn`.",140],[10,"pop","sync::spsc_queue","Attempts to pop the value from the head of the queue, returning `None`\nif the queue is empty.",141],[10,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nis empty.",141],[10,"push","","Pushes a new value onto the queue.",142],[10,"new","","Creates a new queue.",143],[10,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",143],[10,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",143],[10,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",143],[10,"drop","","",143],[10,"new","sync::atomic","Create a new `AtomicOption`",144],[10,"empty","","Create a new `AtomicOption` that doesn't contain a value",144],[10,"swap","","Store a value, returning the old value",144],[10,"take","","Remove the value, leaving the `AtomicOption` empty.",144],[10,"fill","","Replace an empty value with a non-empty value.",144],[10,"is_empty","","Returns `true` if the `AtomicOption` is empty.",144],[10,"drop","","",144],[10,"new","sync::mpsc_queue","Creates a new queue that is safe to share among multiple producers and\none consumer.",145],[10,"push","","Pushes a new value onto this queue.",145],[10,"pop","","Pops some data from this queue.",145],[10,"casual_pop","","Attempts to pop data from this queue, but doesn't attempt too hard. This\nwill canonicalize inconsistent states to a `None` value.",145],[10,"drop","","",145],[10,"with_capacity","sync::mpmc_bounded_queue","",146],[10,"push","","",146],[10,"pop","","",146],[10,"clone","","",146],[10,"clone_from","","",146],[10,"fmt","sync::deque","",147],[10,"eq","","",147],[10,"ne","","",147],[10,"ne","","",147],[10,"new","","Allocates a new buffer pool which in turn can be used to allocate new\ndeques.",148],[10,"deque","","Allocates a new work-stealing deque which will send/receiving memory to\nand from this buffer pool.",148],[10,"clone","","",148],[10,"clone_from","","",148],[10,"push","","Pushes data onto the front of this work queue.",149],[10,"pop","","Pops data off the front of the work queue, returning `None` on an empty\nqueue.",149],[10,"pool","","Gets access to the buffer pool that this worker is attached to. This can\nbe used to create more deques which share the same buffer pool as this\ndeque.",149],[10,"steal","","Steals work off the end of the queue (opposite of the worker's end)",150],[10,"pool","","Gets access to the buffer pool that this stealer is attached to. This\ncan be used to create more deques which share the same buffer pool as\nthis deque.",150],[10,"clone","","",150],[10,"clone_from","","",150],[10,"drop","","",151],[10,"drop","","",152],[10,"drop","std::c_vec","",153],[10,"new","","Create a `CVec` from a raw pointer to a buffer with a given length.",153],[10,"new_with_dtor","","Create a `CVec` from a foreign buffer, with a given length,\nand a function to run upon destruction.",153],[10,"as_mut_slice","","View the stored data as a mutable slice.",153],[10,"get","","Retrieves an element at a given index, returning `None` if the requested\nindex is greater than the length of the vector.",153],[10,"get_mut","","Retrieves a mutable element at a given index, returning `None` if the\nrequested index is greater than the length of the vector.",153],[10,"unwrap","","Unwrap the pointer without running the destructor",153],[10,"as_slice","","View the stored data as a slice.",153],[10,"len","","",153],[10,"is_empty","","",153],[10,"drop","std::dynamic_lib","",154],[10,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",154],[10,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",154],[10,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",154],[10,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",154],[10,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",154],[10,"symbol","","Access the value at the symbol of the dynamic library",154],[10,"fmt","std::os","",155],[10,"new","","Create a new mapping with the given `options`, at least `min_len` bytes\nlong. `min_len` must be greater than zero; see the note on\n`ErrZeroLength`.",156],[10,"granularity","","Granularity that the offset or address must be for `MapOffset` and\n`MapAddr` respectively.",156],[10,"drop","","Unmap the mapping. Fails the task if `munmap` fails.",156],[10,"data","","Returns the pointer to the memory created or modified by this map.",156],[10,"len","","Returns the number of bytes this map applies to.",156],[10,"kind","","Returns the type of mapping this represents.",156],[10,"with_capacity","std::io::buffered","Creates a new `BufferedReader` with the specified buffer capacity",157],[10,"new","","Creates a new `BufferedReader` with a default buffer capacity",157],[10,"get_ref","","Gets a reference to the underlying reader.",157],[10,"unwrap","","Unwraps this `BufferedReader`, returning the underlying reader.",157],[10,"fill_buf","","",157],[10,"consume","","",157],[10,"read_line","","",157],[10,"lines","","",157],[10,"read_until","","",157],[10,"read_char","","",157],[10,"chars","","",157],[10,"read","","",157],[10,"read_at_least","","",157],[10,"read_byte","","",157],[10,"push","","",157],[10,"push_at_least","","",157],[10,"read_exact","","",157],[10,"read_to_end","","",157],[10,"read_to_string","","",157],[10,"bytes","","",157],[10,"read_le_uint_n","","",157],[10,"read_le_int_n","","",157],[10,"read_be_uint_n","","",157],[10,"read_be_int_n","","",157],[10,"read_le_uint","","",157],[10,"read_le_int","","",157],[10,"read_be_uint","","",157],[10,"read_be_int","","",157],[10,"read_be_u64","","",157],[10,"read_be_u32","","",157],[10,"read_be_u16","","",157],[10,"read_be_i64","","",157],[10,"read_be_i32","","",157],[10,"read_be_i16","","",157],[10,"read_be_f64","","",157],[10,"read_be_f32","","",157],[10,"read_le_u64","","",157],[10,"read_le_u32","","",157],[10,"read_le_u16","","",157],[10,"read_le_i64","","",157],[10,"read_le_i32","","",157],[10,"read_le_i16","","",157],[10,"read_le_f64","","",157],[10,"read_le_f32","","",157],[10,"read_u8","","",157],[10,"read_i8","","",157],[10,"by_ref","","",157],[10,"with_capacity","","Creates a new `BufferedWriter` with the specified buffer capacity",158],[10,"new","","Creates a new `BufferedWriter` with a default buffer capacity",158],[10,"get_ref","","Gets a reference to the underlying writer.",158],[10,"unwrap","","Unwraps this `BufferedWriter`, returning the underlying writer.",158],[10,"write","","",158],[10,"flush","","",158],[10,"flush","","",158],[10,"write_fmt","","",158],[10,"write_str","","",158],[10,"write_line","","",158],[10,"write_char","","",158],[10,"write_int","","",158],[10,"write_uint","","",158],[10,"write_le_uint","","",158],[10,"write_le_int","","",158],[10,"write_be_uint","","",158],[10,"write_be_int","","",158],[10,"write_be_u64","","",158],[10,"write_be_u32","","",158],[10,"write_be_u16","","",158],[10,"write_be_i64","","",158],[10,"write_be_i32","","",158],[10,"write_be_i16","","",158],[10,"write_be_f64","","",158],[10,"write_be_f32","","",158],[10,"write_le_u64","","",158],[10,"write_le_u32","","",158],[10,"write_le_u16","","",158],[10,"write_le_i64","","",158],[10,"write_le_i32","","",158],[10,"write_le_i16","","",158],[10,"write_le_f64","","",158],[10,"write_le_f32","","",158],[10,"write_u8","","",158],[10,"write_i8","","",158],[10,"by_ref","","",158],[10,"drop","","",158],[10,"new","","Creates a new `LineBufferedWriter`",159],[10,"get_ref","","Gets a reference to the underlying writer.",159],[10,"unwrap","","Unwraps this `LineBufferedWriter`, returning the underlying writer.",159],[10,"write","","",159],[10,"flush","","",159],[10,"flush","","",159],[10,"write_fmt","","",159],[10,"write_str","","",159],[10,"write_line","","",159],[10,"write_char","","",159],[10,"write_int","","",159],[10,"write_uint","","",159],[10,"write_le_uint","","",159],[10,"write_le_int","","",159],[10,"write_be_uint","","",159],[10,"write_be_int","","",159],[10,"write_be_u64","","",159],[10,"write_be_u32","","",159],[10,"write_be_u16","","",159],[10,"write_be_i64","","",159],[10,"write_be_i32","","",159],[10,"write_be_i16","","",159],[10,"write_be_f64","","",159],[10,"write_be_f32","","",159],[10,"write_le_u64","","",159],[10,"write_le_u32","","",159],[10,"write_le_u16","","",159],[10,"write_le_i64","","",159],[10,"write_le_i32","","",159],[10,"write_le_i16","","",159],[10,"write_le_f64","","",159],[10,"write_le_f32","","",159],[10,"write_u8","","",159],[10,"write_i8","","",159],[10,"by_ref","","",159],[10,"read","","",160],[10,"read_at_least","","",160],[10,"read_byte","","",160],[10,"push","","",160],[10,"push_at_least","","",160],[10,"read_exact","","",160],[10,"read_to_end","","",160],[10,"read_to_string","","",160],[10,"bytes","","",160],[10,"read_le_uint_n","","",160],[10,"read_le_int_n","","",160],[10,"read_be_uint_n","","",160],[10,"read_be_int_n","","",160],[10,"read_le_uint","","",160],[10,"read_le_int","","",160],[10,"read_be_uint","","",160],[10,"read_be_int","","",160],[10,"read_be_u64","","",160],[10,"read_be_u32","","",160],[10,"read_be_u16","","",160],[10,"read_be_i64","","",160],[10,"read_be_i32","","",160],[10,"read_be_i16","","",160],[10,"read_be_f64","","",160],[10,"read_be_f32","","",160],[10,"read_le_u64","","",160],[10,"read_le_u32","","",160],[10,"read_le_u16","","",160],[10,"read_le_i64","","",160],[10,"read_le_i32","","",160],[10,"read_le_i16","","",160],[10,"read_le_f64","","",160],[10,"read_le_f32","","",160],[10,"read_u8","","",160],[10,"read_i8","","",160],[10,"by_ref","","",160],[10,"with_capacities","","Creates a new buffered stream with explicitly listed capacities for the\nreader/writer buffer.",161],[10,"new","","Creates a new buffered stream with the default reader/writer buffer\ncapacities.",161],[10,"get_ref","","Gets a reference to the underlying stream.",161],[10,"unwrap","","Unwraps this `BufferedStream`, returning the underlying stream.",161],[10,"fill_buf","","",161],[10,"consume","","",161],[10,"read_line","","",161],[10,"lines","","",161],[10,"read_until","","",161],[10,"read_char","","",161],[10,"chars","","",161],[10,"read","","",161],[10,"read_at_least","","",161],[10,"read_byte","","",161],[10,"push","","",161],[10,"push_at_least","","",161],[10,"read_exact","","",161],[10,"read_to_end","","",161],[10,"read_to_string","","",161],[10,"bytes","","",161],[10,"read_le_uint_n","","",161],[10,"read_le_int_n","","",161],[10,"read_be_uint_n","","",161],[10,"read_be_int_n","","",161],[10,"read_le_uint","","",161],[10,"read_le_int","","",161],[10,"read_be_uint","","",161],[10,"read_be_int","","",161],[10,"read_be_u64","","",161],[10,"read_be_u32","","",161],[10,"read_be_u16","","",161],[10,"read_be_i64","","",161],[10,"read_be_i32","","",161],[10,"read_be_i16","","",161],[10,"read_be_f64","","",161],[10,"read_be_f32","","",161],[10,"read_le_u64","","",161],[10,"read_le_u32","","",161],[10,"read_le_u16","","",161],[10,"read_le_i64","","",161],[10,"read_le_i32","","",161],[10,"read_le_i16","","",161],[10,"read_le_f64","","",161],[10,"read_le_f32","","",161],[10,"read_u8","","",161],[10,"read_i8","","",161],[10,"by_ref","","",161],[10,"write","","",161],[10,"flush","","",161],[10,"flush","","",161],[10,"write_fmt","","",161],[10,"write_str","","",161],[10,"write_line","","",161],[10,"write_char","","",161],[10,"write_int","","",161],[10,"write_uint","","",161],[10,"write_le_uint","","",161],[10,"write_le_int","","",161],[10,"write_be_uint","","",161],[10,"write_be_int","","",161],[10,"write_be_u64","","",161],[10,"write_be_u32","","",161],[10,"write_be_u16","","",161],[10,"write_be_i64","","",161],[10,"write_be_i32","","",161],[10,"write_be_i16","","",161],[10,"write_be_f64","","",161],[10,"write_be_f32","","",161],[10,"write_le_u64","","",161],[10,"write_le_u32","","",161],[10,"write_le_u16","","",161],[10,"write_le_i64","","",161],[10,"write_le_i32","","",161],[10,"write_le_i16","","",161],[10,"write_le_f64","","",161],[10,"write_le_f32","","",161],[10,"write_u8","","",161],[10,"write_i8","","",161],[10,"by_ref","","",161],[10,"new","std::io::comm_adapters","Wraps a `Port` in a `ChanReader` structure",162],[10,"read","","",162],[10,"read_at_least","","",162],[10,"read_byte","","",162],[10,"push","","",162],[10,"push_at_least","","",162],[10,"read_exact","","",162],[10,"read_to_end","","",162],[10,"read_to_string","","",162],[10,"bytes","","",162],[10,"read_le_uint_n","","",162],[10,"read_le_int_n","","",162],[10,"read_be_uint_n","","",162],[10,"read_be_int_n","","",162],[10,"read_le_uint","","",162],[10,"read_le_int","","",162],[10,"read_be_uint","","",162],[10,"read_be_int","","",162],[10,"read_be_u64","","",162],[10,"read_be_u32","","",162],[10,"read_be_u16","","",162],[10,"read_be_i64","","",162],[10,"read_be_i32","","",162],[10,"read_be_i16","","",162],[10,"read_be_f64","","",162],[10,"read_be_f32","","",162],[10,"read_le_u64","","",162],[10,"read_le_u32","","",162],[10,"read_le_u16","","",162],[10,"read_le_i64","","",162],[10,"read_le_i32","","",162],[10,"read_le_i16","","",162],[10,"read_le_f64","","",162],[10,"read_le_f32","","",162],[10,"read_u8","","",162],[10,"read_i8","","",162],[10,"by_ref","","",162],[10,"new","","Wraps a channel in a `ChanWriter` structure",163],[10,"clone","","",163],[10,"clone_from","","",163],[10,"write","","",163],[10,"flush","","",163],[10,"write_fmt","","",163],[10,"write_str","","",163],[10,"write_line","","",163],[10,"write_char","","",163],[10,"write_int","","",163],[10,"write_uint","","",163],[10,"write_le_uint","","",163],[10,"write_le_int","","",163],[10,"write_be_uint","","",163],[10,"write_be_int","","",163],[10,"write_be_u64","","",163],[10,"write_be_u32","","",163],[10,"write_be_u16","","",163],[10,"write_be_i64","","",163],[10,"write_be_i32","","",163],[10,"write_be_i16","","",163],[10,"write_be_f64","","",163],[10,"write_be_f32","","",163],[10,"write_le_u64","","",163],[10,"write_le_u32","","",163],[10,"write_le_u16","","",163],[10,"write_le_i64","","",163],[10,"write_le_i32","","",163],[10,"write_le_i16","","",163],[10,"write_le_f64","","",163],[10,"write_le_f32","","",163],[10,"write_u8","","",163],[10,"write_i8","","",163],[10,"by_ref","","",163],[10,"clone","std::io::mem","",164],[10,"clone_from","","",164],[10,"new","","Create a new `MemWriter`.",164],[10,"with_capacity","","Create a new `MemWriter`, allocating at least `n` bytes for\nthe internal buffer.",164],[10,"get_ref","","Acquires an immutable reference to the underlying buffer of this\n`MemWriter`.",164],[10,"unwrap","","Unwraps this `MemWriter`, returning the underlying buffer",164],[10,"write","","",164],[10,"flush","","",164],[10,"write_fmt","","",164],[10,"write_str","","",164],[10,"write_line","","",164],[10,"write_char","","",164],[10,"write_int","","",164],[10,"write_uint","","",164],[10,"write_le_uint","","",164],[10,"write_le_int","","",164],[10,"write_be_uint","","",164],[10,"write_be_int","","",164],[10,"write_be_u64","","",164],[10,"write_be_u32","","",164],[10,"write_be_u16","","",164],[10,"write_be_i64","","",164],[10,"write_be_i32","","",164],[10,"write_be_i16","","",164],[10,"write_be_f64","","",164],[10,"write_be_f32","","",164],[10,"write_le_u64","","",164],[10,"write_le_u32","","",164],[10,"write_le_u16","","",164],[10,"write_le_i64","","",164],[10,"write_le_i32","","",164],[10,"write_le_i16","","",164],[10,"write_le_f64","","",164],[10,"write_le_f32","","",164],[10,"write_u8","","",164],[10,"write_i8","","",164],[10,"by_ref","","",164],[10,"new","","Creates a new `MemReader` which will read the buffer given. The buffer\ncan be re-acquired through `unwrap`",165],[10,"eof","","Tests whether this reader has read all bytes in its buffer.",165],[10,"get_ref","","Acquires an immutable reference to the underlying buffer of this\n`MemReader`.",165],[10,"unwrap","","Unwraps this `MemReader`, returning the underlying buffer",165],[10,"read","","",165],[10,"read_at_least","","",165],[10,"read_byte","","",165],[10,"push","","",165],[10,"push_at_least","","",165],[10,"read_exact","","",165],[10,"read_to_end","","",165],[10,"read_to_string","","",165],[10,"bytes","","",165],[10,"read_le_uint_n","","",165],[10,"read_le_int_n","","",165],[10,"read_be_uint_n","","",165],[10,"read_be_int_n","","",165],[10,"read_le_uint","","",165],[10,"read_le_int","","",165],[10,"read_be_uint","","",165],[10,"read_be_int","","",165],[10,"read_be_u64","","",165],[10,"read_be_u32","","",165],[10,"read_be_u16","","",165],[10,"read_be_i64","","",165],[10,"read_be_i32","","",165],[10,"read_be_i16","","",165],[10,"read_be_f64","","",165],[10,"read_be_f32","","",165],[10,"read_le_u64","","",165],[10,"read_le_u32","","",165],[10,"read_le_u16","","",165],[10,"read_le_i64","","",165],[10,"read_le_i32","","",165],[10,"read_le_i16","","",165],[10,"read_le_f64","","",165],[10,"read_le_f32","","",165],[10,"read_u8","","",165],[10,"read_i8","","",165],[10,"by_ref","","",165],[10,"tell","","",165],[10,"seek","","",165],[10,"fill_buf","","",165],[10,"consume","","",165],[10,"read_line","","",165],[10,"lines","","",165],[10,"read_until","","",165],[10,"read_char","","",165],[10,"chars","","",165],[10,"new","","Creates a new `BufWriter` which will wrap the specified buffer. The\nwriter initially starts at position 0.",166],[10,"write","","",166],[10,"flush","","",166],[10,"write_fmt","","",166],[10,"write_str","","",166],[10,"write_line","","",166],[10,"write_char","","",166],[10,"write_int","","",166],[10,"write_uint","","",166],[10,"write_le_uint","","",166],[10,"write_le_int","","",166],[10,"write_be_uint","","",166],[10,"write_be_int","","",166],[10,"write_be_u64","","",166],[10,"write_be_u32","","",166],[10,"write_be_u16","","",166],[10,"write_be_i64","","",166],[10,"write_be_i32","","",166],[10,"write_be_i16","","",166],[10,"write_be_f64","","",166],[10,"write_be_f32","","",166],[10,"write_le_u64","","",166],[10,"write_le_u32","","",166],[10,"write_le_u16","","",166],[10,"write_le_i64","","",166],[10,"write_le_i32","","",166],[10,"write_le_i16","","",166],[10,"write_le_f64","","",166],[10,"write_le_f32","","",166],[10,"write_u8","","",166],[10,"write_i8","","",166],[10,"by_ref","","",166],[10,"tell","","",166],[10,"seek","","",166],[10,"new","","Creates a new buffered reader which will read the specified buffer",167],[10,"eof","","Tests whether this reader has read all bytes in its buffer.",167],[10,"read","","",167],[10,"read_at_least","","",167],[10,"read_byte","","",167],[10,"push","","",167],[10,"push_at_least","","",167],[10,"read_exact","","",167],[10,"read_to_end","","",167],[10,"read_to_string","","",167],[10,"bytes","","",167],[10,"read_le_uint_n","","",167],[10,"read_le_int_n","","",167],[10,"read_be_uint_n","","",167],[10,"read_be_int_n","","",167],[10,"read_le_uint","","",167],[10,"read_le_int","","",167],[10,"read_be_uint","","",167],[10,"read_be_int","","",167],[10,"read_be_u64","","",167],[10,"read_be_u32","","",167],[10,"read_be_u16","","",167],[10,"read_be_i64","","",167],[10,"read_be_i32","","",167],[10,"read_be_i16","","",167],[10,"read_be_f64","","",167],[10,"read_be_f32","","",167],[10,"read_le_u64","","",167],[10,"read_le_u32","","",167],[10,"read_le_u16","","",167],[10,"read_le_i64","","",167],[10,"read_le_i32","","",167],[10,"read_le_i16","","",167],[10,"read_le_f64","","",167],[10,"read_le_f32","","",167],[10,"read_u8","","",167],[10,"read_i8","","",167],[10,"by_ref","","",167],[10,"tell","","",167],[10,"seek","","",167],[10,"fill_buf","","",167],[10,"consume","","",167],[10,"read_line","","",167],[10,"lines","","",167],[10,"read_until","","",167],[10,"read_char","","",167],[10,"chars","","",167],[10,"write","core::result","",168],[10,"flush","","",168],[10,"flush","","",168],[10,"write_fmt","","",168],[10,"write_str","","",168],[10,"write_line","","",168],[10,"write_char","","",168],[10,"write_int","","",168],[10,"write_uint","","",168],[10,"write_le_uint","","",168],[10,"write_le_int","","",168],[10,"write_be_uint","","",168],[10,"write_be_int","","",168],[10,"write_be_u64","","",168],[10,"write_be_u32","","",168],[10,"write_be_u16","","",168],[10,"write_be_i64","","",168],[10,"write_be_i32","","",168],[10,"write_be_i16","","",168],[10,"write_be_f64","","",168],[10,"write_be_f32","","",168],[10,"write_le_u64","","",168],[10,"write_le_u32","","",168],[10,"write_le_u16","","",168],[10,"write_le_i64","","",168],[10,"write_le_i32","","",168],[10,"write_le_i16","","",168],[10,"write_le_f64","","",168],[10,"write_le_f32","","",168],[10,"write_u8","","",168],[10,"write_i8","","",168],[10,"by_ref","","",168],[10,"read","","",168],[10,"read_at_least","","",168],[10,"read_byte","","",168],[10,"push","","",168],[10,"push_at_least","","",168],[10,"read_exact","","",168],[10,"read_to_end","","",168],[10,"read_to_string","","",168],[10,"bytes","","",168],[10,"read_le_uint_n","","",168],[10,"read_le_int_n","","",168],[10,"read_be_uint_n","","",168],[10,"read_be_int_n","","",168],[10,"read_le_uint","","",168],[10,"read_le_int","","",168],[10,"read_be_uint","","",168],[10,"read_be_int","","",168],[10,"read_be_u64","","",168],[10,"read_be_u32","","",168],[10,"read_be_u16","","",168],[10,"read_be_i64","","",168],[10,"read_be_i32","","",168],[10,"read_be_i16","","",168],[10,"read_be_f64","","",168],[10,"read_be_f32","","",168],[10,"read_le_u64","","",168],[10,"read_le_u32","","",168],[10,"read_le_u16","","",168],[10,"read_le_i64","","",168],[10,"read_le_i32","","",168],[10,"read_le_i16","","",168],[10,"read_le_f64","","",168],[10,"read_le_f32","","",168],[10,"read_u8","","",168],[10,"read_i8","","",168],[10,"by_ref","","",168],[10,"tell","","",168],[10,"seek","","",168],[10,"listen","","",168],[10,"accept","","",168],[10,"incoming","","",168],[10,"new_in","std::io::tempfile","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the suffix `suffix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",169],[10,"new","","Attempts to make a temporary directory inside of `os::tmpdir()` whose\nname will have the suffix `suffix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",169],[10,"unwrap","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",169],[10,"path","","Access the wrapped `std::path::Path` to the temporary directory.",169],[10,"close","","Close and remove the temporary directory",169],[10,"drop","","",169],[10,"new","std::io::extensions","Constructs a new byte iterator from the given Reader instance.",170],[10,"next","","",170],[10,"size_hint","","",170],[10,"chain","","",170],[10,"zip","","",170],[10,"map","","",170],[10,"filter","","",170],[10,"filter_map","","",170],[10,"enumerate","","",170],[10,"peekable","","",170],[10,"skip_while","","",170],[10,"take_while","","",170],[10,"skip","","",170],[10,"take","","",170],[10,"scan","","",170],[10,"flat_map","","",170],[10,"fuse","","",170],[10,"inspect","","",170],[10,"by_ref","","",170],[10,"advance","","",170],[10,"collect","","",170],[10,"nth","","",170],[10,"last","","",170],[10,"fold","","",170],[10,"count","","",170],[10,"all","","",170],[10,"any","","",170],[10,"find","","",170],[10,"position","","",170],[10,"max_by","","",170],[10,"min_by","","",170],[10,"open_mode","std::io::fs","Open a file at `path` in the mode specified by the `mode` and `access`\narguments",171],[10,"open","","Attempts to open a file in read-only mode. This function is equivalent to\n`File::open_mode(path, Open, Read)`, and will raise all of the same\nerrors that `File::open_mode` does.",171],[10,"create","","Attempts to create a file in write-only mode. This function is\nequivalent to `File::open_mode(path, Truncate, Write)`, and will\nraise all of the same errors that `File::open_mode` does.",171],[10,"path","","Returns the original path which was used to open this file.",171],[10,"fsync","","Synchronizes all modifications to this file to its permanent storage\ndevice. This will flush any internal buffers necessary to perform this\noperation.",171],[10,"datasync","","This function is similar to `fsync`, except that it may not synchronize\nfile metadata to the filesystem. This is intended for use case which\nmust synchronize content, but don't need the metadata on disk. The goal\nof this method is to reduce disk operations.",171],[10,"truncate","","Either truncates or extends the underlying file, updating the size of\nthis file to become `size`. This is equivalent to unix's `truncate`\nfunction.",171],[10,"eof","","Returns true if the stream has reached the end of the file.",171],[10,"stat","","Queries information about the underlying file.",171],[10,"next","","",172],[10,"size_hint","","",172],[10,"chain","","",172],[10,"zip","","",172],[10,"map","","",172],[10,"filter","","",172],[10,"filter_map","","",172],[10,"enumerate","","",172],[10,"peekable","","",172],[10,"skip_while","","",172],[10,"take_while","","",172],[10,"skip","","",172],[10,"take","","",172],[10,"scan","","",172],[10,"flat_map","","",172],[10,"fuse","","",172],[10,"inspect","","",172],[10,"by_ref","","",172],[10,"advance","","",172],[10,"collect","","",172],[10,"nth","","",172],[10,"last","","",172],[10,"fold","","",172],[10,"count","","",172],[10,"all","","",172],[10,"any","","",172],[10,"find","","",172],[10,"position","","",172],[10,"max_by","","",172],[10,"min_by","","",172],[10,"read","","",171],[10,"read_at_least","","",171],[10,"read_byte","","",171],[10,"push","","",171],[10,"push_at_least","","",171],[10,"read_exact","","",171],[10,"read_to_end","","",171],[10,"read_to_string","","",171],[10,"bytes","","",171],[10,"read_le_uint_n","","",171],[10,"read_le_int_n","","",171],[10,"read_be_uint_n","","",171],[10,"read_be_int_n","","",171],[10,"read_le_uint","","",171],[10,"read_le_int","","",171],[10,"read_be_uint","","",171],[10,"read_be_int","","",171],[10,"read_be_u64","","",171],[10,"read_be_u32","","",171],[10,"read_be_u16","","",171],[10,"read_be_i64","","",171],[10,"read_be_i32","","",171],[10,"read_be_i16","","",171],[10,"read_be_f64","","",171],[10,"read_be_f32","","",171],[10,"read_le_u64","","",171],[10,"read_le_u32","","",171],[10,"read_le_u16","","",171],[10,"read_le_i64","","",171],[10,"read_le_i32","","",171],[10,"read_le_i16","","",171],[10,"read_le_f64","","",171],[10,"read_le_f32","","",171],[10,"read_u8","","",171],[10,"read_i8","","",171],[10,"by_ref","","",171],[10,"write","","",171],[10,"flush","","",171],[10,"write_fmt","","",171],[10,"write_str","","",171],[10,"write_line","","",171],[10,"write_char","","",171],[10,"write_int","","",171],[10,"write_uint","","",171],[10,"write_le_uint","","",171],[10,"write_le_int","","",171],[10,"write_be_uint","","",171],[10,"write_be_int","","",171],[10,"write_be_u64","","",171],[10,"write_be_u32","","",171],[10,"write_be_u16","","",171],[10,"write_be_i64","","",171],[10,"write_be_i32","","",171],[10,"write_be_i16","","",171],[10,"write_be_f64","","",171],[10,"write_be_f32","","",171],[10,"write_le_u64","","",171],[10,"write_le_u32","","",171],[10,"write_le_u16","","",171],[10,"write_le_i64","","",171],[10,"write_le_i32","","",171],[10,"write_le_i16","","",171],[10,"write_le_f64","","",171],[10,"write_le_f32","","",171],[10,"write_u8","","",171],[10,"write_i8","","",171],[10,"by_ref","","",171],[10,"tell","","",171],[10,"seek","","",171],[10,"stat","std::path::posix","",173],[10,"lstat","","",173],[10,"exists","","",173],[10,"is_file","","",173],[10,"is_dir","","",173],[10,"connect","std::io::net::tcp","Open a TCP connection to a remote host by hostname or IP address.",174],[10,"connect_timeout","","Creates a TCP connection to a remote socket address, timing out after\nthe specified duration.",174],[10,"peer_name","","Returns the socket address of the remote peer of this TCP connection.",174],[10,"socket_name","","Returns the socket address of the local half of this TCP connection.",174],[10,"set_nodelay","","Sets the nodelay flag on this connection to the boolean specified",174],[10,"set_keepalive","","Sets the keepalive timeout to the timeout specified.",174],[10,"close_read","","Closes the reading half of this connection.",174],[10,"close_write","","Closes the writing half of this connection.",174],[10,"set_timeout","","Sets a timeout, in milliseconds, for blocking operations on this stream.",174],[10,"set_read_timeout","","Sets the timeout for read operations on this stream.",174],[10,"set_write_timeout","","Sets the timeout for write operations on this stream.",174],[10,"clone","","Creates a new handle to this TCP stream, allowing for simultaneous reads\nand writes of this connection.",174],[10,"clone_from","","",174],[10,"read","","",174],[10,"read_at_least","","",174],[10,"read_byte","","",174],[10,"push","","",174],[10,"push_at_least","","",174],[10,"read_exact","","",174],[10,"read_to_end","","",174],[10,"read_to_string","","",174],[10,"bytes","","",174],[10,"read_le_uint_n","","",174],[10,"read_le_int_n","","",174],[10,"read_be_uint_n","","",174],[10,"read_be_int_n","","",174],[10,"read_le_uint","","",174],[10,"read_le_int","","",174],[10,"read_be_uint","","",174],[10,"read_be_int","","",174],[10,"read_be_u64","","",174],[10,"read_be_u32","","",174],[10,"read_be_u16","","",174],[10,"read_be_i64","","",174],[10,"read_be_i32","","",174],[10,"read_be_i16","","",174],[10,"read_be_f64","","",174],[10,"read_be_f32","","",174],[10,"read_le_u64","","",174],[10,"read_le_u32","","",174],[10,"read_le_u16","","",174],[10,"read_le_i64","","",174],[10,"read_le_i32","","",174],[10,"read_le_i16","","",174],[10,"read_le_f64","","",174],[10,"read_le_f32","","",174],[10,"read_u8","","",174],[10,"read_i8","","",174],[10,"by_ref","","",174],[10,"write","","",174],[10,"flush","","",174],[10,"write_fmt","","",174],[10,"write_str","","",174],[10,"write_line","","",174],[10,"write_char","","",174],[10,"write_int","","",174],[10,"write_uint","","",174],[10,"write_le_uint","","",174],[10,"write_le_int","","",174],[10,"write_be_uint","","",174],[10,"write_be_int","","",174],[10,"write_be_u64","","",174],[10,"write_be_u32","","",174],[10,"write_be_u16","","",174],[10,"write_be_i64","","",174],[10,"write_be_i32","","",174],[10,"write_be_i16","","",174],[10,"write_be_f64","","",174],[10,"write_be_f32","","",174],[10,"write_le_u64","","",174],[10,"write_le_u32","","",174],[10,"write_le_u16","","",174],[10,"write_le_i64","","",174],[10,"write_le_i32","","",174],[10,"write_le_i16","","",174],[10,"write_le_f64","","",174],[10,"write_le_f32","","",174],[10,"write_u8","","",174],[10,"write_i8","","",174],[10,"by_ref","","",174],[10,"bind","","Creates a new `TcpListener` which will be bound to the specified IP\nand port. This listener is not ready for accepting connections,\n`listen` must be called on it before that's possible.",175],[10,"socket_name","","Returns the local socket address of this listener.",175],[10,"listen","","",175],[10,"set_timeout","","Prevents blocking on all future accepts after `ms` milliseconds have\nelapsed.",176],[10,"close_accept","","Closes the accepting capabilities of this acceptor.",176],[10,"accept","","",176],[10,"incoming","","",176],[10,"clone","","Creates a new handle to this TCP acceptor, allowing for simultaneous\naccepts.",176],[10,"clone_from","","",176],[10,"bind","std::io::net::udp","Creates a UDP socket from the given socket address.",177],[10,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",177],[10,"recvfrom","","",177],[10,"send_to","","Sends data on the socket to the given address. Returns nothing on\nsuccess.",177],[10,"sendto","","",177],[10,"connect","","Creates a `UdpStream`, which allows use of the `Reader` and `Writer`\ntraits to receive and send data from the same address. This transfers\nownership of the socket to the stream.",177],[10,"socket_name","","Returns the socket address that this socket was created from.",177],[10,"join_multicast","","Joins a multicast IP address (becomes a member of it)",177],[10,"leave_multicast","","Leaves a multicast IP address (drops membership from it)",177],[10,"set_multicast_loop","","Set the multicast loop flag to the specified value",177],[10,"set_multicast_ttl","","Sets the multicast TTL",177],[10,"set_ttl","","Sets this socket's TTL",177],[10,"set_broadcast","","Sets the broadcast flag on or off",177],[10,"set_broadast","","Sets the broadcast flag on or off",177],[10,"set_timeout","","Sets the read/write timeout for this socket.",177],[10,"set_read_timeout","","Sets the read timeout for this socket.",177],[10,"set_write_timeout","","Sets the write timeout for this socket.",177],[10,"clone","","Creates a new handle to this UDP socket, allowing for simultaneous\nreads and writes of the socket.",177],[10,"clone_from","","",177],[10,"as_socket","","Allows access to the underlying UDP socket owned by this stream. This\nis useful to, for example, use the socket to send data to hosts other\nthan the one that this stream is connected to.",178],[10,"disconnect","","Consumes this UDP stream and returns out the underlying socket.",178],[10,"read","","",178],[10,"read_at_least","","",178],[10,"read_byte","","",178],[10,"push","","",178],[10,"push_at_least","","",178],[10,"read_exact","","",178],[10,"read_to_end","","",178],[10,"read_to_string","","",178],[10,"bytes","","",178],[10,"read_le_uint_n","","",178],[10,"read_le_int_n","","",178],[10,"read_be_uint_n","","",178],[10,"read_be_int_n","","",178],[10,"read_le_uint","","",178],[10,"read_le_int","","",178],[10,"read_be_uint","","",178],[10,"read_be_int","","",178],[10,"read_be_u64","","",178],[10,"read_be_u32","","",178],[10,"read_be_u16","","",178],[10,"read_be_i64","","",178],[10,"read_be_i32","","",178],[10,"read_be_i16","","",178],[10,"read_be_f64","","",178],[10,"read_be_f32","","",178],[10,"read_le_u64","","",178],[10,"read_le_u32","","",178],[10,"read_le_u16","","",178],[10,"read_le_i64","","",178],[10,"read_le_i32","","",178],[10,"read_le_i16","","",178],[10,"read_le_f64","","",178],[10,"read_le_f32","","",178],[10,"read_u8","","",178],[10,"read_i8","","",178],[10,"by_ref","","",178],[10,"write","","",178],[10,"flush","","",178],[10,"write_fmt","","",178],[10,"write_str","","",178],[10,"write_line","","",178],[10,"write_char","","",178],[10,"write_int","","",178],[10,"write_uint","","",178],[10,"write_le_uint","","",178],[10,"write_le_int","","",178],[10,"write_be_uint","","",178],[10,"write_be_int","","",178],[10,"write_be_u64","","",178],[10,"write_be_u32","","",178],[10,"write_be_u16","","",178],[10,"write_be_i64","","",178],[10,"write_be_i32","","",178],[10,"write_be_i16","","",178],[10,"write_be_f64","","",178],[10,"write_be_f32","","",178],[10,"write_le_u64","","",178],[10,"write_le_u32","","",178],[10,"write_le_u16","","",178],[10,"write_le_i64","","",178],[10,"write_le_i32","","",178],[10,"write_le_i16","","",178],[10,"write_le_f64","","",178],[10,"write_le_f32","","",178],[10,"write_u8","","",178],[10,"write_i8","","",178],[10,"by_ref","","",178],[10,"hash","std::io::net::ip","",179],[10,"clone","","",179],[10,"clone_from","","",179],[10,"assert_receiver_is_total_eq","","",179],[10,"eq","","",179],[10,"ne","","",179],[10,"ne","","",179],[10,"fmt","","",179],[10,"hash","","",180],[10,"clone","","",180],[10,"clone_from","","",180],[10,"assert_receiver_is_total_eq","","",180],[10,"eq","","",180],[10,"ne","","",180],[10,"ne","","",180],[10,"fmt","","",180],[10,"from_str","","",179],[10,"from_str","","",180],[10,"connect","std::io::net::pipe","Connect to a pipe named by `path`. This will attempt to open a\nconnection to the underlying socket.",181],[10,"connect_timeout","","Connect to a pipe named by `path`, timing out if the specified number of\nmilliseconds.",181],[10,"close_read","","Closes the reading half of this connection.",181],[10,"close_write","","Closes the writing half of this connection.",181],[10,"set_timeout","","Sets the read/write timeout for this socket.",181],[10,"set_read_timeout","","Sets the read timeout for this socket.",181],[10,"set_write_timeout","","Sets the write timeout for this socket.",181],[10,"clone","","",181],[10,"clone_from","","",181],[10,"read","","",181],[10,"read_at_least","","",181],[10,"read_byte","","",181],[10,"push","","",181],[10,"push_at_least","","",181],[10,"read_exact","","",181],[10,"read_to_end","","",181],[10,"read_to_string","","",181],[10,"bytes","","",181],[10,"read_le_uint_n","","",181],[10,"read_le_int_n","","",181],[10,"read_be_uint_n","","",181],[10,"read_be_int_n","","",181],[10,"read_le_uint","","",181],[10,"read_le_int","","",181],[10,"read_be_uint","","",181],[10,"read_be_int","","",181],[10,"read_be_u64","","",181],[10,"read_be_u32","","",181],[10,"read_be_u16","","",181],[10,"read_be_i64","","",181],[10,"read_be_i32","","",181],[10,"read_be_i16","","",181],[10,"read_be_f64","","",181],[10,"read_be_f32","","",181],[10,"read_le_u64","","",181],[10,"read_le_u32","","",181],[10,"read_le_u16","","",181],[10,"read_le_i64","","",181],[10,"read_le_i32","","",181],[10,"read_le_i16","","",181],[10,"read_le_f64","","",181],[10,"read_le_f32","","",181],[10,"read_u8","","",181],[10,"read_i8","","",181],[10,"by_ref","","",181],[10,"write","","",181],[10,"flush","","",181],[10,"write_fmt","","",181],[10,"write_str","","",181],[10,"write_line","","",181],[10,"write_char","","",181],[10,"write_int","","",181],[10,"write_uint","","",181],[10,"write_le_uint","","",181],[10,"write_le_int","","",181],[10,"write_be_uint","","",181],[10,"write_be_int","","",181],[10,"write_be_u64","","",181],[10,"write_be_u32","","",181],[10,"write_be_u16","","",181],[10,"write_be_i64","","",181],[10,"write_be_i32","","",181],[10,"write_be_i16","","",181],[10,"write_be_f64","","",181],[10,"write_be_f32","","",181],[10,"write_le_u64","","",181],[10,"write_le_u32","","",181],[10,"write_le_u16","","",181],[10,"write_le_i64","","",181],[10,"write_le_i32","","",181],[10,"write_le_i16","","",181],[10,"write_le_f64","","",181],[10,"write_le_f32","","",181],[10,"write_u8","","",181],[10,"write_i8","","",181],[10,"by_ref","","",181],[10,"bind","","Creates a new listener, ready to receive incoming connections on the\nspecified socket. The server will be named by `path`.",182],[10,"listen","","",182],[10,"set_timeout","","Sets a timeout for this acceptor, after which accept() will no longer\nblock indefinitely.",183],[10,"close_accept","","Closes the accepting capabilities of this acceptor.",183],[10,"accept","","",183],[10,"incoming","","",183],[10,"clone","","Creates a new handle to this unix acceptor, allowing for simultaneous\naccepts.",183],[10,"clone_from","","",183],[10,"open","std::io::pipe","Consumes a file descriptor to return a pipe stream that will have\nsynchronous, but non-blocking reads/writes. This is useful if the file\ndescriptor is acquired via means other than the standard methods.",184],[10,"pair","","Creates a pair of in-memory OS pipes for a unidirectional communication\nstream.",184],[10,"clone","","",184],[10,"clone_from","","",184],[10,"read","","",184],[10,"read_at_least","","",184],[10,"read_byte","","",184],[10,"push","","",184],[10,"push_at_least","","",184],[10,"read_exact","","",184],[10,"read_to_end","","",184],[10,"read_to_string","","",184],[10,"bytes","","",184],[10,"read_le_uint_n","","",184],[10,"read_le_int_n","","",184],[10,"read_be_uint_n","","",184],[10,"read_be_int_n","","",184],[10,"read_le_uint","","",184],[10,"read_le_int","","",184],[10,"read_be_uint","","",184],[10,"read_be_int","","",184],[10,"read_be_u64","","",184],[10,"read_be_u32","","",184],[10,"read_be_u16","","",184],[10,"read_be_i64","","",184],[10,"read_be_i32","","",184],[10,"read_be_i16","","",184],[10,"read_be_f64","","",184],[10,"read_be_f32","","",184],[10,"read_le_u64","","",184],[10,"read_le_u32","","",184],[10,"read_le_u16","","",184],[10,"read_le_i64","","",184],[10,"read_le_i32","","",184],[10,"read_le_i16","","",184],[10,"read_le_f64","","",184],[10,"read_le_f32","","",184],[10,"read_u8","","",184],[10,"read_i8","","",184],[10,"by_ref","","",184],[10,"write","","",184],[10,"flush","","",184],[10,"write_fmt","","",184],[10,"write_str","","",184],[10,"write_line","","",184],[10,"write_char","","",184],[10,"write_int","","",184],[10,"write_uint","","",184],[10,"write_le_uint","","",184],[10,"write_le_int","","",184],[10,"write_be_uint","","",184],[10,"write_be_int","","",184],[10,"write_be_u64","","",184],[10,"write_be_u32","","",184],[10,"write_be_u16","","",184],[10,"write_be_i64","","",184],[10,"write_be_i32","","",184],[10,"write_be_i16","","",184],[10,"write_be_f64","","",184],[10,"write_be_f32","","",184],[10,"write_le_u64","","",184],[10,"write_le_u32","","",184],[10,"write_le_u16","","",184],[10,"write_le_i64","","",184],[10,"write_le_i32","","",184],[10,"write_le_i16","","",184],[10,"write_le_f64","","",184],[10,"write_le_f32","","",184],[10,"write_u8","","",184],[10,"write_i8","","",184],[10,"by_ref","","",184],[10,"fmt","std::io::process","",185],[10,"clone","","",185],[10,"clone_from","","",185],[10,"hash","","",185],[10,"assert_receiver_is_total_eq","","",185],[10,"eq","","",185],[10,"ne","","",185],[10,"ne","","",185],[10,"clone","","",186],[10,"clone_from","","",186],[10,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",186],[10,"arg","","Add an argument to pass to the program.",186],[10,"args","","Add multiple arguments to pass to the program.",186],[10,"env","","Inserts or updates an environment variable mapping.",186],[10,"env_remove","","Removes an environment variable mapping.",186],[10,"env_set_all","","Sets the entire environment map for the child process.",186],[10,"cwd","","Set the working directory for the child process.",186],[10,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).\nDefaults to `CreatePipe(true, false)` so the input can be written to.",186],[10,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).\nDefaults to `CreatePipe(false, true)` so the output can be collected.",186],[10,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).\nDefaults to `CreatePipe(false, true)` so the output can be collected.",186],[10,"extra_io","","Attaches a stream/file descriptor/pipe to the child process. Inherited\nfile descriptors are numbered consecutively, starting at 3; the first\nthree file descriptors (stdin/stdout/stderr) are configured with the\n`stdin`, `stdout`, and `stderr` methods.",186],[10,"uid","","Sets the child process's user id. This translates to a `setuid` call in\nthe child process. Setting this value on windows will cause the spawn to\nfail. Failure in the `setuid` call on unix will also cause the spawn to\nfail.",186],[10,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",186],[10,"detached","","Sets the child process to be spawned in a detached state. On unix, this\nmeans that the child is the leader of a new process group.",186],[10,"spawn","","Executes the command as a child process, which is returned.",186],[10,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",186],[10,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",186],[10,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",186],[10,"clone","","",187],[10,"clone_from","","",187],[10,"assert_receiver_is_total_eq","","",187],[10,"eq","","",187],[10,"ne","","",187],[10,"ne","","",187],[10,"clone","","",188],[10,"clone_from","","",188],[10,"clone","","",189],[10,"clone_from","","",189],[10,"assert_receiver_is_total_eq","","",189],[10,"eq","","",189],[10,"ne","","",189],[10,"ne","","",189],[10,"fmt","","Format a ProcessExit enum, to nicely present the information.",189],[10,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",189],[10,"matches_exit_status","","Checks whether this ProcessExit matches the given exit status.\nTermination by signal will never match an exit code.",189],[10,"kill","","Sends `signal` to another process in the system identified by `id`.",190],[10,"id","","Returns the process id of this child process",190],[10,"signal","","Sends the specified signal to the child process, returning whether the\nsignal could be delivered or not.",190],[10,"signal_exit","","Sends a signal to this child requesting that it exits. This is\nequivalent to sending a SIGTERM on unix platforms.",190],[10,"signal_kill","","Sends a signal to this child forcing it to exit. This is equivalent to\nsending a SIGKILL on unix platforms.",190],[10,"wait","","Wait for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",190],[10,"set_timeout","","Sets a timeout, in milliseconds, for future calls to wait().",190],[10,"wait_with_output","","Simultaneously wait for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning a `ProcessOutput`\ninstance.",190],[10,"forget","","Forgets this process, allowing it to outlive the parent",190],[10,"drop","","",190],[10,"fmt","std::io::signal","",191],[10,"hash","","",191],[10,"eq","","",191],[10,"ne","","",191],[10,"ne","","",191],[10,"new","","Creates a new listener for signals. Once created, signals are bound via\nthe `register` method (otherwise nothing will ever be received)",192],[10,"register","","Listen for a signal, returning true when successfully registered for\nsignum. Signals can be received using `recv()`.",192],[10,"unregister","","Unregisters a signal. If this listener currently had a handler\nregistered for the signal, then it will stop receiving any more\nnotification about the signal. If the signal has already been received,\nit may still be returned by `recv`.",192],[10,"isatty","std::io::stdio","Returns whether this stream is attached to a TTY instance or not.",193],[10,"read","","",193],[10,"read_at_least","","",193],[10,"read_byte","","",193],[10,"push","","",193],[10,"push_at_least","","",193],[10,"read_exact","","",193],[10,"read_to_end","","",193],[10,"read_to_string","","",193],[10,"bytes","","",193],[10,"read_le_uint_n","","",193],[10,"read_le_int_n","","",193],[10,"read_be_uint_n","","",193],[10,"read_be_int_n","","",193],[10,"read_le_uint","","",193],[10,"read_le_int","","",193],[10,"read_be_uint","","",193],[10,"read_be_int","","",193],[10,"read_be_u64","","",193],[10,"read_be_u32","","",193],[10,"read_be_u16","","",193],[10,"read_be_i64","","",193],[10,"read_be_i32","","",193],[10,"read_be_i16","","",193],[10,"read_be_f64","","",193],[10,"read_be_f32","","",193],[10,"read_le_u64","","",193],[10,"read_le_u32","","",193],[10,"read_le_u16","","",193],[10,"read_le_i64","","",193],[10,"read_le_i32","","",193],[10,"read_le_i16","","",193],[10,"read_le_f64","","",193],[10,"read_le_f32","","",193],[10,"read_u8","","",193],[10,"read_i8","","",193],[10,"by_ref","","",193],[10,"winsize","","Gets the size of this output window, if possible. This is typically used\nwhen the writer is attached to something like a terminal, this is used\nto fetch the dimensions of the terminal.",194],[10,"set_raw","","Controls whether this output stream is a \"raw stream\" or simply a normal\nstream.",194],[10,"isatty","","Returns whether this stream is attached to a TTY instance or not.",194],[10,"write","","",194],[10,"flush","","",194],[10,"write_fmt","","",194],[10,"write_str","","",194],[10,"write_line","","",194],[10,"write_char","","",194],[10,"write_int","","",194],[10,"write_uint","","",194],[10,"write_le_uint","","",194],[10,"write_le_int","","",194],[10,"write_be_uint","","",194],[10,"write_be_int","","",194],[10,"write_be_u64","","",194],[10,"write_be_u32","","",194],[10,"write_be_u16","","",194],[10,"write_be_i64","","",194],[10,"write_be_i32","","",194],[10,"write_be_i16","","",194],[10,"write_be_f64","","",194],[10,"write_be_f32","","",194],[10,"write_le_u64","","",194],[10,"write_le_u32","","",194],[10,"write_le_u16","","",194],[10,"write_le_i64","","",194],[10,"write_le_i32","","",194],[10,"write_le_i16","","",194],[10,"write_le_f64","","",194],[10,"write_le_f32","","",194],[10,"write_u8","","",194],[10,"write_i8","","",194],[10,"by_ref","","",194],[10,"new","std::io::timer","Creates a new timer which can be used to put the current task to sleep\nfor a number of milliseconds, or to possibly create channels which will\nget notified after an amount of time has passed.",195],[10,"sleep","","Blocks the current task for the specified duration.",195],[10,"oneshot","","Creates a oneshot receiver which will have a notification sent when\nthe specified duration has elapsed.",195],[10,"periodic","","Creates a receiver which will have a continuous stream of notifications\nbeing sent each time the specified duration has elapsed.",195],[10,"call","","",196],[10,"new","std::io::util","Creates a new `LimitReader`",197],[10,"unwrap","","Consumes the `LimitReader`, returning the underlying `Reader`.",197],[10,"limit","","Returns the number of bytes that can be read before the `LimitReader`\nwill return EOF.",197],[10,"read","","",197],[10,"read_at_least","","",197],[10,"read_byte","","",197],[10,"push","","",197],[10,"push_at_least","","",197],[10,"read_exact","","",197],[10,"read_to_end","","",197],[10,"read_to_string","","",197],[10,"bytes","","",197],[10,"read_le_uint_n","","",197],[10,"read_le_int_n","","",197],[10,"read_be_uint_n","","",197],[10,"read_be_int_n","","",197],[10,"read_le_uint","","",197],[10,"read_le_int","","",197],[10,"read_be_uint","","",197],[10,"read_be_int","","",197],[10,"read_be_u64","","",197],[10,"read_be_u32","","",197],[10,"read_be_u16","","",197],[10,"read_be_i64","","",197],[10,"read_be_i32","","",197],[10,"read_be_i16","","",197],[10,"read_be_f64","","",197],[10,"read_be_f32","","",197],[10,"read_le_u64","","",197],[10,"read_le_u32","","",197],[10,"read_le_u16","","",197],[10,"read_le_i64","","",197],[10,"read_le_i32","","",197],[10,"read_le_i16","","",197],[10,"read_le_f64","","",197],[10,"read_le_f32","","",197],[10,"read_u8","","",197],[10,"read_i8","","",197],[10,"by_ref","","",197],[10,"fill_buf","","",197],[10,"consume","","",197],[10,"read_line","","",197],[10,"lines","","",197],[10,"read_until","","",197],[10,"read_char","","",197],[10,"chars","","",197],[10,"write","","",198],[10,"flush","","",198],[10,"write_fmt","","",198],[10,"write_str","","",198],[10,"write_line","","",198],[10,"write_char","","",198],[10,"write_int","","",198],[10,"write_uint","","",198],[10,"write_le_uint","","",198],[10,"write_le_int","","",198],[10,"write_be_uint","","",198],[10,"write_be_int","","",198],[10,"write_be_u64","","",198],[10,"write_be_u32","","",198],[10,"write_be_u16","","",198],[10,"write_be_i64","","",198],[10,"write_be_i32","","",198],[10,"write_be_i16","","",198],[10,"write_be_f64","","",198],[10,"write_be_f32","","",198],[10,"write_le_u64","","",198],[10,"write_le_u32","","",198],[10,"write_le_u16","","",198],[10,"write_le_i64","","",198],[10,"write_le_i32","","",198],[10,"write_le_i16","","",198],[10,"write_le_f64","","",198],[10,"write_le_f32","","",198],[10,"write_u8","","",198],[10,"write_i8","","",198],[10,"by_ref","","",198],[10,"read","","",199],[10,"read_at_least","","",199],[10,"read_byte","","",199],[10,"push","","",199],[10,"push_at_least","","",199],[10,"read_exact","","",199],[10,"read_to_end","","",199],[10,"read_to_string","","",199],[10,"bytes","","",199],[10,"read_le_uint_n","","",199],[10,"read_le_int_n","","",199],[10,"read_be_uint_n","","",199],[10,"read_be_int_n","","",199],[10,"read_le_uint","","",199],[10,"read_le_int","","",199],[10,"read_be_uint","","",199],[10,"read_be_int","","",199],[10,"read_be_u64","","",199],[10,"read_be_u32","","",199],[10,"read_be_u16","","",199],[10,"read_be_i64","","",199],[10,"read_be_i32","","",199],[10,"read_be_i16","","",199],[10,"read_be_f64","","",199],[10,"read_be_f32","","",199],[10,"read_le_u64","","",199],[10,"read_le_u32","","",199],[10,"read_le_u16","","",199],[10,"read_le_i64","","",199],[10,"read_le_i32","","",199],[10,"read_le_i16","","",199],[10,"read_le_f64","","",199],[10,"read_le_f32","","",199],[10,"read_u8","","",199],[10,"read_i8","","",199],[10,"by_ref","","",199],[10,"fill_buf","","",199],[10,"consume","","",199],[10,"read_line","","",199],[10,"lines","","",199],[10,"read_until","","",199],[10,"read_char","","",199],[10,"chars","","",199],[10,"read","","",200],[10,"read_at_least","","",200],[10,"read_byte","","",200],[10,"push","","",200],[10,"push_at_least","","",200],[10,"read_exact","","",200],[10,"read_to_end","","",200],[10,"read_to_string","","",200],[10,"bytes","","",200],[10,"read_le_uint_n","","",200],[10,"read_le_int_n","","",200],[10,"read_be_uint_n","","",200],[10,"read_be_int_n","","",200],[10,"read_le_uint","","",200],[10,"read_le_int","","",200],[10,"read_be_uint","","",200],[10,"read_be_int","","",200],[10,"read_be_u64","","",200],[10,"read_be_u32","","",200],[10,"read_be_u16","","",200],[10,"read_be_i64","","",200],[10,"read_be_i32","","",200],[10,"read_be_i16","","",200],[10,"read_be_f64","","",200],[10,"read_be_f32","","",200],[10,"read_le_u64","","",200],[10,"read_le_u32","","",200],[10,"read_le_u16","","",200],[10,"read_le_i64","","",200],[10,"read_le_i32","","",200],[10,"read_le_i16","","",200],[10,"read_le_f64","","",200],[10,"read_le_f32","","",200],[10,"read_u8","","",200],[10,"read_i8","","",200],[10,"by_ref","","",200],[10,"fill_buf","","",200],[10,"consume","","",200],[10,"read_line","","",200],[10,"lines","","",200],[10,"read_until","","",200],[10,"read_char","","",200],[10,"chars","","",200],[10,"new","","Creates a new `MultiWriter`",201],[10,"write","","",201],[10,"flush","","",201],[10,"flush","","",201],[10,"write_fmt","","",201],[10,"write_str","","",201],[10,"write_line","","",201],[10,"write_char","","",201],[10,"write_int","","",201],[10,"write_uint","","",201],[10,"write_le_uint","","",201],[10,"write_le_int","","",201],[10,"write_be_uint","","",201],[10,"write_be_int","","",201],[10,"write_be_u64","","",201],[10,"write_be_u32","","",201],[10,"write_be_u16","","",201],[10,"write_be_i64","","",201],[10,"write_be_i32","","",201],[10,"write_be_i16","","",201],[10,"write_be_f64","","",201],[10,"write_be_f32","","",201],[10,"write_le_u64","","",201],[10,"write_le_u32","","",201],[10,"write_le_u16","","",201],[10,"write_le_i64","","",201],[10,"write_le_i32","","",201],[10,"write_le_i16","","",201],[10,"write_le_f64","","",201],[10,"write_le_f32","","",201],[10,"write_u8","","",201],[10,"write_i8","","",201],[10,"by_ref","","",201],[10,"new","","Creates a new `ChainedReader`",202],[10,"read","","",202],[10,"read_at_least","","",202],[10,"read_byte","","",202],[10,"push","","",202],[10,"push_at_least","","",202],[10,"read_exact","","",202],[10,"read_to_end","","",202],[10,"read_to_string","","",202],[10,"bytes","","",202],[10,"read_le_uint_n","","",202],[10,"read_le_int_n","","",202],[10,"read_be_uint_n","","",202],[10,"read_be_int_n","","",202],[10,"read_le_uint","","",202],[10,"read_le_int","","",202],[10,"read_be_uint","","",202],[10,"read_be_int","","",202],[10,"read_be_u64","","",202],[10,"read_be_u32","","",202],[10,"read_be_u16","","",202],[10,"read_be_i64","","",202],[10,"read_be_i32","","",202],[10,"read_be_i16","","",202],[10,"read_be_f64","","",202],[10,"read_be_f32","","",202],[10,"read_le_u64","","",202],[10,"read_le_u32","","",202],[10,"read_le_u16","","",202],[10,"read_le_i64","","",202],[10,"read_le_i32","","",202],[10,"read_le_i16","","",202],[10,"read_le_f64","","",202],[10,"read_le_f32","","",202],[10,"read_u8","","",202],[10,"read_i8","","",202],[10,"by_ref","","",202],[10,"new","","Creates a new `TeeReader`",203],[10,"unwrap","","Consumes the `TeeReader`, returning the underlying `Reader` and\n`Writer`.",203],[10,"read","","",203],[10,"read_at_least","","",203],[10,"read_byte","","",203],[10,"push","","",203],[10,"push_at_least","","",203],[10,"read_exact","","",203],[10,"read_to_end","","",203],[10,"read_to_string","","",203],[10,"bytes","","",203],[10,"read_le_uint_n","","",203],[10,"read_le_int_n","","",203],[10,"read_be_uint_n","","",203],[10,"read_be_int_n","","",203],[10,"read_le_uint","","",203],[10,"read_le_int","","",203],[10,"read_be_uint","","",203],[10,"read_be_int","","",203],[10,"read_be_u64","","",203],[10,"read_be_u32","","",203],[10,"read_be_u16","","",203],[10,"read_be_i64","","",203],[10,"read_be_i32","","",203],[10,"read_be_i16","","",203],[10,"read_be_f64","","",203],[10,"read_be_f32","","",203],[10,"read_le_u64","","",203],[10,"read_le_u32","","",203],[10,"read_le_u16","","",203],[10,"read_le_i64","","",203],[10,"read_le_i32","","",203],[10,"read_le_i16","","",203],[10,"read_le_f64","","",203],[10,"read_le_f32","","",203],[10,"read_u8","","",203],[10,"read_i8","","",203],[10,"by_ref","","",203],[10,"new","","Creates a new `IterReader` which will read from the specified\n`Iterator`.",204],[10,"read","","",204],[10,"read_at_least","","",204],[10,"read_byte","","",204],[10,"push","","",204],[10,"push_at_least","","",204],[10,"read_exact","","",204],[10,"read_to_end","","",204],[10,"read_to_string","","",204],[10,"bytes","","",204],[10,"read_le_uint_n","","",204],[10,"read_le_int_n","","",204],[10,"read_be_uint_n","","",204],[10,"read_be_int_n","","",204],[10,"read_le_uint","","",204],[10,"read_le_int","","",204],[10,"read_be_uint","","",204],[10,"read_be_int","","",204],[10,"read_be_u64","","",204],[10,"read_be_u32","","",204],[10,"read_be_u16","","",204],[10,"read_be_i64","","",204],[10,"read_be_i32","","",204],[10,"read_be_i16","","",204],[10,"read_be_f64","","",204],[10,"read_be_f32","","",204],[10,"read_le_u64","","",204],[10,"read_le_u32","","",204],[10,"read_le_u16","","",204],[10,"read_le_i64","","",204],[10,"read_le_i32","","",204],[10,"read_le_i16","","",204],[10,"read_le_f64","","",204],[10,"read_le_f32","","",204],[10,"read_u8","","",204],[10,"read_i8","","",204],[10,"by_ref","","",204],[10,"clone","std::io","",205],[10,"clone_from","","",205],[10,"assert_receiver_is_total_eq","","",205],[10,"eq","","",205],[10,"ne","","",205],[10,"ne","","",205],[10,"from_errno","","Convert an `errno` value into an `IoError`.",205],[10,"last_error","","Retrieve the last error to occur as a (detailed) IoError.",205],[10,"fmt","","",205],[10,"fmt","","",206],[10,"clone","","",206],[10,"clone_from","","",206],[10,"assert_receiver_is_total_eq","","",206],[10,"eq","","",206],[10,"ne","","",206],[10,"ne","","",206],[10,"update_err","core::result","",168],[10,"update_detail","","",168],[10,"update_desc","","",168],[10,"read","alloc::boxed","",24],[10,"read_at_least","","",24],[10,"read_byte","","",24],[10,"push","","",24],[10,"push_at_least","","",24],[10,"read_exact","","",24],[10,"read_to_end","","",24],[10,"read_to_string","","",24],[10,"bytes","","",24],[10,"read_le_uint_n","","",24],[10,"read_le_int_n","","",24],[10,"read_be_uint_n","","",24],[10,"read_be_int_n","","",24],[10,"read_le_uint","","",24],[10,"read_le_int","","",24],[10,"read_be_uint","","",24],[10,"read_be_int","","",24],[10,"read_be_u64","","",24],[10,"read_be_u32","","",24],[10,"read_be_u16","","",24],[10,"read_be_i64","","",24],[10,"read_be_i32","","",24],[10,"read_be_i16","","",24],[10,"read_be_f64","","",24],[10,"read_be_f32","","",24],[10,"read_le_u64","","",24],[10,"read_le_u32","","",24],[10,"read_le_u16","","",24],[10,"read_le_i64","","",24],[10,"read_le_i32","","",24],[10,"read_le_i16","","",24],[10,"read_le_f64","","",24],[10,"read_le_f32","","",24],[10,"read_u8","","",24],[10,"read_i8","","",24],[10,"by_ref","","",24],[10,"read","std::io","",207],[10,"read_at_least","","",207],[10,"read_byte","","",207],[10,"push","","",207],[10,"push_at_least","","",207],[10,"read_exact","","",207],[10,"read_to_end","","",207],[10,"read_to_string","","",207],[10,"bytes","","",207],[10,"read_le_uint_n","","",207],[10,"read_le_int_n","","",207],[10,"read_be_uint_n","","",207],[10,"read_be_int_n","","",207],[10,"read_le_uint","","",207],[10,"read_le_int","","",207],[10,"read_be_uint","","",207],[10,"read_be_int","","",207],[10,"read_be_u64","","",207],[10,"read_be_u32","","",207],[10,"read_be_u16","","",207],[10,"read_be_i64","","",207],[10,"read_be_i32","","",207],[10,"read_be_i16","","",207],[10,"read_be_f64","","",207],[10,"read_be_f32","","",207],[10,"read_le_u64","","",207],[10,"read_le_u32","","",207],[10,"read_le_u16","","",207],[10,"read_le_i64","","",207],[10,"read_le_i32","","",207],[10,"read_le_i16","","",207],[10,"read_le_f64","","",207],[10,"read_le_f32","","",207],[10,"read_u8","","",207],[10,"read_i8","","",207],[10,"by_ref","","",207],[10,"fill_buf","","",207],[10,"consume","","",207],[10,"read_line","","",207],[10,"lines","","",207],[10,"read_until","","",207],[10,"read_char","","",207],[10,"chars","","",207],[10,"write","alloc::boxed","",24],[10,"flush","","",24],[10,"flush","","",24],[10,"write_fmt","","",24],[10,"write_str","","",24],[10,"write_line","","",24],[10,"write_char","","",24],[10,"write_int","","",24],[10,"write_uint","","",24],[10,"write_le_uint","","",24],[10,"write_le_int","","",24],[10,"write_be_uint","","",24],[10,"write_be_int","","",24],[10,"write_be_u64","","",24],[10,"write_be_u32","","",24],[10,"write_be_u16","","",24],[10,"write_be_i64","","",24],[10,"write_be_i32","","",24],[10,"write_be_i16","","",24],[10,"write_be_f64","","",24],[10,"write_be_f32","","",24],[10,"write_le_u64","","",24],[10,"write_le_u32","","",24],[10,"write_le_u16","","",24],[10,"write_le_i64","","",24],[10,"write_le_i32","","",24],[10,"write_le_i16","","",24],[10,"write_le_f64","","",24],[10,"write_le_f32","","",24],[10,"write_u8","","",24],[10,"write_i8","","",24],[10,"by_ref","","",24],[10,"write","std::io","",208],[10,"flush","","",208],[10,"flush","","",208],[10,"write_fmt","","",208],[10,"write_str","","",208],[10,"write_line","","",208],[10,"write_char","","",208],[10,"write_int","","",208],[10,"write_uint","","",208],[10,"write_le_uint","","",208],[10,"write_le_int","","",208],[10,"write_be_uint","","",208],[10,"write_be_int","","",208],[10,"write_be_u64","","",208],[10,"write_be_u32","","",208],[10,"write_be_u16","","",208],[10,"write_be_i64","","",208],[10,"write_be_i32","","",208],[10,"write_be_i16","","",208],[10,"write_be_f64","","",208],[10,"write_be_f32","","",208],[10,"write_le_u64","","",208],[10,"write_le_u32","","",208],[10,"write_le_u16","","",208],[10,"write_le_i64","","",208],[10,"write_le_i32","","",208],[10,"write_le_i16","","",208],[10,"write_le_f64","","",208],[10,"write_le_f32","","",208],[10,"write_u8","","",208],[10,"write_i8","","",208],[10,"by_ref","","",208],[10,"next","","",209],[10,"size_hint","","",209],[10,"chain","","",209],[10,"zip","","",209],[10,"map","","",209],[10,"filter","","",209],[10,"filter_map","","",209],[10,"enumerate","","",209],[10,"peekable","","",209],[10,"skip_while","","",209],[10,"take_while","","",209],[10,"skip","","",209],[10,"take","","",209],[10,"scan","","",209],[10,"flat_map","","",209],[10,"fuse","","",209],[10,"inspect","","",209],[10,"by_ref","","",209],[10,"advance","","",209],[10,"collect","","",209],[10,"nth","","",209],[10,"last","","",209],[10,"fold","","",209],[10,"count","","",209],[10,"all","","",209],[10,"any","","",209],[10,"find","","",209],[10,"position","","",209],[10,"max_by","","",209],[10,"min_by","","",209],[10,"next","","",210],[10,"size_hint","","",210],[10,"chain","","",210],[10,"zip","","",210],[10,"map","","",210],[10,"filter","","",210],[10,"filter_map","","",210],[10,"enumerate","","",210],[10,"peekable","","",210],[10,"skip_while","","",210],[10,"take_while","","",210],[10,"skip","","",210],[10,"take","","",210],[10,"scan","","",210],[10,"flat_map","","",210],[10,"fuse","","",210],[10,"inspect","","",210],[10,"by_ref","","",210],[10,"advance","","",210],[10,"collect","","",210],[10,"nth","","",210],[10,"last","","",210],[10,"fold","","",210],[10,"count","","",210],[10,"all","","",210],[10,"any","","",210],[10,"find","","",210],[10,"position","","",210],[10,"max_by","","",210],[10,"min_by","","",210],[10,"next","","",211],[10,"size_hint","","",211],[10,"chain","","",211],[10,"zip","","",211],[10,"map","","",211],[10,"filter","","",211],[10,"filter_map","","",211],[10,"enumerate","","",211],[10,"peekable","","",211],[10,"skip_while","","",211],[10,"take_while","","",211],[10,"skip","","",211],[10,"take","","",211],[10,"scan","","",211],[10,"flat_map","","",211],[10,"fuse","","",211],[10,"inspect","","",211],[10,"by_ref","","",211],[10,"advance","","",211],[10,"collect","","",211],[10,"nth","","",211],[10,"last","","",211],[10,"fold","","",211],[10,"count","","",211],[10,"all","","",211],[10,"any","","",211],[10,"find","","",211],[10,"position","","",211],[10,"max_by","","",211],[10,"min_by","","",211],[10,"hash","","",212],[10,"fmt","","",212],[10,"eq","","",212],[10,"ne","","",212],[10,"ne","","",212],[10,"hash","","",213],[10,"hash","","",214],[10,"hash","","",215],[10,"cmp","","",215],[10,"partial_cmp","","",215],[10,"lt","","",215],[10,"le","","",215],[10,"gt","","",215],[10,"ge","","",215],[10,"lt","","",215],[10,"le","","",215],[10,"gt","","",215],[10,"ge","","",215],[10,"clone","","",215],[10,"clone_from","","",215],[10,"assert_receiver_is_total_eq","","",215],[10,"eq","","",215],[10,"ne","","",215],[10,"ne","","",215],[10,"empty","","Returns an empty set of flags.",215],[10,"all","","Returns the set containing all flags.",215],[10,"bits","","Returns the raw value of the flags currently stored.",215],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",215],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",215],[10,"is_empty","","Returns `true` if no flags are currently stored.",215],[10,"is_all","","Returns `true` if all flags are currently set.",215],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",215],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",215],[10,"insert","","Inserts the specified flags in-place.",215],[10,"remove","","Removes the specified flags in-place.",215],[10,"bitor","","Returns the union of the two sets of flags.",215],[10,"bitand","","Returns the intersection between the two sets of flags.",215],[10,"sub","","Returns the set difference of the two sets of flags.",215],[10,"not","","Returns the complement of this set of flags.",215],[10,"default","","",215],[10,"fmt","","",215],[10,"clone","std::path::posix","",173],[10,"clone_from","","",173],[10,"eq","","",173],[10,"ne","","",173],[10,"assert_receiver_is_total_eq","","",173],[10,"partial_cmp","","",173],[10,"lt","","",173],[10,"le","","",173],[10,"gt","","",173],[10,"ge","","",173],[10,"cmp","","",173],[10,"from_str","","",173],[10,"to_c_str","","",173],[10,"to_c_str_unchecked","","",173],[10,"with_c_str","","",173],[10,"with_c_str_unchecked","","",173],[10,"hash","","",173],[10,"container_as_bytes","","",173],[10,"container_into_owned_bytes","","",173],[10,"container_into_owned_bytes","","",173],[10,"container_as_str","","",173],[10,"is_str","","",173],[10,"new_unchecked","","",173],[10,"set_filename_unchecked","","",173],[10,"push_unchecked","","",173],[10,"as_vec","","",173],[10,"into_vec","","",173],[10,"dirname","","",173],[10,"filename","","",173],[10,"pop","","",173],[10,"root_path","","",173],[10,"is_absolute","","",173],[10,"is_ancestor_of","","",173],[10,"path_relative_from","","",173],[10,"ends_with_path","","",173],[10,"new","","",173],[10,"new_opt","","",173],[10,"as_str","","",173],[10,"display","","",173],[10,"filename_display","","",173],[10,"dirname_str","","",173],[10,"filename_str","","",173],[10,"filestem","","",173],[10,"filestem_str","","",173],[10,"extension","","",173],[10,"extension_str","","",173],[10,"set_filename","","",173],[10,"set_extension","","",173],[10,"with_filename","","",173],[10,"with_extension","","",173],[10,"dir_path","","",173],[10,"push","","",173],[10,"push_many","","",173],[10,"join","","",173],[10,"join_many","","",173],[10,"is_relative","","",173],[10,"new","","Returns a new Path from a byte vector or string",173],[10,"new_opt","","Returns a new Path from a byte vector or string, if possible",173],[10,"components","","Returns an iterator that yields each component of the path in turn.\nDoes not distinguish between absolute and relative paths, e.g.\n/a/b/c and a/b/c yield the same set of components.\nA path of \"/\" yields no components. A path of \".\" yields one component.",173],[10,"str_components","","Returns an iterator that yields each component of the path as Option<&str>.\nSee components() for details.",173],[10,"clone","std::path::windows","",216],[10,"clone_from","","",216],[10,"eq","","",216],[10,"ne","","",216],[10,"assert_receiver_is_total_eq","","",216],[10,"partial_cmp","","",216],[10,"lt","","",216],[10,"le","","",216],[10,"gt","","",216],[10,"ge","","",216],[10,"cmp","","",216],[10,"from_str","","",216],[10,"to_c_str","","",216],[10,"to_c_str_unchecked","","",216],[10,"with_c_str","","",216],[10,"with_c_str_unchecked","","",216],[10,"hash","","",216],[10,"container_as_bytes","","",216],[10,"container_into_owned_bytes","","",216],[10,"container_as_str","","",216],[10,"is_str","","",216],[10,"container_into_owned_bytes","","",216],[10,"container_as_str","","",216],[10,"is_str","","",216],[10,"new_unchecked","","See `GenericPathUnsafe::from_vec_unchecked`.",216],[10,"set_filename_unchecked","","See `GenericPathUnsafe::set_filename_unchecked`.",216],[10,"push_unchecked","","See `GenericPathUnsafe::push_unchecked`.",216],[10,"new_opt","","",216],[10,"as_str","","See `GenericPath::as_str` for info.\nAlways returns a `Some` value.",216],[10,"as_vec","","",216],[10,"into_vec","","",216],[10,"dirname","","",216],[10,"dirname_str","","See `GenericPath::dirname_str` for info.\nAlways returns a `Some` value.",216],[10,"filename","","",216],[10,"filename_str","","See `GenericPath::filename_str` for info.\nAlways returns a `Some` value if `filename` returns a `Some` value.",216],[10,"filestem_str","","See `GenericPath::filestem_str` for info.\nAlways returns a `Some` value if `filestem` returns a `Some` value.",216],[10,"extension_str","","",216],[10,"dir_path","","",216],[10,"pop","","",216],[10,"root_path","","",216],[10,"is_absolute","","See `GenericPath::is_absolute` for info.",216],[10,"is_relative","","",216],[10,"is_ancestor_of","","",216],[10,"path_relative_from","","",216],[10,"ends_with_path","","",216],[10,"new","","",216],[10,"new_opt","","",216],[10,"as_str","","",216],[10,"display","","",216],[10,"filename_display","","",216],[10,"dirname_str","","",216],[10,"filename_str","","",216],[10,"filestem","","",216],[10,"filestem_str","","",216],[10,"extension","","",216],[10,"extension_str","","",216],[10,"set_filename","","",216],[10,"set_extension","","",216],[10,"with_filename","","",216],[10,"with_extension","","",216],[10,"dir_path","","",216],[10,"push","","",216],[10,"push_many","","",216],[10,"join","","",216],[10,"join_many","","",216],[10,"is_relative","","",216],[10,"new","","Returns a new `Path` from a `BytesContainer`.",216],[10,"new_opt","","Returns a new `Some(Path)` from a `BytesContainer`.",216],[10,"str_components","","Returns an iterator that yields each component of the path in turn as a Option<&str>.\nEvery component is guaranteed to be Some.\nDoes not yield the path prefix (including server/share components in UNC paths).\nDoes not distinguish between volume-relative and relative paths, e.g.\n\\a\\b\\c and a\\b\\c.\nDoes not distinguish between absolute and cwd-relative paths, e.g.\nC:\\foo and C:foo.",216],[10,"components","","Returns an iterator that yields each component of the path in turn as a &[u8].\nSee str_components() for details.",216],[10,"clone","","",217],[10,"clone_from","","",217],[10,"eq","","",217],[10,"ne","","",217],[10,"ne","","",217],[10,"fmt","std::path","",218],[10,"as_maybe_owned","","Returns the path as a possibly-owned string.",218],[10,"container_as_bytes","collections::string","",59],[10,"container_as_str","","",59],[10,"is_str","","",59],[10,"container_into_owned_bytes","","",59],[10,"container_as_str","","",59],[10,"is_str","","",59],[10,"container_as_bytes","collections::vec","",60],[10,"container_into_owned_bytes","","",60],[10,"container_into_owned_bytes","","",60],[10,"container_as_str","","",60],[10,"is_str","","",60],[10,"container_as_bytes","rustrt::c_str","",219],[10,"container_into_owned_bytes","","",219],[10,"container_as_str","","",219],[10,"is_str","","",219],[10,"container_as_bytes","collections::str","",220],[10,"container_as_str","","",220],[10,"is_str","","",220],[10,"container_into_owned_bytes","","",220],[10,"container_as_str","","",220],[10,"is_str","","",220],[10,"write","core::fmt","",221],[10,"flush","","",221],[10,"write_fmt","","",221],[10,"write_str","","",221],[10,"write_line","","",221],[10,"write_char","","",221],[10,"write_int","","",221],[10,"write_uint","","",221],[10,"write_le_uint","","",221],[10,"write_le_int","","",221],[10,"write_be_uint","","",221],[10,"write_be_int","","",221],[10,"write_be_u64","","",221],[10,"write_be_u32","","",221],[10,"write_be_u16","","",221],[10,"write_be_i64","","",221],[10,"write_be_i32","","",221],[10,"write_be_i16","","",221],[10,"write_be_f64","","",221],[10,"write_be_f32","","",221],[10,"write_le_u64","","",221],[10,"write_le_u32","","",221],[10,"write_le_u16","","",221],[10,"write_le_i64","","",221],[10,"write_le_i32","","",221],[10,"write_le_i16","","",221],[10,"write_le_f64","","",221],[10,"write_le_f32","","",221],[10,"write_u8","","",221],[10,"write_i8","","",221],[10,"by_ref","","",221],[10,"eq","core::fmt::rt","",222],[10,"ne","","",222],[10,"ne","","",222],[10,"new","rustrt::mutex","Creates a new mutex.",223],[10,"lock","","Acquires this lock. This assumes that the current thread does not\nalready hold the lock.",223],[10,"trylock","","Attempts to acquire the lock. The value returned is `Some` if\nthe attempt succeeded.",223],[10,"lock_noguard","","Acquire the lock without creating a `LockGuard`.",223],[10,"trylock_noguard","","Attempts to acquire the lock without creating a\n`LockGuard`. The value returned is whether the lock was\nacquired or not.",223],[10,"unlock_noguard","","Unlocks the lock. This assumes that the current thread already holds the\nlock.",223],[10,"wait_noguard","","Block on the internal condition variable.",223],[10,"signal_noguard","","Signals a thread in `wait` to wake up",223],[10,"destroy","","This function is especially unsafe because there are no guarantees made\nthat no other thread is currently holding the lock or waiting on the\ncondition variable contained inside.",223],[10,"new","","Creates a new mutex.",224],[10,"lock","","Acquires this lock. This assumes that the current thread does not\nalready hold the lock.",224],[10,"trylock","","Attempts to acquire the lock. The value returned is `Some` if\nthe attempt succeeded.",224],[10,"lock_noguard","","Acquire the lock without creating a `LockGuard`.",224],[10,"trylock_noguard","","Attempts to acquire the lock without creating a\n`LockGuard`. The value returned is whether the lock was\nacquired or not.",224],[10,"unlock_noguard","","Unlocks the lock. This assumes that the current thread already holds the\nlock.",224],[10,"wait_noguard","","Block on the internal condition variable.",224],[10,"signal_noguard","","Signals a thread in `wait` to wake up",224],[10,"drop","","",224],[10,"wait","","Block on the internal condition variable.",225],[10,"signal","","Signals a thread in `wait` to wake up.",225],[10,"drop","","",225],[10,"new","rustrt::mutex::imp","",226],[10,"lock","","",226],[10,"unlock","","",226],[10,"signal","","",226],[10,"wait","","",226],[10,"trylock","","",226],[10,"destroy","","",226],[10,"eq","rustrt::task","",227],[10,"ne","","",227],[10,"ne","","",227],[10,"new","","Creates a new uninitialized task.",228],[10,"run","","Consumes ownership of a task, runs some code, and returns the task back.",228],[10,"destroy","","Destroy all associated resources of this task.",228],[10,"is_destroyed","","Queries whether this can be destroyed or not.",228],[10,"put_runtime","","Inserts a runtime object into this task, transferring ownership to the\ntask. It is illegal to replace a previous runtime object in this task\nwith this argument.",228],[10,"take_runtime","","Removes the runtime from this task, transferring ownership to the\ncaller.",228],[10,"maybe_take_runtime","","Attempts to extract the runtime as a specific type. If the runtime does\nnot have the provided type, then the runtime is not removed. If the\nruntime does have the specified type, then it is removed and returned\n(transfer of ownership).",228],[10,"spawn_sibling","","Spawns a sibling to this task. The newly spawned task is configured with\nthe `opts` structure and will run `f` as the body of its code.",228],[10,"deschedule","","Deschedules the current task, invoking `f` `amt` times. It is not\nrecommended to use this function directly, but rather communication\nprimitives in `std::comm` should be used.",228],[10,"reawaken","","Wakes up a previously blocked task, optionally specifying whether the\ncurrent task can accept a change in scheduling. This function can only\nbe called on tasks that were previously blocked in `deschedule`.",228],[10,"yield_now","","Yields control of this task to another task. This function will\neventually return, but possibly not immediately. This is used as an\nopportunity to allow other tasks a chance to run.",228],[10,"maybe_yield","","Similar to `yield_now`, except that this function may immediately return\nwithout yielding (depending on what the runtime decides to do).",228],[10,"local_io","","Acquires a handle to the I/O factory that this task contains, normally\nstored in the task's runtime. This factory may not always be available,\nwhich is why the return type is `Option`",228],[10,"stack_bounds","","Returns the stack bounds for this task in (lo, hi) format. The stack\nbounds may not be known for all tasks, so the return value may be\n`None`.",228],[10,"can_block","","Returns whether it is legal for this task to block the OS thread that it\nis running on.",228],[10,"drop","","Consume this task, flagging it as a candidate for destruction.",228],[10,"drop","","",228],[10,"new","","",229],[10,"next","","",230],[10,"size_hint","","",230],[10,"chain","","",230],[10,"zip","","",230],[10,"map","","",230],[10,"filter","","",230],[10,"filter_map","","",230],[10,"enumerate","","",230],[10,"peekable","","",230],[10,"skip_while","","",230],[10,"take_while","","",230],[10,"skip","","",230],[10,"take","","",230],[10,"scan","","",230],[10,"flat_map","","",230],[10,"fuse","","",230],[10,"inspect","","",230],[10,"by_ref","","",230],[10,"advance","","",230],[10,"collect","","",230],[10,"nth","","",230],[10,"last","","",230],[10,"fold","","",230],[10,"count","","",230],[10,"all","","",230],[10,"any","","",230],[10,"find","","",230],[10,"position","","",230],[10,"max_by","","",230],[10,"min_by","","",230],[10,"wake","","Returns Some if the task was successfully woken; None if already killed.",231],[10,"reawaken","","Reawakens this task if ownership is acquired. If finer-grained control\nis desired, use `wake` instead.",231],[10,"trash","","",231],[10,"block","","Create a blocked task, unless the task was already killed.",231],[10,"make_selectable","","Converts one blocked task handle to a list of many handles to the same.",231],[10,"cast_to_uint","","Convert to an unsafe uint value. Useful for storing in a pipe's state\nflag.",231],[10,"cast_from_uint","","Convert from an unsafe uint value. Useful for retrieving a pipe's state\nflag.",231],[10,"new","","",232],[10,"new","rustrt::unwind","",233],[10,"unwinding","","",233],[10,"put","rustrt::task","",228],[10,"take","","",228],[10,"try_take","","",228],[10,"exists","","",228],[10,"borrow","","",228],[10,"unsafe_take","","",228],[10,"unsafe_borrow","","",228],[10,"try_unsafe_borrow","","",228],[10,"start","rustrt::thread","Starts execution of a new OS thread.",234],[10,"start_stack","","Performs the same functionality as `start`, but specifies an explicit\nstack size for the new thread.",234],[10,"spawn","","This will spawn a new thread, but it will not wait for the thread to\nfinish, nor is it possible to wait for the thread to finish.",234],[10,"spawn_stack","","Performs the same functionality as `spawn`, but explicitly specifies a\nstack size for the new thread.",234],[10,"yield_now","","Relinquishes the CPU slot that this OS-thread is currently using,\nallowing another thread to run for awhile.",234],[10,"join","","Wait for this thread to finish, returning the result of the thread's\ncalculation.",234],[10,"drop","","",234],[10,"drop","rustrt::bookkeeping","",235],[10,"new","rustrt::exclusive","Creates a new `Exclusive` which will protect the data provided.",236],[10,"lock","","Acquires this lock, returning a guard which the data is accessed through\nand from which that lock will be unlocked.",236],[10,"signal","","",237],[10,"wait","","",237],[10,"deref","","",237],[10,"deref_mut","","",237],[10,"drop","rustrt::rtio","",238],[10,"borrow","","Returns the local I/O: either the local scheduler's I/O services or\nthe native I/O services.",238],[10,"maybe_raise","","",238],[10,"new","","",238],[10,"get","","Returns the underlying I/O factory as a trait reference.",238],[10,"assert_receiver_is_total_eq","","",239],[10,"eq","","",239],[10,"ne","","",239],[10,"ne","","",239],[10,"fmt","","",239],[10,"assert_receiver_is_total_eq","","",240],[10,"eq","","",240],[10,"ne","","",240],[10,"ne","","",240],[10,"write","rustrt::util","",241],[10,"flush","","",241],[10,"write_fmt","","",241],[10,"write_str","","",241],[10,"write_line","","",241],[10,"write_char","","",241],[10,"write_int","","",241],[10,"write_uint","","",241],[10,"write_le_uint","","",241],[10,"write_le_int","","",241],[10,"write_be_uint","","",241],[10,"write_be_int","","",241],[10,"write_be_u64","","",241],[10,"write_be_u32","","",241],[10,"write_be_u16","","",241],[10,"write_be_i64","","",241],[10,"write_be_i32","","",241],[10,"write_be_i16","","",241],[10,"write_be_f64","","",241],[10,"write_be_f32","","",241],[10,"write_le_u64","","",241],[10,"write_le_u32","","",241],[10,"write_le_u16","","",241],[10,"write_le_i64","","",241],[10,"write_le_i32","","",241],[10,"write_le_i16","","",241],[10,"write_le_f64","","",241],[10,"write_le_f32","","",241],[10,"write_u8","","",241],[10,"write_i8","","",241],[10,"by_ref","","",241],[10,"rposition","core::iter","",242],[10,"len","","",242],[10,"rposition","","",243],[10,"len","","",243],[10,"rposition","","",244],[10,"len","","",244],[10,"rposition","","",245],[10,"len","","",245],[10,"rposition","","",246],[10,"len","","",246],[10,"clone","","",244],[10,"clone_from","","",244],[10,"next","","",244],[10,"size_hint","","",244],[10,"size_hint","","",244],[10,"chain","","",244],[10,"zip","","",244],[10,"map","","",244],[10,"filter","","",244],[10,"filter_map","","",244],[10,"enumerate","","",244],[10,"peekable","","",244],[10,"skip_while","","",244],[10,"take_while","","",244],[10,"skip","","",244],[10,"take","","",244],[10,"scan","","",244],[10,"flat_map","","",244],[10,"fuse","","",244],[10,"inspect","","",244],[10,"by_ref","","",244],[10,"advance","","",244],[10,"collect","","",244],[10,"nth","","",244],[10,"last","","",244],[10,"fold","","",244],[10,"count","","",244],[10,"all","","",244],[10,"any","","",244],[10,"find","","",244],[10,"position","","",244],[10,"max_by","","",244],[10,"min_by","","",244],[10,"next_back","","",244],[10,"rev","","",244],[10,"indexable","","",244],[10,"idx","","",244],[10,"next","","",247],[10,"size_hint","","",247],[10,"size_hint","","",247],[10,"chain","","",247],[10,"zip","","",247],[10,"map","","",247],[10,"filter","","",247],[10,"filter_map","","",247],[10,"enumerate","","",247],[10,"peekable","","",247],[10,"skip_while","","",247],[10,"take_while","","",247],[10,"skip","","",247],[10,"take","","",247],[10,"scan","","",247],[10,"flat_map","","",247],[10,"fuse","","",247],[10,"inspect","","",247],[10,"by_ref","","",247],[10,"advance","","",247],[10,"collect","","",247],[10,"nth","","",247],[10,"last","","",247],[10,"fold","","",247],[10,"count","","",247],[10,"all","","",247],[10,"any","","",247],[10,"find","","",247],[10,"position","","",247],[10,"max_by","","",247],[10,"min_by","","",247],[10,"next_back","","",247],[10,"rev","","",247],[10,"fmt","","",248],[10,"eq","","",248],[10,"ne","","",248],[10,"ne","","",248],[10,"clone","","",248],[10,"clone_from","","",248],[10,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",248],[10,"clone","","",249],[10,"clone_from","","",249],[10,"next","","",249],[10,"size_hint","","",249],[10,"size_hint","","",249],[10,"chain","","",249],[10,"zip","","",249],[10,"map","","",249],[10,"filter","","",249],[10,"filter_map","","",249],[10,"enumerate","","",249],[10,"peekable","","",249],[10,"skip_while","","",249],[10,"take_while","","",249],[10,"skip","","",249],[10,"take","","",249],[10,"scan","","",249],[10,"flat_map","","",249],[10,"fuse","","",249],[10,"inspect","","",249],[10,"by_ref","","",249],[10,"advance","","",249],[10,"collect","","",249],[10,"nth","","",249],[10,"last","","",249],[10,"fold","","",249],[10,"count","","",249],[10,"all","","",249],[10,"any","","",249],[10,"find","","",249],[10,"position","","",249],[10,"max_by","","",249],[10,"min_by","","",249],[10,"indexable","","",249],[10,"idx","","",249],[10,"clone","","",250],[10,"clone_from","","",250],[10,"next","","",250],[10,"size_hint","","",250],[10,"size_hint","","",250],[10,"chain","","",250],[10,"zip","","",250],[10,"map","","",250],[10,"filter","","",250],[10,"filter_map","","",250],[10,"enumerate","","",250],[10,"peekable","","",250],[10,"skip_while","","",250],[10,"take_while","","",250],[10,"skip","","",250],[10,"take","","",250],[10,"scan","","",250],[10,"flat_map","","",250],[10,"fuse","","",250],[10,"inspect","","",250],[10,"by_ref","","",250],[10,"advance","","",250],[10,"collect","","",250],[10,"nth","","",250],[10,"last","","",250],[10,"fold","","",250],[10,"count","","",250],[10,"all","","",250],[10,"any","","",250],[10,"find","","",250],[10,"position","","",250],[10,"max_by","","",250],[10,"min_by","","",250],[10,"next_back","","",250],[10,"rev","","",250],[10,"indexable","","",250],[10,"idx","","",250],[10,"clone","","",246],[10,"clone_from","","",246],[10,"next","","",246],[10,"size_hint","","",246],[10,"size_hint","","",246],[10,"chain","","",246],[10,"zip","","",246],[10,"map","","",246],[10,"filter","","",246],[10,"filter_map","","",246],[10,"enumerate","","",246],[10,"peekable","","",246],[10,"skip_while","","",246],[10,"take_while","","",246],[10,"skip","","",246],[10,"take","","",246],[10,"scan","","",246],[10,"flat_map","","",246],[10,"fuse","","",246],[10,"inspect","","",246],[10,"by_ref","","",246],[10,"advance","","",246],[10,"collect","","",246],[10,"nth","","",246],[10,"last","","",246],[10,"fold","","",246],[10,"count","","",246],[10,"all","","",246],[10,"any","","",246],[10,"find","","",246],[10,"position","","",246],[10,"max_by","","",246],[10,"min_by","","",246],[10,"next_back","","",246],[10,"rev","","",246],[10,"indexable","","",246],[10,"idx","","",246],[10,"next","","",245],[10,"size_hint","","",245],[10,"size_hint","","",245],[10,"chain","","",245],[10,"zip","","",245],[10,"map","","",245],[10,"filter","","",245],[10,"filter_map","","",245],[10,"enumerate","","",245],[10,"peekable","","",245],[10,"skip_while","","",245],[10,"take_while","","",245],[10,"skip","","",245],[10,"take","","",245],[10,"scan","","",245],[10,"flat_map","","",245],[10,"fuse","","",245],[10,"inspect","","",245],[10,"by_ref","","",245],[10,"advance","","",245],[10,"collect","","",245],[10,"nth","","",245],[10,"last","","",245],[10,"fold","","",245],[10,"count","","",245],[10,"all","","",245],[10,"any","","",245],[10,"find","","",245],[10,"position","","",245],[10,"max_by","","",245],[10,"min_by","","",245],[10,"next_back","","",245],[10,"rev","","",245],[10,"indexable","","",245],[10,"idx","","",245],[10,"next","","",251],[10,"size_hint","","",251],[10,"size_hint","","",251],[10,"chain","","",251],[10,"zip","","",251],[10,"map","","",251],[10,"filter","","",251],[10,"filter_map","","",251],[10,"enumerate","","",251],[10,"peekable","","",251],[10,"skip_while","","",251],[10,"take_while","","",251],[10,"skip","","",251],[10,"take","","",251],[10,"scan","","",251],[10,"flat_map","","",251],[10,"fuse","","",251],[10,"inspect","","",251],[10,"by_ref","","",251],[10,"advance","","",251],[10,"collect","","",251],[10,"nth","","",251],[10,"last","","",251],[10,"fold","","",251],[10,"count","","",251],[10,"all","","",251],[10,"any","","",251],[10,"find","","",251],[10,"position","","",251],[10,"max_by","","",251],[10,"min_by","","",251],[10,"next_back","","",251],[10,"rev","","",251],[10,"next","","",252],[10,"size_hint","","",252],[10,"size_hint","","",252],[10,"chain","","",252],[10,"zip","","",252],[10,"map","","",252],[10,"filter","","",252],[10,"filter_map","","",252],[10,"enumerate","","",252],[10,"peekable","","",252],[10,"skip_while","","",252],[10,"take_while","","",252],[10,"skip","","",252],[10,"take","","",252],[10,"scan","","",252],[10,"flat_map","","",252],[10,"fuse","","",252],[10,"inspect","","",252],[10,"by_ref","","",252],[10,"advance","","",252],[10,"collect","","",252],[10,"nth","","",252],[10,"last","","",252],[10,"fold","","",252],[10,"count","","",252],[10,"all","","",252],[10,"any","","",252],[10,"find","","",252],[10,"position","","",252],[10,"max_by","","",252],[10,"min_by","","",252],[10,"next_back","","",252],[10,"rev","","",252],[10,"clone","","",242],[10,"clone_from","","",242],[10,"next","","",242],[10,"size_hint","","",242],[10,"size_hint","","",242],[10,"chain","","",242],[10,"zip","","",242],[10,"map","","",242],[10,"filter","","",242],[10,"filter_map","","",242],[10,"enumerate","","",242],[10,"peekable","","",242],[10,"skip_while","","",242],[10,"take_while","","",242],[10,"skip","","",242],[10,"take","","",242],[10,"scan","","",242],[10,"flat_map","","",242],[10,"fuse","","",242],[10,"inspect","","",242],[10,"by_ref","","",242],[10,"advance","","",242],[10,"collect","","",242],[10,"nth","","",242],[10,"last","","",242],[10,"fold","","",242],[10,"count","","",242],[10,"all","","",242],[10,"any","","",242],[10,"find","","",242],[10,"position","","",242],[10,"max_by","","",242],[10,"min_by","","",242],[10,"next_back","","",242],[10,"rev","","",242],[10,"indexable","","",242],[10,"idx","","",242],[10,"next","","",253],[10,"size_hint","","",253],[10,"size_hint","","",253],[10,"chain","","",253],[10,"zip","","",253],[10,"map","","",253],[10,"filter","","",253],[10,"filter_map","","",253],[10,"enumerate","","",253],[10,"peekable","","",253],[10,"skip_while","","",253],[10,"take_while","","",253],[10,"skip","","",253],[10,"take","","",253],[10,"scan","","",253],[10,"flat_map","","",253],[10,"fuse","","",253],[10,"inspect","","",253],[10,"by_ref","","",253],[10,"advance","","",253],[10,"collect","","",253],[10,"nth","","",253],[10,"last","","",253],[10,"fold","","",253],[10,"count","","",253],[10,"all","","",253],[10,"any","","",253],[10,"find","","",253],[10,"position","","",253],[10,"max_by","","",253],[10,"min_by","","",253],[10,"peek","","Return a reference to the next element of the iterator with out advancing it,\nor None if the iterator is exhausted.",253],[10,"is_empty","","Check whether peekable iterator is empty or not.",253],[10,"next","","",254],[10,"size_hint","","",254],[10,"size_hint","","",254],[10,"chain","","",254],[10,"zip","","",254],[10,"map","","",254],[10,"filter","","",254],[10,"filter_map","","",254],[10,"enumerate","","",254],[10,"peekable","","",254],[10,"skip_while","","",254],[10,"take_while","","",254],[10,"skip","","",254],[10,"take","","",254],[10,"scan","","",254],[10,"flat_map","","",254],[10,"fuse","","",254],[10,"inspect","","",254],[10,"by_ref","","",254],[10,"advance","","",254],[10,"collect","","",254],[10,"nth","","",254],[10,"last","","",254],[10,"fold","","",254],[10,"count","","",254],[10,"all","","",254],[10,"any","","",254],[10,"find","","",254],[10,"position","","",254],[10,"max_by","","",254],[10,"min_by","","",254],[10,"next","","",255],[10,"size_hint","","",255],[10,"size_hint","","",255],[10,"chain","","",255],[10,"zip","","",255],[10,"map","","",255],[10,"filter","","",255],[10,"filter_map","","",255],[10,"enumerate","","",255],[10,"peekable","","",255],[10,"skip_while","","",255],[10,"take_while","","",255],[10,"skip","","",255],[10,"take","","",255],[10,"scan","","",255],[10,"flat_map","","",255],[10,"fuse","","",255],[10,"inspect","","",255],[10,"by_ref","","",255],[10,"advance","","",255],[10,"collect","","",255],[10,"nth","","",255],[10,"last","","",255],[10,"fold","","",255],[10,"count","","",255],[10,"all","","",255],[10,"any","","",255],[10,"find","","",255],[10,"position","","",255],[10,"max_by","","",255],[10,"min_by","","",255],[10,"clone","","",256],[10,"clone_from","","",256],[10,"next","","",256],[10,"size_hint","","",256],[10,"size_hint","","",256],[10,"chain","","",256],[10,"zip","","",256],[10,"map","","",256],[10,"filter","","",256],[10,"filter_map","","",256],[10,"enumerate","","",256],[10,"peekable","","",256],[10,"skip_while","","",256],[10,"take_while","","",256],[10,"skip","","",256],[10,"take","","",256],[10,"scan","","",256],[10,"flat_map","","",256],[10,"fuse","","",256],[10,"inspect","","",256],[10,"by_ref","","",256],[10,"advance","","",256],[10,"collect","","",256],[10,"nth","","",256],[10,"last","","",256],[10,"fold","","",256],[10,"count","","",256],[10,"all","","",256],[10,"any","","",256],[10,"find","","",256],[10,"position","","",256],[10,"max_by","","",256],[10,"min_by","","",256],[10,"indexable","","",256],[10,"idx","","",256],[10,"clone","","",257],[10,"clone_from","","",257],[10,"next","","",257],[10,"size_hint","","",257],[10,"size_hint","","",257],[10,"chain","","",257],[10,"zip","","",257],[10,"map","","",257],[10,"filter","","",257],[10,"filter_map","","",257],[10,"enumerate","","",257],[10,"peekable","","",257],[10,"skip_while","","",257],[10,"take_while","","",257],[10,"skip","","",257],[10,"take","","",257],[10,"scan","","",257],[10,"flat_map","","",257],[10,"fuse","","",257],[10,"inspect","","",257],[10,"by_ref","","",257],[10,"advance","","",257],[10,"collect","","",257],[10,"nth","","",257],[10,"last","","",257],[10,"fold","","",257],[10,"count","","",257],[10,"all","","",257],[10,"any","","",257],[10,"find","","",257],[10,"position","","",257],[10,"max_by","","",257],[10,"min_by","","",257],[10,"indexable","","",257],[10,"idx","","",257],[10,"next","","",258],[10,"size_hint","","",258],[10,"size_hint","","",258],[10,"chain","","",258],[10,"zip","","",258],[10,"map","","",258],[10,"filter","","",258],[10,"filter_map","","",258],[10,"enumerate","","",258],[10,"peekable","","",258],[10,"skip_while","","",258],[10,"take_while","","",258],[10,"skip","","",258],[10,"take","","",258],[10,"scan","","",258],[10,"flat_map","","",258],[10,"fuse","","",258],[10,"inspect","","",258],[10,"by_ref","","",258],[10,"advance","","",258],[10,"collect","","",258],[10,"nth","","",258],[10,"last","","",258],[10,"fold","","",258],[10,"count","","",258],[10,"all","","",258],[10,"any","","",258],[10,"find","","",258],[10,"position","","",258],[10,"max_by","","",258],[10,"min_by","","",258],[10,"next","","",259],[10,"size_hint","","",259],[10,"size_hint","","",259],[10,"chain","","",259],[10,"zip","","",259],[10,"map","","",259],[10,"filter","","",259],[10,"filter_map","","",259],[10,"enumerate","","",259],[10,"peekable","","",259],[10,"skip_while","","",259],[10,"take_while","","",259],[10,"skip","","",259],[10,"take","","",259],[10,"scan","","",259],[10,"flat_map","","",259],[10,"fuse","","",259],[10,"inspect","","",259],[10,"by_ref","","",259],[10,"advance","","",259],[10,"collect","","",259],[10,"nth","","",259],[10,"last","","",259],[10,"fold","","",259],[10,"count","","",259],[10,"all","","",259],[10,"any","","",259],[10,"find","","",259],[10,"position","","",259],[10,"max_by","","",259],[10,"min_by","","",259],[10,"next_back","","",259],[10,"rev","","",259],[10,"clone","","",260],[10,"clone_from","","",260],[10,"next","","",260],[10,"size_hint","","",260],[10,"size_hint","","",260],[10,"chain","","",260],[10,"zip","","",260],[10,"map","","",260],[10,"filter","","",260],[10,"filter_map","","",260],[10,"enumerate","","",260],[10,"peekable","","",260],[10,"skip_while","","",260],[10,"take_while","","",260],[10,"skip","","",260],[10,"take","","",260],[10,"scan","","",260],[10,"flat_map","","",260],[10,"fuse","","",260],[10,"inspect","","",260],[10,"by_ref","","",260],[10,"advance","","",260],[10,"collect","","",260],[10,"nth","","",260],[10,"last","","",260],[10,"fold","","",260],[10,"count","","",260],[10,"all","","",260],[10,"any","","",260],[10,"find","","",260],[10,"position","","",260],[10,"max_by","","",260],[10,"min_by","","",260],[10,"next_back","","",260],[10,"rev","","",260],[10,"indexable","","",260],[10,"idx","","",260],[10,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",260],[10,"next","","",243],[10,"size_hint","","",243],[10,"size_hint","","",243],[10,"chain","","",243],[10,"zip","","",243],[10,"map","","",243],[10,"filter","","",243],[10,"filter_map","","",243],[10,"enumerate","","",243],[10,"peekable","","",243],[10,"skip_while","","",243],[10,"take_while","","",243],[10,"skip","","",243],[10,"take","","",243],[10,"scan","","",243],[10,"flat_map","","",243],[10,"fuse","","",243],[10,"inspect","","",243],[10,"by_ref","","",243],[10,"advance","","",243],[10,"collect","","",243],[10,"nth","","",243],[10,"last","","",243],[10,"fold","","",243],[10,"count","","",243],[10,"all","","",243],[10,"any","","",243],[10,"find","","",243],[10,"position","","",243],[10,"max_by","","",243],[10,"min_by","","",243],[10,"next_back","","",243],[10,"rev","","",243],[10,"indexable","","",243],[10,"idx","","",243],[10,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the iterator",261],[10,"next","","",261],[10,"size_hint","","",261],[10,"size_hint","","",261],[10,"chain","","",261],[10,"zip","","",261],[10,"map","","",261],[10,"filter","","",261],[10,"filter_map","","",261],[10,"enumerate","","",261],[10,"peekable","","",261],[10,"skip_while","","",261],[10,"take_while","","",261],[10,"skip","","",261],[10,"take","","",261],[10,"scan","","",261],[10,"flat_map","","",261],[10,"fuse","","",261],[10,"inspect","","",261],[10,"by_ref","","",261],[10,"advance","","",261],[10,"collect","","",261],[10,"nth","","",261],[10,"last","","",261],[10,"fold","","",261],[10,"count","","",261],[10,"all","","",261],[10,"any","","",261],[10,"find","","",261],[10,"position","","",261],[10,"max_by","","",261],[10,"min_by","","",261],[10,"clone","","",262],[10,"clone_from","","",262],[10,"next","","",262],[10,"size_hint","","",262],[10,"size_hint","","",262],[10,"chain","","",262],[10,"zip","","",262],[10,"map","","",262],[10,"filter","","",262],[10,"filter_map","","",262],[10,"enumerate","","",262],[10,"peekable","","",262],[10,"skip_while","","",262],[10,"take_while","","",262],[10,"skip","","",262],[10,"take","","",262],[10,"scan","","",262],[10,"flat_map","","",262],[10,"fuse","","",262],[10,"inspect","","",262],[10,"by_ref","","",262],[10,"advance","","",262],[10,"collect","","",262],[10,"nth","","",262],[10,"last","","",262],[10,"fold","","",262],[10,"count","","",262],[10,"all","","",262],[10,"any","","",262],[10,"find","","",262],[10,"position","","",262],[10,"max_by","","",262],[10,"min_by","","",262],[10,"clone","","",263],[10,"clone_from","","",263],[10,"next","","",263],[10,"size_hint","","",263],[10,"size_hint","","",263],[10,"chain","","",263],[10,"zip","","",263],[10,"map","","",263],[10,"filter","","",263],[10,"filter_map","","",263],[10,"enumerate","","",263],[10,"peekable","","",263],[10,"skip_while","","",263],[10,"take_while","","",263],[10,"skip","","",263],[10,"take","","",263],[10,"scan","","",263],[10,"flat_map","","",263],[10,"fuse","","",263],[10,"inspect","","",263],[10,"by_ref","","",263],[10,"advance","","",263],[10,"collect","","",263],[10,"nth","","",263],[10,"last","","",263],[10,"fold","","",263],[10,"count","","",263],[10,"all","","",263],[10,"any","","",263],[10,"find","","",263],[10,"position","","",263],[10,"max_by","","",263],[10,"min_by","","",263],[10,"next_back","","",263],[10,"rev","","",263],[10,"clone","","",264],[10,"clone_from","","",264],[10,"next","","",264],[10,"size_hint","","",264],[10,"size_hint","","",264],[10,"chain","","",264],[10,"zip","","",264],[10,"map","","",264],[10,"filter","","",264],[10,"filter_map","","",264],[10,"enumerate","","",264],[10,"peekable","","",264],[10,"skip_while","","",264],[10,"take_while","","",264],[10,"skip","","",264],[10,"take","","",264],[10,"scan","","",264],[10,"flat_map","","",264],[10,"fuse","","",264],[10,"inspect","","",264],[10,"by_ref","","",264],[10,"advance","","",264],[10,"collect","","",264],[10,"nth","","",264],[10,"last","","",264],[10,"fold","","",264],[10,"count","","",264],[10,"all","","",264],[10,"any","","",264],[10,"find","","",264],[10,"position","","",264],[10,"max_by","","",264],[10,"min_by","","",264],[10,"next_back","","",264],[10,"rev","","",264],[10,"clone","","",265],[10,"clone_from","","",265],[10,"next","","",265],[10,"size_hint","","",265],[10,"chain","","",265],[10,"zip","","",265],[10,"map","","",265],[10,"filter","","",265],[10,"filter_map","","",265],[10,"enumerate","","",265],[10,"peekable","","",265],[10,"skip_while","","",265],[10,"take_while","","",265],[10,"skip","","",265],[10,"take","","",265],[10,"scan","","",265],[10,"flat_map","","",265],[10,"fuse","","",265],[10,"inspect","","",265],[10,"by_ref","","",265],[10,"advance","","",265],[10,"collect","","",265],[10,"nth","","",265],[10,"last","","",265],[10,"fold","","",265],[10,"count","","",265],[10,"all","","",265],[10,"any","","",265],[10,"find","","",265],[10,"position","","",265],[10,"max_by","","",265],[10,"min_by","","",265],[10,"clone","","",266],[10,"clone_from","","",266],[10,"next","","",266],[10,"size_hint","","",266],[10,"chain","","",266],[10,"zip","","",266],[10,"map","","",266],[10,"filter","","",266],[10,"filter_map","","",266],[10,"enumerate","","",266],[10,"peekable","","",266],[10,"skip_while","","",266],[10,"take_while","","",266],[10,"skip","","",266],[10,"take","","",266],[10,"scan","","",266],[10,"flat_map","","",266],[10,"fuse","","",266],[10,"inspect","","",266],[10,"by_ref","","",266],[10,"advance","","",266],[10,"collect","","",266],[10,"nth","","",266],[10,"last","","",266],[10,"fold","","",266],[10,"count","","",266],[10,"all","","",266],[10,"any","","",266],[10,"find","","",266],[10,"position","","",266],[10,"max_by","","",266],[10,"min_by","","",266],[10,"clone","","",267],[10,"clone_from","","",267],[10,"new","","Create a new `Repeat` that endlessly repeats the element `elt`.",267],[10,"next","","",267],[10,"size_hint","","",267],[10,"size_hint","","",267],[10,"chain","","",267],[10,"zip","","",267],[10,"map","","",267],[10,"filter","","",267],[10,"filter_map","","",267],[10,"enumerate","","",267],[10,"peekable","","",267],[10,"skip_while","","",267],[10,"take_while","","",267],[10,"skip","","",267],[10,"take","","",267],[10,"scan","","",267],[10,"flat_map","","",267],[10,"fuse","","",267],[10,"inspect","","",267],[10,"by_ref","","",267],[10,"advance","","",267],[10,"collect","","",267],[10,"nth","","",267],[10,"last","","",267],[10,"fold","","",267],[10,"count","","",267],[10,"all","","",267],[10,"any","","",267],[10,"find","","",267],[10,"position","","",267],[10,"max_by","","",267],[10,"min_by","","",267],[10,"next_back","","",267],[10,"rev","","",267],[10,"indexable","","",267],[10,"idx","","",267],[10,"send","sync::comm::duplex","",268],[10,"send_opt","","",268],[10,"recv","","",268],[10,"try_recv","","",268],[10,"recv_opt","","",268],[10,"new","sync::comm::oneshot","",269],[10,"send","","",269],[10,"sent","","",269],[10,"recv","","",269],[10,"try_recv","","",269],[10,"upgrade","","",269],[10,"drop_chan","","",269],[10,"drop_port","","",269],[10,"can_recv","","",269],[10,"start_selection","","",269],[10,"abort_selection","","",269],[10,"drop","","",269],[10,"new","sync::comm::select","Creates a new selection structure. This set is initially empty and\n`wait` will fail!() if called.",270],[10,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",270],[10,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",270],[10,"id","","Retrieve the id of this handle.",271],[10,"recv","","Receive a value on the underlying receiver. Has the same semantics as\n`Receiver.recv`",271],[10,"recv_opt","","Block to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv_opt`",271],[10,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",271],[10,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",271],[10,"drop","","",270],[10,"drop","","",271],[10,"next","","",272],[10,"size_hint","","",272],[10,"chain","","",272],[10,"zip","","",272],[10,"map","","",272],[10,"filter","","",272],[10,"filter_map","","",272],[10,"enumerate","","",272],[10,"peekable","","",272],[10,"skip_while","","",272],[10,"take_while","","",272],[10,"skip","","",272],[10,"take","","",272],[10,"scan","","",272],[10,"flat_map","","",272],[10,"fuse","","",272],[10,"inspect","","",272],[10,"by_ref","","",272],[10,"advance","","",272],[10,"collect","","",272],[10,"nth","","",272],[10,"last","","",272],[10,"fold","","",272],[10,"count","","",272],[10,"all","","",272],[10,"any","","",272],[10,"find","","",272],[10,"position","","",272],[10,"max_by","","",272],[10,"min_by","","",272],[10,"new","sync::comm::shared","",273],[10,"postinit_lock","","",273],[10,"inherit_blocker","","",273],[10,"send","","",273],[10,"recv","","",273],[10,"try_recv","","",273],[10,"clone_chan","","",273],[10,"drop_chan","","",273],[10,"drop_port","","",273],[10,"can_recv","","",273],[10,"start_selection","","",273],[10,"abort_selection","","",273],[10,"drop","","",273],[10,"new","sync::comm::stream","",274],[10,"send","","",274],[10,"upgrade","","",274],[10,"recv","","",274],[10,"try_recv","","",274],[10,"drop_chan","","",274],[10,"drop_port","","",274],[10,"can_recv","","",274],[10,"start_selection","","",274],[10,"abort_selection","","",274],[10,"drop","","",274],[10,"fmt","sync::comm::sync","",275],[10,"new","","",276],[10,"send","","",276],[10,"try_send","","",276],[10,"recv","","",276],[10,"try_recv","","",276],[10,"clone_chan","","",276],[10,"drop_chan","","",276],[10,"drop_port","","",276],[10,"can_recv","","",276],[10,"start_selection","","",276],[10,"abort_selection","","",276],[10,"drop","","",276],[10,"fmt","sync::comm","",277],[10,"clone","","",277],[10,"clone_from","","",277],[10,"eq","","",277],[10,"ne","","",277],[10,"ne","","",277],[10,"fmt","","",278],[10,"clone","","",278],[10,"clone_from","","",278],[10,"eq","","",278],[10,"ne","","",278],[10,"ne","","",278],[10,"send","","Sends a value along this channel to be received by the corresponding\nreceiver.",279],[10,"send_opt","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",279],[10,"clone","","",279],[10,"clone_from","","",279],[10,"drop","","",279],[10,"send","","Sends a value on this synchronous channel.",280],[10,"send_opt","","Send a value on a channel, returning it back if the receiver\ndisconnected",280],[10,"try_send","","Attempts to send a value on this channel without blocking.",280],[10,"clone","","",280],[10,"clone_from","","",280],[10,"drop","","",280],[10,"recv","","Blocks waiting for a value on this receiver",281],[10,"try_recv","","Attempts to return a pending value on this receiver without blocking",281],[10,"recv_opt","","Attempt to wait for a value on this receiver, but does not fail if the\ncorresponding channel has hung up.",281],[10,"iter","","Returns an iterator which will block waiting for messages, but never\n`fail!`. It will return `None` when the channel has hung up.",281],[10,"next","","",282],[10,"size_hint","","",282],[10,"chain","","",282],[10,"zip","","",282],[10,"map","","",282],[10,"filter","","",282],[10,"filter_map","","",282],[10,"enumerate","","",282],[10,"peekable","","",282],[10,"skip_while","","",282],[10,"take_while","","",282],[10,"skip","","",282],[10,"take","","",282],[10,"scan","","",282],[10,"flat_map","","",282],[10,"fuse","","",282],[10,"inspect","","",282],[10,"by_ref","","",282],[10,"advance","","",282],[10,"collect","","",282],[10,"nth","","",282],[10,"last","","",282],[10,"fold","","",282],[10,"count","","",282],[10,"all","","",282],[10,"any","","",282],[10,"find","","",282],[10,"position","","",282],[10,"max_by","","",282],[10,"min_by","","",282],[10,"drop","","",281],[10,"concat","collections::vec","",60],[10,"connect","","",60],[10,"clone","collections::str","",283],[10,"clone_from","","",283],[10,"clone","","",284],[10,"clone_from","","",284],[10,"next","","",284],[10,"size_hint","","",284],[10,"size_hint","","",284],[10,"chain","","",284],[10,"zip","","",284],[10,"map","","",284],[10,"filter","","",284],[10,"filter_map","","",284],[10,"enumerate","","",284],[10,"peekable","","",284],[10,"skip_while","","",284],[10,"take_while","","",284],[10,"skip","","",284],[10,"take","","",284],[10,"scan","","",284],[10,"flat_map","","",284],[10,"fuse","","",284],[10,"inspect","","",284],[10,"by_ref","","",284],[10,"advance","","",284],[10,"collect","","",284],[10,"nth","","",284],[10,"last","","",284],[10,"fold","","",284],[10,"count","","",284],[10,"all","","",284],[10,"any","","",284],[10,"find","","",284],[10,"position","","",284],[10,"max_by","","",284],[10,"min_by","","",284],[10,"clone","","",285],[10,"clone_from","","",285],[10,"clone","","",286],[10,"clone_from","","",286],[10,"next","","",286],[10,"size_hint","","",286],[10,"chain","","",286],[10,"zip","","",286],[10,"map","","",286],[10,"filter","","",286],[10,"filter_map","","",286],[10,"enumerate","","",286],[10,"peekable","","",286],[10,"skip_while","","",286],[10,"take_while","","",286],[10,"skip","","",286],[10,"take","","",286],[10,"scan","","",286],[10,"flat_map","","",286],[10,"fuse","","",286],[10,"inspect","","",286],[10,"by_ref","","",286],[10,"advance","","",286],[10,"collect","","",286],[10,"nth","","",286],[10,"last","","",286],[10,"fold","","",286],[10,"count","","",286],[10,"all","","",286],[10,"any","","",286],[10,"find","","",286],[10,"position","","",286],[10,"max_by","","",286],[10,"min_by","","",286],[10,"is_owned","","Returns `true` if this `MaybeOwned` wraps an owned string.",220],[10,"is_slice","","Returns `true` if this `MaybeOwned` wraps a borrowed string.",220],[10,"into_maybe_owned","collections::string","# Example",59],[10,"into_maybe_owned","collections::str","# Example",220],[10,"eq","","",220],[10,"ne","","",220],[10,"assert_receiver_is_total_eq","","",220],[10,"partial_cmp","","",220],[10,"lt","","",220],[10,"le","","",220],[10,"gt","","",220],[10,"ge","","",220],[10,"cmp","","",220],[10,"equiv","","",220],[10,"as_slice","","",220],[10,"into_string","","",220],[10,"into_owned","","",220],[10,"escape_default","","",220],[10,"escape_unicode","","",220],[10,"replace","","",220],[10,"to_owned","","",220],[10,"to_utf16","","",220],[10,"repeat","","",220],[10,"lev_distance","","",220],[10,"nfd_chars","","",220],[10,"nfkd_chars","","",220],[10,"nfc_chars","","",220],[10,"nfkc_chars","","",220],[10,"len","","",220],[10,"is_empty","","",220],[10,"clone","","",220],[10,"clone_from","","",220],[10,"default","","",220],[10,"hash","","",220],[10,"fmt","","",220],[10,"default","alloc::boxed","",24],[10,"clone","","Returns a copy of the owned box.",24],[10,"clone_from","","Performs copy-assignment from `source` by reusing the existing allocation.",24],[10,"clone_from","","",24],[10,"eq","","",24],[10,"ne","","",24],[10,"ne","","",24],[10,"partial_cmp","","",24],[10,"lt","","",24],[10,"le","","",24],[10,"ge","","",24],[10,"gt","","",24],[10,"lt","","",24],[10,"le","","",24],[10,"gt","","",24],[10,"ge","","",24],[10,"cmp","","",24],[10,"assert_receiver_is_total_eq","","",24],[10,"downcast","","",24],[10,"move","","",24],[10,"fmt","","",24],[10,"fmt","","",24],[10,"replace","rustrt::local_data","Replaces a value in task local data.",287],[10,"get","","Borrows a value from TLD.",287],[10,"deref","","",288],[10,"fmt","","",288],[10,"eq","","",288],[10,"ne","","",288],[10,"ne","","",288],[10,"assert_receiver_is_total_eq","","",288],[10,"partial_cmp","","",288],[10,"lt","","",288],[10,"le","","",288],[10,"gt","","",288],[10,"ge","","",288],[10,"lt","","",288],[10,"le","","",288],[10,"gt","","",288],[10,"ge","","",288],[10,"cmp","","",288],[10,"drop","","",288],[10,"drop","","",289],[10,"new","collections::slice","Creates an `ElementSwaps` iterator for a sequence of `length` elements.",290],[10,"next","","",290],[10,"size_hint","","",290],[10,"size_hint","","",290],[10,"chain","","",290],[10,"zip","","",290],[10,"map","","",290],[10,"filter","","",290],[10,"filter_map","","",290],[10,"enumerate","","",290],[10,"peekable","","",290],[10,"skip_while","","",290],[10,"take_while","","",290],[10,"skip","","",290],[10,"take","","",290],[10,"scan","","",290],[10,"flat_map","","",290],[10,"fuse","","",290],[10,"inspect","","",290],[10,"by_ref","","",290],[10,"advance","","",290],[10,"collect","","",290],[10,"nth","","",290],[10,"last","","",290],[10,"fold","","",290],[10,"count","","",290],[10,"all","","",290],[10,"any","","",290],[10,"find","","",290],[10,"position","","",290],[10,"max_by","","",290],[10,"min_by","","",290],[10,"next","","",291],[10,"size_hint","","",291],[10,"size_hint","","",291],[10,"chain","","",291],[10,"zip","","",291],[10,"map","","",291],[10,"filter","","",291],[10,"filter_map","","",291],[10,"enumerate","","",291],[10,"peekable","","",291],[10,"skip_while","","",291],[10,"take_while","","",291],[10,"skip","","",291],[10,"take","","",291],[10,"scan","","",291],[10,"flat_map","","",291],[10,"fuse","","",291],[10,"inspect","","",291],[10,"by_ref","","",291],[10,"advance","","",291],[10,"collect","","",291],[10,"nth","","",291],[10,"last","","",291],[10,"fold","","",291],[10,"count","","",291],[10,"all","","",291],[10,"any","","",291],[10,"find","","",291],[10,"position","","",291],[10,"max_by","","",291],[10,"min_by","","",291],[10,"drop","core::finally","",292],[10,"fmt","core::simd","",293],[10,"fmt","","",294],[10,"fmt","","",295],[10,"fmt","","",296],[10,"fmt","","",297],[10,"fmt","","",298],[10,"fmt","","",299],[10,"fmt","","",300],[10,"fmt","","",301],[10,"fmt","","",302],[10,"clone","rustrt::c_str","Clone this CString into a new, uniquely owned CString. For safety\nreasons, this is always a deep clone with the memory allocated\nwith C's allocator API, rather than the usual shallow clone.",219],[10,"clone_from","","",219],[10,"eq","","",219],[10,"ne","","",219],[10,"partial_cmp","","",219],[10,"lt","","",219],[10,"le","","",219],[10,"gt","","",219],[10,"ge","","",219],[10,"assert_receiver_is_total_eq","","",219],[10,"hash","","",219],[10,"new","","Create a C String from a pointer, with memory managed by C's allocator\n API, so avoid calling it with a pointer to memory managed by Rust's\n allocator API, as the behaviour would not be well defined.",219],[10,"as_ptr","","Return a pointer to the NUL-terminated string data.",219],[10,"as_mut_ptr","","Return a mutable pointer to the NUL-terminated string data.",219],[10,"with_ref","","Calls a closure with a reference to the underlying `*libc::c_char`.",219],[10,"with_mut_ref","","Calls a closure with a mutable reference to the underlying `*libc::c_char`.",219],[10,"is_null","","Returns true if the CString is a null.",219],[10,"is_not_null","","Returns true if the CString is not null.",219],[10,"owns_buffer","","Returns whether or not the `CString` owns the buffer.",219],[10,"as_bytes","","Converts the CString into a `&[u8]` without copying.\nIncludes the terminating NUL byte.",219],[10,"as_bytes_no_nul","","Converts the CString into a `&[u8]` without copying.\nDoes not include the terminating NUL byte.",219],[10,"as_str","","Converts the CString into a `&str` without copying.\nReturns None if the CString is not UTF-8.",219],[10,"iter","","Return a CString iterator.",219],[10,"unwrap","","Unwraps the wrapped `*libc::c_char` from the `CString` wrapper.",219],[10,"drop","","",219],[10,"len","","Return the number of bytes in the CString (not including the NUL terminator).",219],[10,"is_empty","","",219],[10,"fmt","","",219],[10,"to_c_str","collections::string","",59],[10,"to_c_str_unchecked","","",59],[10,"with_c_str","","",59],[10,"with_c_str_unchecked","","",59],[10,"with_c_str","","",59],[10,"with_c_str_unchecked","","",59],[10,"next","rustrt::c_str","",303],[10,"size_hint","","",303],[10,"chain","","",303],[10,"zip","","",303],[10,"map","","",303],[10,"filter","","",303],[10,"filter_map","","",303],[10,"enumerate","","",303],[10,"peekable","","",303],[10,"skip_while","","",303],[10,"take_while","","",303],[10,"skip","","",303],[10,"take","","",303],[10,"scan","","",303],[10,"flat_map","","",303],[10,"fuse","","",303],[10,"inspect","","",303],[10,"by_ref","","",303],[10,"advance","","",303],[10,"collect","","",303],[10,"nth","","",303],[10,"last","","",303],[10,"fold","","",303],[10,"count","","",303],[10,"all","","",303],[10,"any","","",303],[10,"find","","",303],[10,"position","","",303],[10,"max_by","","",303],[10,"min_by","","",303],[10,"clone","core::kinds::marker","",304],[10,"clone_from","","",304],[10,"eq","","",304],[10,"ne","","",304],[10,"ne","","",304],[10,"clone","","",305],[10,"clone_from","","",305],[10,"eq","","",305],[10,"ne","","",305],[10,"ne","","",305],[10,"clone","","",306],[10,"clone_from","","",306],[10,"eq","","",306],[10,"ne","","",306],[10,"ne","","",306],[10,"clone","","",307],[10,"clone_from","","",307],[10,"eq","","",307],[10,"ne","","",307],[10,"ne","","",307],[10,"clone","","",308],[10,"clone_from","","",308],[10,"eq","","",308],[10,"ne","","",308],[10,"ne","","",308],[10,"clone","","",309],[10,"clone_from","","",309],[10,"eq","","",309],[10,"ne","","",309],[10,"ne","","",309],[10,"clone","","",310],[10,"clone_from","","",310],[10,"eq","","",310],[10,"ne","","",310],[10,"ne","","",310],[10,"clone","","",311],[10,"clone_from","","",311],[10,"eq","","",311],[10,"ne","","",311],[10,"ne","","",311],[10,"clone","","",312],[10,"clone_from","","",312],[10,"eq","","",312],[10,"ne","","",312],[10,"ne","","",312],[10,"clone","","",313],[10,"clone_from","","",313],[10,"eq","","",313],[10,"ne","","",313],[10,"ne","","",313],[10,"new","core::cell","Creates a new `Cell` containing the given value.",314],[10,"get","","Returns a copy of the contained value.",314],[10,"set","","Sets the contained value.",314],[10,"clone","","",314],[10,"clone_from","","",314],[10,"eq","","",314],[10,"ne","","",314],[10,"new","","Create a new `RefCell` containing `value`",315],[10,"unwrap","","Consumes the `RefCell`, returning the wrapped value.",315],[10,"try_borrow","","Attempts to immutably borrow the wrapped value.",315],[10,"borrow","","Immutably borrows the wrapped value.",315],[10,"try_borrow_mut","","Mutably borrows the wrapped value.",315],[10,"borrow_mut","","Mutably borrows the wrapped value.",315],[10,"clone","","",315],[10,"clone_from","","",315],[10,"eq","","",315],[10,"ne","","",315],[10,"drop","","",316],[10,"deref","","",316],[10,"drop","","",317],[10,"deref","","",317],[10,"deref_mut","","",317],[10,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",318],[10,"get","","Gets a mutable pointer to the wrapped value.",318],[10,"unwrap","","Unwraps the value",318],[10,"new","collections::vec","Constructs a new, empty `Vec`.",60],[10,"with_capacity","","Constructs a new, empty `Vec` with the specified capacity.",60],[10,"from_fn","","Creates and initializes a `Vec`.",60],[10,"from_raw_parts","","Creates a `Vec<T>` directly from the raw constituents.",60],[10,"partition","","Consumes the `Vec`, partitioning it based on a predicate.",60],[10,"append","","Deprecated, call `extend` instead.",60],[10,"from_slice","","Deprecated, call `to_vec()` instead",60],[10,"from_elem","","Constructs a `Vec` with copies of a value.",60],[10,"push_all","","Appends all elements in a slice to the `Vec`.",60],[10,"grow","","Grows the `Vec` in-place.",60],[10,"grow_set","","Sets the value of a vector element at a given index, growing the vector\nas needed.",60],[10,"partitioned","","Partitions a vector based on a predicate.",60],[10,"clone","","",60],[10,"clone_from","","",60],[10,"clone_from","","",60],[10,"index","","",60],[10,"as_slice_","","",60],[10,"slice_from_","","",60],[10,"slice_to_","","",60],[10,"slice_","","",60],[10,"as_mut_slice_","","",60],[10,"slice_from_mut_","","",60],[10,"slice_to_mut_","","",60],[10,"slice_mut_","","",60],[10,"from_iter","","",60],[10,"extend","","",60],[10,"eq","","",60],[10,"ne","","",60],[10,"partial_cmp","","",60],[10,"lt","","",60],[10,"le","","",60],[10,"gt","","",60],[10,"ge","","",60],[10,"assert_receiver_is_total_eq","","",60],[10,"equiv","","",60],[10,"cmp","","",60],[10,"len","","",60],[10,"is_empty","","",60],[10,"to_vec","","",60],[10,"into_vec","","",60],[10,"to_owned","","",60],[10,"into_owned","","",60],[10,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",60],[10,"reserve_additional","","Reserves capacity for at least `n` additional elements in the given\nvector.",60],[10,"reserve","","Reserves capacity for at least `n` elements in the given vector.",60],[10,"reserve_exact","","Reserves capacity for exactly `capacity` elements in the given vector.",60],[10,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",60],[10,"append_one","","Deprecated, call `push` instead",60],[10,"truncate","","Shorten a vector, dropping excess elements.",60],[10,"as_mut_slice","","Returns a mutable slice of the elements of `self`.",60],[10,"move_iter","","Deprecated: use `into_iter`.",60],[10,"into_iter","","Creates a consuming iterator, that is, one that moves each\nvalue out of the vector (from start to end). The vector cannot\nbe used after calling this.",60],[10,"set_len","","Sets the length of a vector.",60],[10,"get","","Returns a reference to the value at index `index`.",60],[10,"get_mut","","Returns a mutable reference to the value at index `index`.",60],[10,"iter","","Returns an iterator over references to the elements of the vector in\norder.",60],[10,"mut_iter","","Deprecated: use `iter_mut`.",60],[10,"iter_mut","","Returns an iterator over mutable references to the elements of the\nvector in order.",60],[10,"sort_by","","Sorts the vector, in place, using `compare` to compare elements.",60],[10,"slice","","Returns a slice of self spanning the interval [`start`, `end`).",60],[10,"tail","","Returns a slice containing all but the first element of the vector.",60],[10,"tailn","","Returns all but the first `n' elements of a vector.",60],[10,"last","","Returns a reference to the last element of a vector, or `None` if it is\nempty.",60],[10,"mut_last","","Deprecated: use `last_mut`.",60],[10,"last_mut","","Returns a mutable reference to the last element of a vector, or `None`\nif it is empty.",60],[10,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element. This does not preserve ordering, but is O(1).",60],[10,"unshift","","Prepends an element to the vector.",60],[10,"shift","","Removes the first element from a vector and returns it, or `None` if\nthe vector is empty.",60],[10,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",60],[10,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.\nReturns `None` if `i` is out of bounds.",60],[10,"push_all_move","","Takes ownership of the vector `other`, moving all elements into\nthe current vector. This does not copy any elements, and it is\nillegal to use the `other` vector after calling this method\n(because it is moved here).",60],[10,"mut_slice","","Deprecated: use `slice_mut`.",60],[10,"slice_mut","","Returns a mutable slice of `self` between `start` and `end`.",60],[10,"mut_slice_from","","Deprecated: use \"slice_from_mut\".",60],[10,"slice_from_mut","","Returns a mutable slice of `self` from `start` to the end of the `Vec`.",60],[10,"mut_slice_to","","Deprecated: use `slice_to_mut`.",60],[10,"slice_to_mut","","Returns a mutable slice of `self` from the start of the `Vec` to `end`.",60],[10,"mut_split_at","","Deprecated: use `split_at_mut`.",60],[10,"split_at_mut","","Returns a pair of mutable slices that divides the `Vec` at an index.",60],[10,"reverse","","Reverses the order of elements in a vector, in place.",60],[10,"slice_from","","Returns a slice of `self` from `start` to the end of the vec.",60],[10,"slice_to","","Returns a slice of self from the start of the vec to `end`.",60],[10,"init","","Returns a slice containing all but the last element of the vector.",60],[10,"as_ptr","","Returns an unsafe pointer to the vector's buffer.",60],[10,"as_mut_ptr","","Returns a mutable unsafe pointer to the vector's buffer.",60],[10,"retain","","Retains only the elements specified by the predicate.",60],[10,"grow_fn","","Expands a vector in place, initializing the new elements to the result of a function.",60],[10,"sort","","Sorts the vector in place.",60],[10,"clear","","",60],[10,"contains","","Returns true if a vector contains an element equal to the given value.",60],[10,"dedup","","Removes consecutive repeated elements in the vector.",60],[10,"as_slice","","Returns a slice into `self`.",60],[10,"add","","",60],[10,"drop","","",60],[10,"default","","",60],[10,"fmt","","",60],[10,"push","","Appends an element to the back of a collection.",60],[10,"pop","","",60],[10,"unwrap","","Drops all items that have not yet been moved and returns the empty vector.",319],[10,"next","","",319],[10,"size_hint","","",319],[10,"size_hint","","",319],[10,"chain","","",319],[10,"zip","","",319],[10,"map","","",319],[10,"filter","","",319],[10,"filter_map","","",319],[10,"enumerate","","",319],[10,"peekable","","",319],[10,"skip_while","","",319],[10,"take_while","","",319],[10,"skip","","",319],[10,"take","","",319],[10,"scan","","",319],[10,"flat_map","","",319],[10,"fuse","","",319],[10,"inspect","","",319],[10,"by_ref","","",319],[10,"advance","","",319],[10,"collect","","",319],[10,"nth","","",319],[10,"last","","",319],[10,"fold","","",319],[10,"count","","",319],[10,"all","","",319],[10,"any","","",319],[10,"find","","",319],[10,"position","","",319],[10,"max_by","","",319],[10,"min_by","","",319],[10,"next_back","","",319],[10,"rev","","",319],[10,"rposition","","",319],[10,"len","","",319],[10,"drop","","",319],[10,"drop","","",320],[10,"map_in_place","","Converts a `Vec<T>` to a `Vec<U>` where `T` and `U` have the same\nnon-zero size and the same minimal alignment.",60],[10,"fmt","core::intrinsics","",321],[10,"assert_receiver_is_total_eq","","",321],[10,"eq","","",321],[10,"ne","","",321],[10,"ne","","",321],[10,"of","","Returns the `TypeId` of the type this generic function has been instantiated with",321],[10,"hash","","",321],[10,"fmt","core::result","",168],[10,"cmp","","",168],[10,"assert_receiver_is_total_eq","","",168],[10,"partial_cmp","","",168],[10,"lt","","",168],[10,"le","","",168],[10,"gt","","",168],[10,"ge","","",168],[10,"lt","","",168],[10,"le","","",168],[10,"gt","","",168],[10,"ge","","",168],[10,"eq","","",168],[10,"ne","","",168],[10,"ne","","",168],[10,"clone","","",168],[10,"clone_from","","",168],[10,"is_ok","","Returns true if the result is `Ok`",168],[10,"is_err","","Returns true if the result is `Err`",168],[10,"ok","","Convert from `Result<T, E>` to `Option<T>`",168],[10,"err","","Convert from `Result<T, E>` to `Option<E>`",168],[10,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",168],[10,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",168],[10,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",168],[10,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",168],[10,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",168],[10,"iter","","Returns an iterator over the possibly contained value.",168],[10,"mut_iter","","Deprecated: use `iter_mut`.",168],[10,"iter_mut","","Returns a mutable iterator over the possibly contained value.",168],[10,"move_iter","","Deprecated: `use into_iter`.",168],[10,"into_iter","","Returns a consuming iterator over the possibly contained value.",168],[10,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",168],[10,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",168],[10,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",168],[10,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",168],[10,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",168],[10,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",168],[10,"unwrap_or_handle","","Deprecated name for `unwrap_or_else()`.",168],[10,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",168],[10,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",168],[10,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",168],[10,"clone","","",322],[10,"clone_from","","",322],[10,"next","","",322],[10,"size_hint","","",322],[10,"size_hint","","",322],[10,"chain","","",322],[10,"zip","","",322],[10,"map","","",322],[10,"filter","","",322],[10,"filter_map","","",322],[10,"enumerate","","",322],[10,"peekable","","",322],[10,"skip_while","","",322],[10,"take_while","","",322],[10,"skip","","",322],[10,"take","","",322],[10,"scan","","",322],[10,"flat_map","","",322],[10,"fuse","","",322],[10,"inspect","","",322],[10,"by_ref","","",322],[10,"advance","","",322],[10,"collect","","",322],[10,"nth","","",322],[10,"last","","",322],[10,"fold","","",322],[10,"count","","",322],[10,"all","","",322],[10,"any","","",322],[10,"find","","",322],[10,"position","","",322],[10,"max_by","","",322],[10,"min_by","","",322],[10,"next_back","","",322],[10,"rev","","",322],[10,"rposition","","",322],[10,"len","","",322],[10,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",168],[10,"fmt","core::option","",323],[10,"cmp","","",323],[10,"assert_receiver_is_total_eq","","",323],[10,"partial_cmp","","",323],[10,"lt","","",323],[10,"le","","",323],[10,"gt","","",323],[10,"ge","","",323],[10,"lt","","",323],[10,"le","","",323],[10,"gt","","",323],[10,"ge","","",323],[10,"eq","","",323],[10,"ne","","",323],[10,"ne","","",323],[10,"clone","","",323],[10,"clone_from","","",323],[10,"is_some","","Returns `true` if the option is a `Some` value",323],[10,"is_none","","Returns `true` if the option is a `None` value",323],[10,"as_ref","","Convert from `Option<T>` to `Option<&T>`",323],[10,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",323],[10,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",323],[10,"expect","","Unwraps an option, yielding the content of a `Some`",323],[10,"unwrap","","Returns the inner `T` of a `Some(T)`.",323],[10,"unwrap_or","","Returns the contained value or a default.",323],[10,"unwrap_or_else","","Returns the contained value or computes it from a closure.",323],[10,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",323],[10,"map_or","","Applies a function to the contained value or returns a default.",323],[10,"map_or_else","","Applies a function to the contained value or computes a default.",323],[10,"mutate","","Deprecated.",323],[10,"mutate_or_set","","Deprecated.",323],[10,"iter","","Returns an iterator over the possibly contained value.",323],[10,"mut_iter","","Deprecated: use `iter_mut`",323],[10,"iter_mut","","Returns a mutable iterator over the possibly contained value.",323],[10,"move_iter","","Deprecated: use `into_iter`.",323],[10,"into_iter","","Returns a consuming iterator over the possibly contained value.",323],[10,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",323],[10,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",323],[10,"or","","Returns the option if it contains a value, otherwise returns `optb`.",323],[10,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",323],[10,"take","","Takes the value out of the option, leaving a `None` in its place.",323],[10,"filtered","","Deprecated.",323],[10,"while_some","","Deprecated.",323],[10,"take_unwrap","","Deprecated: use `take().unwrap()` instead.",323],[10,"get_ref","","Deprecated: use `as_ref().unwrap()` instead.",323],[10,"get_mut_ref","","Deprecated: use `as_mut().unwrap()` instead.",323],[10,"unwrap_or_default","","Returns the contained value or a default",323],[10,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",323],[10,"default","","",323],[10,"clone","","",324],[10,"clone_from","","",324],[10,"next","","",324],[10,"size_hint","","",324],[10,"size_hint","","",324],[10,"chain","","",324],[10,"zip","","",324],[10,"map","","",324],[10,"filter","","",324],[10,"filter_map","","",324],[10,"enumerate","","",324],[10,"peekable","","",324],[10,"skip_while","","",324],[10,"take_while","","",324],[10,"skip","","",324],[10,"take","","",324],[10,"scan","","",324],[10,"flat_map","","",324],[10,"fuse","","",324],[10,"inspect","","",324],[10,"by_ref","","",324],[10,"advance","","",324],[10,"collect","","",324],[10,"nth","","",324],[10,"last","","",324],[10,"fold","","",324],[10,"count","","",324],[10,"all","","",324],[10,"any","","",324],[10,"find","","",324],[10,"position","","",324],[10,"max_by","","",324],[10,"min_by","","",324],[10,"next_back","","",324],[10,"rev","","",324],[10,"rposition","","",324],[10,"len","","",324],[10,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",323],[10,"new","alloc::rc","Constructs a new reference-counted pointer.",325],[10,"downgrade","","Downgrades the reference-counted pointer to a weak reference.",325],[10,"make_unique","","Acquires a mutable pointer to the inner contents by guaranteeing that\nthe reference count is one (no sharing is possible).",325],[10,"deref","","Borrows the value contained in the reference-counted pointer.",325],[10,"drop","","",325],[10,"clone","","",325],[10,"clone_from","","",325],[10,"default","","",325],[10,"eq","","",325],[10,"ne","","",325],[10,"ne","","",325],[10,"assert_receiver_is_total_eq","","",325],[10,"partial_cmp","","",325],[10,"lt","","",325],[10,"le","","",325],[10,"gt","","",325],[10,"ge","","",325],[10,"lt","","",325],[10,"le","","",325],[10,"gt","","",325],[10,"ge","","",325],[10,"cmp","","",325],[10,"fmt","","",325],[10,"upgrade","","Upgrades a weak reference to a strong reference.",326],[10,"drop","","",326],[10,"clone","","",326],[10,"clone_from","","",326],[10,"cmp","collections::string","",59],[10,"assert_receiver_is_total_eq","","",59],[10,"partial_cmp","","",59],[10,"lt","","",59],[10,"le","","",59],[10,"gt","","",59],[10,"ge","","",59],[10,"lt","","",59],[10,"le","","",59],[10,"gt","","",59],[10,"ge","","",59],[10,"eq","","",59],[10,"ne","","",59],[10,"ne","","",59],[10,"clone","","",59],[10,"clone_from","","",59],[10,"new","","Creates a new string buffer initialized with the empty string.",59],[10,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",59],[10,"from_str","","Creates a new string buffer from the given string.",59],[10,"from_raw_parts","","Deprecated. Replaced by `string::raw::from_parts`",59],[10,"from_owned_str","","Deprecated.",59],[10,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",59],[10,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",59],[10,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",59],[10,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",59],[10,"from_chars","","Convert a vector of `char`s to a `String`.",59],[10,"into_bytes","","Return the underlying byte buffer, encoded as UTF-8.",59],[10,"append","","Pushes the given `String` onto this buffer then returns `self` so that it can be\nused again.",59],[10,"from_char","","Creates a string buffer by repeating a character `length` times.",59],[10,"from_byte","","Converts a byte to a UTF-8 string.",59],[10,"push_str","","Pushes the given string onto this string buffer.",59],[10,"grow","","Pushes `ch` onto the given string `count` times.",59],[10,"byte_capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",59],[10,"capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",59],[10,"reserve_additional","","Reserves capacity for at least `extra` additional bytes in this string buffer.",59],[10,"reserve","","Reserves capacity for at least `capacity` bytes in this string buffer.",59],[10,"reserve_exact","","Reserves capacity for exactly `capacity` bytes in this string buffer.",59],[10,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",59],[10,"push_char","","Deprecated, use .push() instead.",59],[10,"push","","Adds the given character to the end of the string.",59],[10,"push_bytes","","Pushes the given bytes onto this string buffer.\nThis is unsafe because it does not check\nto ensure that the resulting string will be valid UTF-8.",59],[10,"as_bytes","","Works with the underlying buffer as a byte slice.",59],[10,"as_mut_bytes","","Works with the underlying buffer as a mutable byte slice.",59],[10,"truncate","","Shortens a string to the specified length.",59],[10,"push_byte","","Appends a byte to this string buffer.",59],[10,"pop_byte","","Removes the last byte from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",59],[10,"pop_char","","Deprecated. Renamed to `pop`.",59],[10,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",59],[10,"shift_byte","","Removes the first byte from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",59],[10,"shift_char","","Deprecated, call `remove(0)` instead",59],[10,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it. Returns `None` if `idx` is out of bounds.",59],[10,"insert","","Insert a character into the string buffer at byte position `idx`.",59],[10,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",59],[10,"len","","",59],[10,"is_empty","","",59],[10,"clear","","",59],[10,"from_iter","","",59],[10,"extend","","",59],[10,"as_slice","","",59],[10,"into_string","","",59],[10,"into_owned","","",59],[10,"escape_default","","",59],[10,"escape_unicode","","",59],[10,"replace","","",59],[10,"to_owned","","",59],[10,"to_utf16","","",59],[10,"repeat","","",59],[10,"lev_distance","","",59],[10,"nfd_chars","","",59],[10,"nfkd_chars","","",59],[10,"nfc_chars","","",59],[10,"nfkc_chars","","",59],[10,"default","","",59],[10,"fmt","","",59],[10,"hash","","",59],[10,"equiv","","",59],[10,"add","","",59],[10,"fmt","core::cmp","",327],[10,"eq","","",327],[10,"ne","","",327],[10,"ne","","",327],[10,"clone","","",327],[10,"clone_from","","",327],[10,"reverse","","Reverse the `Ordering`, so that `Less` becomes `Greater` and\nvice versa.",327],[10,"assert_receiver_is_total_eq","","",327],[10,"cmp","","",327],[10,"partial_cmp","","",327],[10,"lt","","",327],[10,"le","","",327],[10,"gt","","",327],[10,"ge","","",327],[1,"SocketAddr","hyper",""],[11,"ip","","",180],[11,"port","","",180],[2,"IpAddr","",""],[12,"Ipv4Addr","","",179],[12,"Ipv6Addr","","",179],[4,"Port","",""],[0,"mime","",""],[10,"eq","mime","",328],[10,"ne","","",328],[10,"ne","","",328],[10,"clone","","",328],[10,"clone_from","","",328],[10,"eq","","",329],[10,"ne","","",329],[10,"ne","","",329],[10,"clone","","",329],[10,"clone_from","","",329],[10,"fmt","","",329],[10,"from_str","","",329],[10,"eq","","",330],[10,"ne","","",330],[10,"ne","","",330],[10,"clone","","",330],[10,"clone_from","","",330],[10,"fmt","","",330],[10,"from_str","","",330],[10,"eq","","",331],[10,"ne","","",331],[10,"ne","","",331],[10,"clone","","",331],[10,"clone_from","","",331],[10,"fmt","","",331],[10,"from_str","","",331],[10,"eq","","",332],[10,"ne","","",332],[10,"ne","","",332],[10,"clone","","",332],[10,"clone_from","","",332],[10,"fmt","","",332],[10,"from_str","","",332],[10,"equiv","","",328],[10,"fmt","","",328],[10,"from_str","","",328],[1,"Mime","hyper::mime","Mime, or Media Type. Encapsulates common registers types."],[2,"TopLevel","",""],[12,"TopStar","","",329],[12,"Text","","",329],[12,"Image","","",329],[12,"Audio","","",329],[12,"Video","","",329],[12,"Application","","",329],[12,"Multipart","","",329],[12,"Message","","",329],[12,"Model","","",329],[12,"TopExt","","",329],[2,"SubLevel","",""],[12,"SubStar","","",330],[12,"Plain","","",330],[12,"Html","","",330],[12,"Xml","","",330],[12,"Javascript","","",330],[12,"Css","","",330],[12,"Json","","",330],[12,"Png","","",330],[12,"Gif","","",330],[12,"Bmp","","",330],[12,"Jpeg","","",330],[12,"SubExt","","",330],[2,"Attr","",""],[12,"Charset","","",331],[12,"Q","","",331],[12,"AttrExt","","",331],[2,"Value","",""],[12,"Utf8","","",332],[12,"ValueExt","","",332],[4,"Param","",""],[10,"parse","url","Parse an URL with the default `UrlParser` parameters.",333],[10,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",333],[10,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",333],[10,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",333],[10,"serialize","","Return the serialization of this URL as a string.",333],[10,"serialize_no_fragment","","Return the serialization of this URL, without the fragment identifier, as a string",333],[10,"non_relative_scheme_data","","If the URL is *non-relative*, return the string scheme data.",333],[10,"non_relative_scheme_data_mut","","If the URL is *non-relative*, return a mutable reference to the string scheme data.",333],[10,"relative_scheme_data","","If the URL is in a *relative scheme*, return the structured scheme data.",333],[10,"relative_scheme_data_mut","","If the URL is in a *relative scheme*,\nreturn a mutable reference to the structured scheme data.",333],[10,"username","","If the URL is in a *relative scheme*, return its username.",333],[10,"username_mut","","If the URL is in a *relative scheme*, return a mutable reference to its username.",333],[10,"lossy_percent_decode_username","","Percent-decode the URL’s username, if any.",333],[10,"password","","If the URL is in a *relative scheme*, return its password, if any.",333],[10,"password_mut","","If the URL is in a *relative scheme*, return a mutable reference to its password, if any.",333],[10,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",333],[10,"serialize_userinfo","","Serialize the URL's username and password, if any.",333],[10,"host","","If the URL is in a *relative scheme*, return its structured host.",333],[10,"host_mut","","If the URL is in a *relative scheme*, return a mutable reference to its structured host.",333],[10,"domain","","If the URL is in a *relative scheme* and its host is a domain,\nreturn the domain as a string.",333],[10,"domain_mut","","If the URL is in a *relative scheme* and its host is a domain,\nreturn a mutable reference to the domain string.",333],[10,"serialize_host","","If the URL is in a *relative scheme*, serialize its host as a string.",333],[10,"port","","If the URL is in a *relative scheme* and has a port number, return it.",333],[10,"port_mut","","If the URL is in a *relative scheme*, return a mutable reference to its port.",333],[10,"port_or_default","","If the URL is in a *relative scheme* that is not a file-like,\nreturn its port number, even if it is the default.",333],[10,"path","","If the URL is in a *relative scheme*, return its path components.",333],[10,"path_mut","","If the URL is in a *relative scheme*, return a mutable reference to its path components.",333],[10,"serialize_path","","If the URL is in a *relative scheme*, serialize its path as a string.",333],[10,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return a vector of (key, value) pairs.",333],[10,"set_query_from_pairs","","Serialize an iterator of (key, value) pairs as `application/x-www-form-urlencoded`\nand set it as the URL’s query string.",333],[10,"lossy_percent_decode_query","","Percent-decode the URL’s query string, if any.",333],[10,"lossy_percent_decode_fragment","","Percent-decode the URL’s fragment identifier, if any.",333],[10,"clone","url::host","",334],[10,"clone_from","","",334],[10,"assert_receiver_is_total_eq","","",334],[10,"eq","","",334],[10,"ne","","",334],[10,"ne","","",334],[10,"clone","","",335],[10,"clone_from","","",335],[10,"assert_receiver_is_total_eq","","",335],[10,"eq","","",335],[10,"ne","","",335],[10,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",334],[10,"serialize","","Serialize the host as a string.",334],[10,"fmt","","",334],[10,"parse","","Parse an IPv6 address, without the [] square brackets.",335],[10,"serialize","","Serialize the IPv6 address to a string.",335],[10,"fmt","","",335],[10,"clone","url::parser","",336],[10,"clone_from","","",336],[10,"assert_receiver_is_total_eq","","",336],[10,"eq","","",336],[10,"ne","","",336],[10,"ne","","",336],[10,"fmt","","",336],[10,"assert_receiver_is_total_eq","","",337],[10,"eq","","",337],[10,"ne","","",337],[10,"ne","","",337],[10,"next","","",338],[10,"size_hint","","",338],[10,"chain","","",338],[10,"zip","","",338],[10,"map","","",338],[10,"filter","","",338],[10,"filter_map","","",338],[10,"enumerate","","",338],[10,"peekable","","",338],[10,"skip_while","","",338],[10,"take_while","","",338],[10,"skip","","",338],[10,"take","","",338],[10,"scan","","",338],[10,"flat_map","","",338],[10,"fuse","","",338],[10,"inspect","","",338],[10,"by_ref","","",338],[10,"advance","","",338],[10,"collect","","",338],[10,"nth","","",338],[10,"last","","",338],[10,"fold","","",338],[10,"count","","",338],[10,"all","","",338],[10,"any","","",338],[10,"find","","",338],[10,"position","","",338],[10,"max_by","","",338],[10,"min_by","","",338],[10,"fmt","url::format","",339],[10,"fmt","","",340],[10,"fmt","","",341],[10,"clone","url","",333],[10,"clone_from","","",333],[10,"assert_receiver_is_total_eq","","",333],[10,"eq","","",333],[10,"ne","","",333],[10,"ne","","",333],[10,"clone","","",342],[10,"clone_from","","",342],[10,"assert_receiver_is_total_eq","","",342],[10,"eq","","",342],[10,"ne","","",342],[10,"ne","","",342],[10,"clone","","",343],[10,"clone_from","","",343],[10,"assert_receiver_is_total_eq","","",343],[10,"eq","","",343],[10,"ne","","",343],[10,"ne","","",343],[10,"hash","","",333],[10,"new","","Return a new UrlParser with default parameters.",344],[10,"base_url","","Set the base URL used for resolving relative URL references, and return the `UrlParser`.\nThe default is no base URL, so that relative URLs references fail to parse.",344],[10,"query_encoding_override","","Set the character encoding the query string is encoded as before percent-encoding,\nand return the `UrlParser`.",344],[10,"error_handler","","Set an error handler for non-fatal parse errors, and return the `UrlParser`.",344],[10,"scheme_type_mapper","","Set a *scheme type mapper*, and return the `UrlParser`.",344],[10,"parse","","Parse `input` as an URL, with all the parameters previously set in the `UrlParser`.",344],[10,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier.",344],[10,"assert_receiver_is_total_eq","","",345],[10,"eq","","",345],[10,"ne","","",345],[10,"ne","","",345],[10,"default_port","","",345],[10,"encode","","",333],[10,"decode","","",333],[10,"fmt","","",333],[10,"fmt","","",342],[10,"lossy_percent_decode_username","","Percent-decode the URL’s username.",343],[10,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",343],[10,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",343],[10,"domain","","If the host is a domain, return the domain as a string.",343],[10,"domain_mut","","If the host is a domain, return a mutable reference to the domain string.",343],[10,"port_or_default","","Return the port number of the URL, even if it is the default.\nReturn `None` for file-like URLs.",343],[10,"serialize_path","","Serialize the path as a string.",343],[10,"serialize_userinfo","","Serialize the userinfo as a string.",343],[10,"fmt","","",343],[10,"to_url_path","std::path::posix","",173],[10,"to_url_path","std::path::windows","",216],[10,"from_url_path","std::path::posix","",173],[10,"from_url_path","std::path::windows","",216],[1,"Url","hyper","The parsed representation of an absolute URL."],[11,"scheme","","The scheme (a.k.a. protocol) of the URL, in ASCII lower case.",333],[11,"scheme_data","","The components of the URL whose representation depends on where the scheme is *relative*.",333],[11,"query","","The query string of the URL.",333],[11,"fragment","","The fragment identifier of the URL.",333]],"paths":[[2,"HttpError"],[1,"Request"],[1,"Response"],[2,"Method"],[1,"Host"],[1,"ContentLength"],[1,"ContentType"],[1,"Accept"],[2,"Connection"],[2,"Encoding"],[1,"TransferEncoding"],[1,"UserAgent"],[1,"Server"],[1,"Date"],[6,"Header"],[1,"Headers"],[1,"HeadersItems"],[1,"HeaderView"],[2,"HttpReader"],[2,"HttpWriter"],[2,"HttpStream"],[6,"NetworkListener"],[6,"NetworkAcceptor"],[6,"NetworkStream"],[1,"Box"],[1,"HttpListener"],[1,"HttpAcceptor"],[1,"Listening"],[1,"Request"],[1,"Response"],[6,"Handler"],[1,"Server"],[1,"Incoming"],[2,"StatusCode"],[2,"StatusClass"],[2,"RequestUri"],[2,"HttpVersion"],[1,"OsRng"],[1,"ReaderRng"],[1,"StdRng"],[1,"TaskRngReseeder"],[1,"TaskRng"],[1,"Range"],[1,"Gamma"],[1,"GammaSmallShape"],[1,"GammaLargeShape"],[1,"ChiSquared"],[1,"FisherF"],[1,"StudentT"],[1,"StandardNormal"],[1,"Normal"],[1,"LogNormal"],[1,"Exp1"],[1,"Exp"],[1,"RandSample"],[1,"WeightedChoice"],[1,"ReseedingRng"],[1,"ReseedWithDefault"],[1,"Ascii"],[1,"String"],[1,"Vec"],[1,"Gc"],[1,"Duration"],[1,"DefaultResizePolicy"],[1,"HashMap"],[1,"MapMutRef"],[1,"Entries"],[1,"MutEntries"],[1,"MoveEntries"],[1,"OccupiedEntry"],[1,"VacantEntry"],[1,"HashSet"],[1,"SafeHash"],[1,"FullBucket"],[1,"EmptyBucket"],[1,"Bucket"],[2,"BucketState"],[1,"GapThenFull"],[1,"RawTable"],[1,"RawBuckets"],[1,"RevMoveBuckets"],[1,"Entries"],[1,"MutEntries"],[1,"MoveEntries"],[1,"KeyRef"],[1,"LruCache"],[1,"EnumSet"],[1,"Items"],[1,"SmallIntMap"],[1,"Entries"],[1,"MutEntries"],[1,"TreeMap"],[1,"Entries"],[1,"RevEntries"],[1,"MutEntries"],[1,"RevMutEntries"],[1,"MoveEntries"],[1,"SetItems"],[1,"RevSetItems"],[1,"TreeSet"],[1,"DifferenceItems"],[1,"SymDifferenceItems"],[1,"IntersectionItems"],[1,"UnionItems"],[1,"TreeNode"],[1,"PriorityQueue"],[1,"Items"],[1,"Items"],[1,"MoveItems"],[1,"Rawlink"],[1,"DList"],[1,"MutItems"],[2,"Child"],[1,"TrieMap"],[1,"TrieSet"],[1,"TrieNode"],[1,"Entries"],[1,"MutEntries"],[1,"SetItems"],[1,"BTree"],[2,"Node"],[1,"Leaf"],[1,"Branch"],[1,"LeafElt"],[1,"BranchElt"],[1,"Bitv"],[1,"MaskWords"],[1,"Bits"],[1,"BitvSet"],[1,"BitPositions"],[1,"TwoBitPositions"],[1,"RingBuf"],[1,"Items"],[1,"MutItems"],[1,"RandomSipHasher"],[1,"SipState"],[1,"SipHasher"],[1,"SiblingSpawner"],[1,"TaskBuilder"],[1,"Future"],[1,"TaskPool"],[1,"Consumer"],[1,"Producer"],[1,"Queue"],[1,"AtomicOption"],[1,"Queue"],[1,"Queue"],[2,"Stolen"],[1,"BufferPool"],[1,"Worker"],[1,"Stealer"],[1,"Deque"],[1,"Buffer"],[1,"CVec"],[1,"DynamicLibrary"],[2,"MapError"],[1,"MemoryMap"],[1,"BufferedReader"],[1,"BufferedWriter"],[1,"LineBufferedWriter"],[1,"InternalBufferedWriter"],[1,"BufferedStream"],[1,"ChanReader"],[1,"ChanWriter"],[1,"MemWriter"],[1,"MemReader"],[1,"BufWriter"],[1,"BufReader"],[2,"Result"],[1,"TempDir"],[1,"Bytes"],[1,"File"],[1,"Directories"],[1,"Path"],[1,"TcpStream"],[1,"TcpListener"],[1,"TcpAcceptor"],[1,"UdpSocket"],[1,"UdpStream"],[2,"IpAddr"],[1,"SocketAddr"],[1,"UnixStream"],[1,"UnixListener"],[1,"UnixAcceptor"],[1,"PipeStream"],[1,"EnvKey"],[1,"Command"],[1,"ProcessOutput"],[2,"StdioContainer"],[2,"ProcessExit"],[1,"Process"],[2,"Signum"],[1,"Listener"],[1,"StdReader"],[1,"StdWriter"],[1,"Timer"],[1,"TimerCallback"],[1,"LimitReader"],[1,"NullWriter"],[1,"ZeroReader"],[1,"NullReader"],[1,"MultiWriter"],[1,"ChainedReader"],[1,"TeeReader"],[1,"IterReader"],[1,"IoError"],[2,"IoErrorKind"],[1,"RefReader"],[1,"RefWriter"],[1,"Lines"],[1,"Chars"],[1,"IncomingConnections"],[2,"FileType"],[1,"FileStat"],[1,"UnstableFileStat"],[1,"FilePermission"],[1,"Path"],[2,"PathPrefix"],[1,"Display"],[1,"CString"],[2,"MaybeOwned"],[1,"Formatter"],[2,"Alignment"],[1,"StaticNativeMutex"],[1,"NativeMutex"],[1,"LockGuard"],[1,"Mutex"],[2,"TaskState"],[1,"Task"],[1,"TaskOpts"],[1,"BlockedTasks"],[2,"BlockedTask"],[1,"Death"],[1,"Unwinder"],[1,"Thread"],[1,"Token"],[1,"Exclusive"],[1,"ExclusiveGuard"],[1,"LocalIo"],[2,"IpAddr"],[1,"SocketAddr"],[1,"Stdio"],[1,"Enumerate"],[1,"Inspect"],[1,"Rev"],[1,"Map"],[1,"Zip"],[1,"ByRef"],[2,"MinMaxResult"],[1,"Cycle"],[1,"Chain"],[1,"Filter"],[1,"FilterMap"],[1,"Peekable"],[1,"SkipWhile"],[1,"TakeWhile"],[1,"Skip"],[1,"Take"],[1,"Scan"],[1,"FlatMap"],[1,"Fuse"],[1,"Unfold"],[1,"Counter"],[1,"Range"],[1,"RangeInclusive"],[1,"RangeStep"],[1,"RangeStepInclusive"],[1,"Repeat"],[1,"DuplexStream"],[1,"Packet"],[1,"Select"],[1,"Handle"],[1,"Packets"],[1,"Packet"],[1,"Packet"],[2,"Failure"],[1,"Packet"],[2,"TryRecvError"],[2,"TrySendError"],[1,"Sender"],[1,"SyncSender"],[1,"Receiver"],[1,"Messages"],[2,"DecompositionType"],[1,"Decompositions"],[2,"RecompositionState"],[1,"Recompositions"],[2,"KeyValue"],[1,"Ref"],[1,"TLDValue"],[1,"ElementSwaps"],[1,"Permutations"],[1,"Finallyalizer"],[1,"i8x16"],[1,"i16x8"],[1,"i32x4"],[1,"i64x2"],[1,"u8x16"],[1,"u16x8"],[1,"u32x4"],[1,"u64x2"],[1,"f32x4"],[1,"f64x2"],[1,"CChars"],[1,"CovariantType"],[1,"ContravariantType"],[1,"InvariantType"],[1,"CovariantLifetime"],[1,"ContravariantLifetime"],[1,"InvariantLifetime"],[1,"NoSend"],[1,"NoCopy"],[1,"NoSync"],[1,"Managed"],[1,"Cell"],[1,"RefCell"],[1,"Ref"],[1,"RefMut"],[1,"UnsafeCell"],[1,"MoveItems"],[1,"PartialVec"],[1,"TypeId"],[1,"Item"],[2,"Option"],[1,"Item"],[1,"Rc"],[1,"Weak"],[2,"Ordering"],[1,"Mime"],[2,"TopLevel"],[2,"SubLevel"],[2,"Attr"],[2,"Value"],[1,"Url"],[2,"Host"],[1,"Ipv6Address"],[2,"ParseError"],[2,"Context"],[1,"CharRanges"],[1,"PathFormatter"],[1,"UserInfoFormatter"],[1,"UrlNoFragmentFormatter"],[2,"SchemeData"],[1,"UrlRelativeSchemeData"],[1,"UrlParser"],[2,"SchemeType"]]};
searchIndex['url'] = {"items":[[0,"","url","<a href=\"https://github.com/servo/rust-url\"><img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"../github.png\" alt=\"Fork me on GitHub\"></a>\n<style>.sidebar { margin-top: 53px }</style>"],[1,"Ipv6Address","","A 128 bit IPv6 address"],[11,"pieces","","",0],[1,"Url","","The parsed representation of an absolute URL."],[11,"scheme","","The scheme (a.k.a. protocol) of the URL, in ASCII lower case.",1],[11,"scheme_data","","The components of the URL whose representation depends on where the scheme is *relative*.",1],[11,"query","","The query string of the URL.",1],[11,"fragment","","The fragment identifier of the URL.",1],[1,"UrlRelativeSchemeData","","Components for URLs in a *relative* scheme such as HTTP."],[11,"username","","The username of the URL, as a possibly empty, pecent-encoded string.",2],[11,"password","","The password of the URL.",2],[11,"host","","The host of the URL, either a domain name or an IPv4 address",2],[11,"port","","The port number of the URL.\n`None` for file-like schemes, or to indicate the default port number.",2],[11,"default_port","","The default port number for the URL’s scheme.\n`None` for file-like schemes.",2],[11,"path","","The path of the URL, as vector of pecent-encoded strings.",2],[1,"UrlParser","","A set of optional parameters for URL parsing."],[2,"Host","","The host name of an URL."],[12,"Domain","","A (DNS) domain name or an IPv4 address.",3],[12,"Ipv6","","An IPv6 address, represented inside `[...]` square brackets\nso that `:` colon characters in the address are not ambiguous\nwith the port number delimiter.",3],[2,"ParseError","","Errors that can occur during parsing."],[12,"EmptyHost","","",4],[12,"InvalidScheme","","",4],[12,"InvalidPort","","",4],[12,"InvalidIpv6Address","","",4],[12,"InvalidDomainCharacter","","",4],[12,"InvalidCharacter","","",4],[12,"InvalidBackslash","","",4],[12,"InvalidPercentEncoded","","",4],[12,"InvalidAtSymbolInUser","","",4],[12,"ExpectedTwoSlashes","","",4],[12,"ExpectedInitialSlash","","",4],[12,"NonUrlCodePoint","","",4],[12,"RelativeUrlWithScheme","","",4],[12,"RelativeUrlWithoutBase","","",4],[12,"RelativeUrlWithNonRelativeBase","","",4],[12,"NonAsciiDomainsNotSupportedYet","","",4],[12,"CannotSetFileScheme","","",4],[12,"CannotSetJavascriptScheme","","",4],[12,"CannotSetNonRelativeScheme","","",4],[2,"SchemeData","","The components of the URL whose representation depends on where the scheme is *relative*."],[12,"RelativeSchemeData","","Components for URLs in a *relative* scheme such as HTTP.",5],[12,"NonRelativeSchemeData","","No further structure is assumed for *non-relative* schemes such as `data` and `mailto`.",5],[2,"SchemeType","","Determines the behavior of the URL parser for a given scheme."],[12,"NonRelativeScheme","","Indicate that the scheme is *non-relative*.",6],[12,"RelativeScheme","","Indicate that the scheme is *relative*, and what the default port number is.",6],[12,"FileLikeRelativeScheme","","Indicate a *relative* scheme similar to the *file* scheme.",6],[3,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier."],[3,"whatwg_scheme_type_mapper","","http://url.spec.whatwg.org/#relative-scheme"],[10,"clone","","",3],[10,"eq","","",3],[10,"ne","","",3],[10,"clone","","",0],[10,"eq","","",0],[10,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",3],[10,"serialize","","Serialize the host as a string.",3],[10,"fmt","","",3],[10,"parse","","Parse an IPv6 address, without the [] square brackets.",0],[10,"serialize","","Serialize the IPv6 address to a string.",0],[10,"fmt","","",0],[10,"clone","","",4],[10,"eq","","",4],[10,"ne","","",4],[10,"fmt","","",4],[0,"percent_encoding","",""],[1,"EncodeSet","url::percent_encoding","Represents a set of characters / bytes that should be percent-encoded."],[3,"percent_encode_to","","Percent-encode the given bytes, and push the result to `output`."],[3,"percent_encode","","Percent-encode the given bytes."],[3,"utf8_percent_encode_to","","Percent-encode the UTF-8 encoding of the given string, and push the result to `output`."],[3,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string."],[3,"percent_decode_to","","Percent-decode the given bytes, and push the result to `output`."],[3,"percent_decode","","Percent-decode the given bytes."],[3,"lossy_utf8_percent_decode","","Percent-decode the given bytes, and decode the result as UTF-8."],[3,"from_hex","",""],[5,"SIMPLE_ENCODE_SET","","This encode set is used for fragment identifier and non-relative scheme data."],[5,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings."],[5,"DEFAULT_ENCODE_SET","","This encode set is used for path components."],[5,"USERINFO_ENCODE_SET","","This encode set is used in the URL parser for usernames and passwords."],[5,"PASSWORD_ENCODE_SET","","This encode set should be used when setting the password field of a parsed URL."],[5,"USERNAME_ENCODE_SET","","This encode set should be used when setting the username field of a parsed URL."],[5,"FORM_URLENCODED_ENCODE_SET","","This encode set is used in `application/x-www-form-urlencoded` serialization."],[0,"form_urlencoded","url","Parser and serializer for the [`application/x-www-form-urlencoded` format](\nhttp://url.spec.whatwg.org/#application/x-www-form-urlencoded),\nas used by HTML forms."],[3,"parse_str","url::form_urlencoded","Convert a string in the `application/x-www-form-urlencoded` format\ninto a vector of (name, value) pairs."],[3,"parse_bytes","","Convert a byte string in the `application/x-www-form-urlencoded` format\ninto a vector of (name, value) pairs."],[3,"serialize_owned","","Convert a slice of owned (name, value) pairs\ninto a string in the `application/x-www-form-urlencoded` format."],[3,"serialize","","Convert an iterator of (name, value) pairs\ninto a string in the `application/x-www-form-urlencoded` format."],[0,"punycode","url","Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation."],[3,"decode_to_string","url::punycode","Convert Punycode to an Unicode `String`."],[3,"decode","","Convert Punycode to Unicode."],[3,"encode_str","","Convert an Unicode `str` to Punycode."],[3,"encode","","Convert Unicode to Punycode."],[0,"format","url","Formatting utilities for URLs."],[1,"PathFormatter","url::format","Formatter and serializer for URL path data."],[11,"path","","The path as a slice of string-like objects (String or &str).",7],[1,"UserInfoFormatter","","Formatter and serializer for URL username and password data."],[11,"username","","URL username as a string slice.",8],[11,"password","","URL password as an optional string slice.",8],[1,"UrlNoFragmentFormatter","","Formatter for URLs which ignores the fragment field."],[11,"url","","",9],[10,"fmt","","",7],[10,"fmt","","",8],[10,"fmt","","",9],[4,"ErrorHandler","url","This is called on non-fatal parse errors."],[4,"ParseResult","",""],[6,"ToUrlPath","",""],[9,"to_url_path","","",10],[6,"FromUrlPath","",""],[9,"from_url_path","","",11],[10,"clone","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"clone","","",5],[10,"eq","","",5],[10,"ne","","",5],[10,"clone","","",2],[10,"eq","","",2],[10,"ne","","",2],[10,"hash","","",1],[10,"new","","Return a new UrlParser with default parameters.",12],[10,"base_url","","Set the base URL used for resolving relative URL references, and return the `UrlParser`.\nThe default is no base URL, so that relative URLs references fail to parse.",12],[10,"query_encoding_override","","Set the character encoding the query string is encoded as before percent-encoding,\nand return the `UrlParser`.",12],[10,"error_handler","","Set an error handler for non-fatal parse errors, and return the `UrlParser`.",12],[10,"scheme_type_mapper","","Set a *scheme type mapper*, and return the `UrlParser`.",12],[10,"parse","","Parse `input` as an URL, with all the parameters previously set in the `UrlParser`.",12],[10,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier.",12],[10,"eq","","",6],[10,"ne","","",6],[10,"default_port","","",6],[10,"parse","","Parse an URL with the default `UrlParser` parameters.",1],[10,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",1],[10,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",1],[10,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",1],[10,"serialize","","Return the serialization of this URL as a string.",1],[10,"serialize_no_fragment","","Return the serialization of this URL, without the fragment identifier, as a string",1],[10,"non_relative_scheme_data","","If the URL is *non-relative*, return the string scheme data.",1],[10,"non_relative_scheme_data_mut","","If the URL is *non-relative*, return a mutable reference to the string scheme data.",1],[10,"relative_scheme_data","","If the URL is in a *relative scheme*, return the structured scheme data.",1],[10,"relative_scheme_data_mut","","If the URL is in a *relative scheme*,\nreturn a mutable reference to the structured scheme data.",1],[10,"username","","If the URL is in a *relative scheme*, return its username.",1],[10,"username_mut","","If the URL is in a *relative scheme*, return a mutable reference to its username.",1],[10,"lossy_percent_decode_username","","Percent-decode the URL’s username, if any.",1],[10,"password","","If the URL is in a *relative scheme*, return its password, if any.",1],[10,"password_mut","","If the URL is in a *relative scheme*, return a mutable reference to its password, if any.",1],[10,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",1],[10,"serialize_userinfo","","Serialize the URL's username and password, if any.",1],[10,"host","","If the URL is in a *relative scheme*, return its structured host.",1],[10,"host_mut","","If the URL is in a *relative scheme*, return a mutable reference to its structured host.",1],[10,"domain","","If the URL is in a *relative scheme* and its host is a domain,\nreturn the domain as a string.",1],[10,"domain_mut","","If the URL is in a *relative scheme* and its host is a domain,\nreturn a mutable reference to the domain string.",1],[10,"serialize_host","","If the URL is in a *relative scheme*, serialize its host as a string.",1],[10,"port","","If the URL is in a *relative scheme* and has a port number, return it.",1],[10,"port_mut","","If the URL is in a *relative scheme*, return a mutable reference to its port.",1],[10,"port_or_default","","If the URL is in a *relative scheme* that is not a file-like,\nreturn its port number, even if it is the default.",1],[10,"path","","If the URL is in a *relative scheme*, return its path components.",1],[10,"path_mut","","If the URL is in a *relative scheme*, return a mutable reference to its path components.",1],[10,"serialize_path","","If the URL is in a *relative scheme*, serialize its path as a string.",1],[10,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return a vector of (key, value) pairs.",1],[10,"set_query_from_pairs","","Serialize an iterator of (key, value) pairs as `application/x-www-form-urlencoded`\nand set it as the URL’s query string.",1],[10,"lossy_percent_decode_query","","Percent-decode the URL’s query string, if any.",1],[10,"lossy_percent_decode_fragment","","Percent-decode the URL’s fragment identifier, if any.",1],[10,"encode","","",1],[10,"decode","","",1],[10,"fmt","","",1],[10,"fmt","","",5],[10,"lossy_percent_decode_username","","Percent-decode the URL’s username.",2],[10,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",2],[10,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",2],[10,"domain","","If the host is a domain, return the domain as a string.",2],[10,"domain_mut","","If the host is a domain, return a mutable reference to the domain string.",2],[10,"port_or_default","","Return the port number of the URL, even if it is the default.\nReturn `None` for file-like URLs.",2],[10,"serialize_path","","Serialize the path as a string.",2],[10,"serialize_userinfo","","Serialize the userinfo as a string.",2],[10,"fmt","","",2],[10,"to_url_path","std::path::posix","",13],[10,"to_url_path","std::path::windows","",14],[10,"from_url_path","std::path::posix","",13],[10,"from_url_path","std::path::windows","",14]],"paths":[[1,"Ipv6Address"],[1,"Url"],[1,"UrlRelativeSchemeData"],[2,"Host"],[2,"ParseError"],[2,"SchemeData"],[2,"SchemeType"],[1,"PathFormatter"],[1,"UserInfoFormatter"],[1,"UrlNoFragmentFormatter"],[6,"ToUrlPath"],[6,"FromUrlPath"],[1,"UrlParser"],[1,"Path"],[1,"Path"]]};

searchIndex['encoding'] = {"items":[[0,"","encoding","# Rust-encoding"],[0,"types","","Interface to the character encoding."],[1,"CodecError","encoding::types","Error information from either encoder or decoder."],[11,"upto","","The byte position of the first remaining byte, with respect to the *current* input.\nFor the `finish` call, this should be no more than zero (since there is no input).\nIt can be negative if the remaining byte is in the prior inputs,\nas long as the remaining byte is not yet processed.\nThe caller should feed the bytes starting from this point again\nin order to continue encoding or decoding after an error.",0],[11,"cause","","A human-readable cause of the error.",0],[2,"DecoderTrap","","Trap, which handles decoder errors."],[12,"DecodeStrict","","Immediately fails on errors.\nCorresponds to WHATWG \"fatal\" error algorithm.",1],[12,"DecodeReplace","","Replaces an error with a U+FFFD (decoder).\nCorresponds to WHATWG \"replacement\" error algorithm.",1],[12,"DecodeIgnore","","Silently ignores an error, effectively replacing it with an empty sequence.",1],[12,"DecoderCall","","Calls given function to handle decoder errors.\nThe function is given the current decoder, input and output writer,\nand should return true only when it is fine to keep going.",1],[2,"EncoderTrap","",""],[12,"EncodeStrict","","Immediately fails on errors.\nCorresponds to WHATWG \"fatal\" error algorithm.",2],[12,"EncodeReplace","","Replaces an error with `?` in given encoding.\nNote that this fails when `?` cannot be represented in given encoding.\nCorresponds to WHATWG \"URL\" error algorithms.",2],[12,"EncodeIgnore","","Silently ignores an error, effectively replacing it with an empty sequence.",2],[12,"EncodeNcrEscape","","Replaces an error with XML numeric character references (e.g. `&#1234;`).\nThe encoder trap fails when NCRs cannot be represented in given encoding.\nCorresponds to WHATWG \"<form>\" error algorithms.",2],[12,"EncoderCall","","Calls given function to handle encoder errors.\nThe function is given the current encoder, input and output writer,\nand should return true only when it is fine to keep going.",2],[3,"decode","","Determine the encoding by looking for a Byte Order Mark (BOM)\nand decoded a single string in memory.\nReturn the result and the used encoding."],[4,"EncodingRef","","A trait object using dynamic dispatch which is a sendable reference to the encoding,\nfor code where the encoding is not known at compile-time."],[4,"EncoderTrapFunc","","A type of the bare function in `EncoderTrap` values."],[4,"DecoderTrapFunc","","A type of the bare function in `DecoderTrap` values."],[6,"ByteWriter","","Byte writer used by `Encoder`s. In most cases this will be an owned vector of `u8`."],[10,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output\nuntil the next call to `writer_hint`,\nso that the writer can reserve the memory for writing.\n`Encoder`s are recommended but not required to call this method\nwith an appropriate estimate.\nBy default this method does nothing.",3],[9,"write_byte","","Writes a single byte.",3],[9,"write_bytes","","Writes a number of bytes.",3],[6,"StringWriter","","String writer used by `Decoder`s. In most cases this will be an owned string."],[10,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output\nuntil the next call to `writer_hint`,\nso that the writer can reserve the memory for writing.\n`Decoder`s are recommended but not required to call this method\nwith an appropriate estimate.\nBy default this method does nothing.",4],[9,"write_char","","Writes a single character.",4],[9,"write_str","","Writes a string.",4],[6,"Encoder","","Encoder converting a Unicode string into a byte sequence.\nThis is a lower level interface, and normally `Encoding::encode` should be used instead."],[9,"from_self","","Creates a fresh `Encoder` instance which parameters are same as `self`.",5],[10,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII,\ni.e. U+0000 through U+007F always map to bytes 00 through 7F and nothing else.",5],[9,"raw_feed","","Feeds given portion of string to the encoder,\npushes the an encoded byte sequence at the end of the given output,\nand returns a byte offset to the first unprocessed character\n(that can be zero when the first such character appeared in the prior calls to `raw_feed`)\nand optional error information (None means success).",5],[9,"raw_finish","","Finishes the encoder,\npushes the an encoded byte sequence at the end of the given output,\nand returns optional error information (None means success).\n`remaining` value of the error information, if any, is always an empty string.",5],[6,"Decoder","","Encoder converting a byte sequence into a Unicode string.\nThis is a lower level interface, and normally `Encoding::decode` should be used instead."],[9,"from_self","","Creates a fresh `Decoder` instance which parameters are same as `self`.",6],[10,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII,\ni.e. bytes 00 through 7F always map to U+0000 through U+007F and nothing else.",6],[9,"raw_feed","","Feeds given portion of byte sequence to the encoder,\npushes the a decoded string at the end of the given output,\nand returns an offset to the first unprocessed byte\n(that can be zero when the first such byte appeared in the prior calls to `raw_feed`)\nand optional error information (None means success).",6],[9,"raw_finish","","Finishes the decoder,\npushes the a decoded string at the end of the given output,\nand returns optional error information (None means success).",6],[6,"Encoding","","Character encoding."],[9,"name","","Returns the canonical name of given encoding.\nThis name is guaranteed to be unique across built-in encodings,\nbut it is not normative and would be at most arbitrary.",7],[10,"whatwg_name","","Returns a name of given encoding defined in the WHATWG Encoding standard, if any.\nThis name often differs from `name` due to the compatibility reason.",7],[9,"encoder","","Creates a new encoder.",7],[9,"decoder","","Creates a new decoder.",7],[10,"encode","","An easy-to-use interface to `Encoder`.\nOn the encoder error `trap` is called,\nwhich may return a replacement sequence to continue processing,\nor a failure to return the error.",7],[10,"decode","","An easy-to-use interface to `Decoder`.\nOn the decoder error `trap` is called,\nwhich may return a replacement string to continue processing,\nor a failure to return the error.",7],[10,"writer_hint","collections::vec","",8],[10,"write_byte","","",8],[10,"write_bytes","","",8],[10,"writer_hint","collections::string","",9],[10,"write_char","","",9],[10,"write_str","","",9],[0,"index","encoding","Indices used for character encoding implementation. Semi-internal."],[0,"ibm866","encoding::index",""],[3,"forward","encoding::index::ibm866",""],[3,"backward","",""],[0,"iso_8859_2","encoding::index",""],[3,"forward","encoding::index::iso_8859_2",""],[3,"backward","",""],[0,"iso_8859_3","encoding::index",""],[3,"forward","encoding::index::iso_8859_3",""],[3,"backward","",""],[0,"iso_8859_4","encoding::index",""],[3,"forward","encoding::index::iso_8859_4",""],[3,"backward","",""],[0,"iso_8859_5","encoding::index",""],[3,"forward","encoding::index::iso_8859_5",""],[3,"backward","",""],[0,"iso_8859_6","encoding::index",""],[3,"forward","encoding::index::iso_8859_6",""],[3,"backward","",""],[0,"iso_8859_7","encoding::index",""],[3,"forward","encoding::index::iso_8859_7",""],[3,"backward","",""],[0,"iso_8859_8","encoding::index",""],[3,"forward","encoding::index::iso_8859_8",""],[3,"backward","",""],[0,"iso_8859_10","encoding::index",""],[3,"forward","encoding::index::iso_8859_10",""],[3,"backward","",""],[0,"iso_8859_13","encoding::index",""],[3,"forward","encoding::index::iso_8859_13",""],[3,"backward","",""],[0,"iso_8859_14","encoding::index",""],[3,"forward","encoding::index::iso_8859_14",""],[3,"backward","",""],[0,"iso_8859_15","encoding::index",""],[3,"forward","encoding::index::iso_8859_15",""],[3,"backward","",""],[0,"iso_8859_16","encoding::index",""],[3,"forward","encoding::index::iso_8859_16",""],[3,"backward","",""],[0,"koi8_r","encoding::index",""],[3,"forward","encoding::index::koi8_r",""],[3,"backward","",""],[0,"koi8_u","encoding::index",""],[3,"forward","encoding::index::koi8_u",""],[3,"backward","",""],[0,"macintosh","encoding::index",""],[3,"forward","encoding::index::macintosh",""],[3,"backward","",""],[0,"windows_874","encoding::index",""],[3,"forward","encoding::index::windows_874",""],[3,"backward","",""],[0,"windows_1250","encoding::index",""],[3,"forward","encoding::index::windows_1250",""],[3,"backward","",""],[0,"windows_1251","encoding::index",""],[3,"forward","encoding::index::windows_1251",""],[3,"backward","",""],[0,"windows_1252","encoding::index",""],[3,"forward","encoding::index::windows_1252",""],[3,"backward","",""],[0,"windows_1253","encoding::index",""],[3,"forward","encoding::index::windows_1253",""],[3,"backward","",""],[0,"windows_1254","encoding::index",""],[3,"forward","encoding::index::windows_1254",""],[3,"backward","",""],[0,"windows_1255","encoding::index",""],[3,"forward","encoding::index::windows_1255",""],[3,"backward","",""],[0,"windows_1256","encoding::index",""],[3,"forward","encoding::index::windows_1256",""],[3,"backward","",""],[0,"windows_1257","encoding::index",""],[3,"forward","encoding::index::windows_1257",""],[3,"backward","",""],[0,"windows_1258","encoding::index",""],[3,"forward","encoding::index::windows_1258",""],[3,"backward","",""],[0,"x_mac_cyrillic","encoding::index",""],[3,"forward","encoding::index::x_mac_cyrillic",""],[3,"backward","",""],[0,"big5","encoding::index",""],[3,"forward","encoding::index::big5",""],[3,"backward","",""],[0,"euc_kr","encoding::index",""],[3,"forward","encoding::index::euc_kr",""],[3,"backward","",""],[0,"gb18030","encoding::index",""],[3,"forward","encoding::index::gb18030",""],[3,"backward","",""],[0,"gb18030_ranges","encoding::index",""],[3,"forward","encoding::index::gb18030_ranges",""],[3,"backward","",""],[0,"jis0208","encoding::index",""],[3,"forward","encoding::index::jis0208",""],[3,"backward","",""],[3,"backward_remapped","",""],[0,"jis0212","encoding::index",""],[3,"forward","encoding::index::jis0212",""],[3,"backward","",""],[0,"codec","encoding","Codec implementations."],[0,"error","encoding::codec","A placeholder encoding that returns encoder/decoder error for every case."],[1,"ErrorEncoding","encoding::codec::error","An encoding that returns encoder/decoder error for every case."],[1,"ErrorEncoder","","An encoder that always returns error."],[1,"ErrorDecoder","","A decoder that always returns error."],[10,"clone","","",10],[10,"name","","",10],[10,"encoder","","",10],[10,"decoder","","",10],[10,"clone","","",11],[10,"new","","",11],[10,"from_self","","",11],[10,"raw_feed","","",11],[10,"raw_finish","","",11],[10,"clone","","",12],[10,"new","","",12],[10,"from_self","","",12],[10,"raw_feed","","",12],[10,"raw_finish","","",12],[0,"ascii","encoding::codec","7-bit ASCII encoding."],[1,"ASCIIEncoding","encoding::codec::ascii","ASCII, also known as ISO/IEC 646:US."],[1,"ASCIIEncoder","","An encoder for ASCII."],[1,"ASCIIDecoder","","A decoder for ASCII."],[10,"clone","","",13],[10,"name","","",13],[10,"encoder","","",13],[10,"decoder","","",13],[10,"clone","","",14],[10,"new","","",14],[10,"from_self","","",14],[10,"is_ascii_compatible","","",14],[10,"raw_feed","","",14],[10,"raw_finish","","",14],[10,"clone","","",15],[10,"new","","",15],[10,"from_self","","",15],[10,"is_ascii_compatible","","",15],[10,"raw_feed","","",15],[10,"raw_finish","","",15],[0,"singlebyte","encoding::codec","Common codec implementation for single-byte encodings."],[1,"SingleByteEncoding","encoding::codec::singlebyte","A common framework for single-byte encodings based on ASCII."],[11,"name","","",16],[11,"whatwg_name","","",16],[11,"index_forward","","",16],[11,"index_backward","","",16],[1,"SingleByteEncoder","","An encoder for single-byte encodings based on ASCII."],[1,"SingleByteDecoder","","A decoder for single-byte encodings based on ASCII."],[0,"iso_8859_1","","Algorithmic mapping for ISO 8859-1."],[3,"forward","encoding::codec::singlebyte::iso_8859_1",""],[3,"backward","",""],[10,"name","encoding::codec::singlebyte","",16],[10,"whatwg_name","","",16],[10,"encoder","","",16],[10,"decoder","","",16],[10,"clone","","",17],[10,"new","","",17],[10,"from_self","","",17],[10,"is_ascii_compatible","","",17],[10,"raw_feed","","",17],[10,"raw_finish","","",17],[10,"clone","","",18],[10,"new","","",18],[10,"from_self","","",18],[10,"is_ascii_compatible","","",18],[10,"raw_feed","","",18],[10,"raw_finish","","",18],[0,"utf_8","encoding::codec","UTF-8, the universal encoding."],[1,"UTF8Encoding","encoding::codec::utf_8","UTF-8 (UCS Transformation Format, 8-bit)."],[1,"UTF8Encoder","","An encoder for UTF-8."],[1,"UTF8Decoder","","A decoder for UTF-8."],[3,"from_utf8","","Equivalent to `std::str::from_utf8`.\nThis function is provided for the fair benchmark against the stdlib's UTF-8 conversion\nfunctions, as rust-encoding always allocates a new string."],[10,"clone","","",19],[10,"name","","",19],[10,"whatwg_name","","",19],[10,"encoder","","",19],[10,"decoder","","",19],[10,"clone","","",20],[10,"new","","",20],[10,"from_self","","",20],[10,"is_ascii_compatible","","",20],[10,"raw_feed","","",20],[10,"raw_finish","","",20],[10,"new","","",21],[10,"clone","","",21],[10,"from_self","","",21],[10,"is_ascii_compatible","","",21],[10,"raw_feed","","",21],[10,"raw_finish","","",21],[0,"utf_16","encoding::codec","UTF-16."],[1,"Little","encoding::codec::utf_16","An implementation type for little endian."],[1,"Big","","An implementation type for big endian."],[1,"UTF16Encoding","","UTF-16 (UCS Transformation Format, 16-bit)."],[1,"UTF16Encoder","","An encoder for UTF-16."],[1,"UTF16Decoder","","A decoder for UTF-16."],[4,"UTF16LEEncoding","","UTF-16 in little endian."],[4,"UTF16BEEncoding","","UTF-16 in big endian."],[6,"Endian","","An internal trait used to customize UTF-16 implementations."],[9,"name","","",22],[9,"whatwg_name","","",22],[9,"write_two_bytes","","",22],[9,"concat_two_bytes","","",22],[10,"clone","","",23],[10,"clone","","",24],[10,"name","","",23],[10,"whatwg_name","","",23],[10,"write_two_bytes","","",23],[10,"concat_two_bytes","","",23],[10,"name","","",24],[10,"whatwg_name","","",24],[10,"write_two_bytes","","",24],[10,"concat_two_bytes","","",24],[10,"clone","","",25],[10,"name","","",25],[10,"whatwg_name","","",25],[10,"encoder","","",25],[10,"decoder","","",25],[10,"clone","","",26],[10,"from_self","","",26],[10,"raw_feed","","",26],[10,"raw_finish","","",26],[10,"new","","",27],[10,"from_self","","",27],[10,"raw_feed","","",27],[10,"raw_finish","","",27],[0,"korean","encoding::codec","Legacy Korean encodings based on KS X 1001."],[1,"Windows949Encoding","encoding::codec::korean","Windows code page 949."],[1,"Windows949Encoder","","An encoder for Windows code page 949."],[1,"Windows949Decoder","","A decoder for Windows code page 949."],[10,"clone","","",28],[10,"name","","",28],[10,"whatwg_name","","",28],[10,"encoder","","",28],[10,"decoder","","",28],[10,"clone","","",29],[10,"new","","",29],[10,"from_self","","",29],[10,"is_ascii_compatible","","",29],[10,"raw_feed","","",29],[10,"raw_finish","","",29],[10,"clone","","",30],[10,"new","","",30],[10,"from_self","","",30],[10,"is_ascii_compatible","","",30],[10,"raw_feed","","",30],[10,"raw_finish","","",30],[0,"japanese","encoding::codec","Legacy Japanese encodings based on JIS X 0208 and JIS X 0212."],[1,"EUCJPEncoding","encoding::codec::japanese","EUC-JP. (XXX with asymmetric JIS X 0212 support)"],[1,"EUCJPEncoder","","An encoder for EUC-JP with unused G3 character set."],[1,"EUCJP0212Decoder","","A decoder for EUC-JP with JIS X 0212 in G3."],[1,"Windows31JEncoding","","Windows code page 932, i.e. Shift_JIS with IBM/NEC extensions."],[1,"Windows31JEncoder","","An encoder for Shift_JIS with IBM/NEC extensions."],[1,"Windows31JDecoder","","A decoder for Shift_JIS with IBM/NEC extensions."],[1,"ISO2022JPEncoding","","ISO-2022-JP."],[1,"ISO2022JPEncoder","","An encoder for ISO-2022-JP without JIS X 0212/0213 support."],[1,"ISO2022JPDecoder","","A decoder for ISO-2022-JP with JIS X 0212 support."],[10,"clone","","",31],[10,"name","","",31],[10,"whatwg_name","","",31],[10,"encoder","","",31],[10,"decoder","","",31],[10,"clone","","",32],[10,"new","","",32],[10,"from_self","","",32],[10,"is_ascii_compatible","","",32],[10,"raw_feed","","",32],[10,"raw_finish","","",32],[10,"clone","","",33],[10,"new","","",33],[10,"from_self","","",33],[10,"is_ascii_compatible","","",33],[10,"raw_feed","","",33],[10,"raw_finish","","",33],[10,"clone","","",34],[10,"name","","",34],[10,"whatwg_name","","",34],[10,"encoder","","",34],[10,"decoder","","",34],[10,"clone","","",35],[10,"new","","",35],[10,"from_self","","",35],[10,"is_ascii_compatible","","",35],[10,"raw_feed","","",35],[10,"raw_finish","","",35],[10,"clone","","",36],[10,"new","","",36],[10,"from_self","","",36],[10,"is_ascii_compatible","","",36],[10,"raw_feed","","",36],[10,"raw_finish","","",36],[10,"clone","","",37],[10,"name","","",37],[10,"whatwg_name","","",37],[10,"encoder","","",37],[10,"decoder","","",37],[10,"clone","","",38],[10,"new","","",38],[10,"from_self","","",38],[10,"is_ascii_compatible","","",38],[10,"raw_feed","","",38],[10,"raw_finish","","",38],[10,"clone","","",39],[10,"new","","",39],[10,"from_self","","",39],[10,"is_ascii_compatible","","",39],[10,"raw_feed","","",39],[10,"raw_finish","","",39],[0,"simpchinese","encoding::codec","Legacy simplified Chinese encodings based on GB 2312 and GB 18030."],[1,"GB18030Encoding","encoding::codec::simpchinese","GB 18030-2005."],[1,"GB18030Encoder","","An encoder for GB 18030."],[1,"GB18030Decoder","","A decoder for GB 18030."],[1,"HZEncoding","","HZ. (RFC 1843)"],[1,"HZEncoder","","An encoder for HZ."],[1,"HZDecoder","","A decoder for HZ."],[10,"clone","","",40],[10,"name","","",40],[10,"whatwg_name","","",40],[10,"encoder","","",40],[10,"decoder","","",40],[10,"clone","","",41],[10,"new","","",41],[10,"from_self","","",41],[10,"is_ascii_compatible","","",41],[10,"raw_feed","","",41],[10,"raw_finish","","",41],[10,"clone","","",42],[10,"new","","",42],[10,"from_self","","",42],[10,"is_ascii_compatible","","",42],[10,"raw_feed","","",42],[10,"raw_finish","","",42],[10,"clone","","",43],[10,"name","","",43],[10,"whatwg_name","","",43],[10,"encoder","","",43],[10,"decoder","","",43],[10,"clone","","",44],[10,"new","","",44],[10,"from_self","","",44],[10,"is_ascii_compatible","","",44],[10,"raw_feed","","",44],[10,"raw_finish","","",44],[10,"clone","","",45],[10,"new","","",45],[10,"from_self","","",45],[10,"is_ascii_compatible","","",45],[10,"raw_feed","","",45],[10,"raw_finish","","",45],[0,"tradchinese","encoding::codec","Legacy traditional Chinese encodings."],[1,"BigFive2003Encoding","encoding::codec::tradchinese","Big5-2003 with common extensions. (XXX with asymmetric HKSCS-2008 support)"],[1,"BigFive2003Encoder","","An encoder for Big5-2003."],[1,"BigFive2003HKSCS2008Decoder","","A decoder for Big5-2003 with HKSCS-2008 extension."],[10,"clone","","",46],[10,"name","","",46],[10,"whatwg_name","","",46],[10,"encoder","","",46],[10,"decoder","","",46],[10,"clone","","",47],[10,"new","","",47],[10,"from_self","","",47],[10,"is_ascii_compatible","","",47],[10,"raw_feed","","",47],[10,"raw_finish","","",47],[10,"clone","","",48],[10,"new","","",48],[10,"from_self","","",48],[10,"is_ascii_compatible","","",48],[10,"raw_feed","","",48],[10,"raw_finish","","",48],[0,"whatwg","encoding::codec","Asymmetric or special encoding constructions required by the WHATWG Encoding standard."],[1,"EncoderOnlyUTF8Encoding","encoding::codec::whatwg","Replacement encoding used to solve a particular attack vector due to mismatching server and\nclient supports for encodings. It is rarely useful outside."],[0,"x_user_defined","","Algorithmic mapping for `x-user-defined` encoding."],[3,"forward","encoding::codec::whatwg::x_user_defined",""],[3,"backward","",""],[10,"clone","encoding::codec::whatwg","",49],[10,"name","","",49],[10,"whatwg_name","","",49],[10,"encoder","","",49],[10,"decoder","","",49],[0,"all","encoding","A list of all supported encodings. Useful for encodings fixed in the compile time."],[0,"whatwg","encoding::all",""],[5,"X_USER_DEFINED","encoding::all::whatwg",""],[5,"ISO_8859_8_I","",""],[5,"REPLACEMENT","",""],[5,"ERROR","encoding::all",""],[5,"ASCII","",""],[5,"IBM866","",""],[5,"ISO_8859_1","",""],[5,"ISO_8859_2","",""],[5,"ISO_8859_3","",""],[5,"ISO_8859_4","",""],[5,"ISO_8859_5","",""],[5,"ISO_8859_6","",""],[5,"ISO_8859_7","",""],[5,"ISO_8859_8","",""],[5,"ISO_8859_10","",""],[5,"ISO_8859_13","",""],[5,"ISO_8859_14","",""],[5,"ISO_8859_15","",""],[5,"ISO_8859_16","",""],[5,"KOI8_R","",""],[5,"KOI8_U","",""],[5,"MAC_ROMAN","",""],[5,"WINDOWS_874","",""],[5,"WINDOWS_1250","",""],[5,"WINDOWS_1251","",""],[5,"WINDOWS_1252","",""],[5,"WINDOWS_1253","",""],[5,"WINDOWS_1254","",""],[5,"WINDOWS_1255","",""],[5,"WINDOWS_1256","",""],[5,"WINDOWS_1257","",""],[5,"WINDOWS_1258","",""],[5,"MAC_CYRILLIC","",""],[5,"UTF_8","",""],[5,"UTF_16LE","",""],[5,"UTF_16BE","",""],[5,"WINDOWS_949","",""],[5,"EUC_JP","",""],[5,"WINDOWS_31J","",""],[5,"ISO_2022_JP","",""],[5,"GB18030","",""],[5,"HZ","",""],[5,"BIG5_2003","",""],[0,"label","encoding","An interface for retrieving an encoding (or a set of encodings) from a string/numeric label."],[3,"encoding_from_whatwg_label","encoding::label","Returns an encoding from given label, defined in the WHATWG Encoding standard, if any.\nImplements \"get an encoding\" algorithm: http://encoding.spec.whatwg.org/#decode"],[3,"encoding_from_windows_code_page","","Returns an encoding from Windows code page number.\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/dd317756%28v=vs.85%29.aspx\nSometimes it can return a *superset* of the requested encoding, e.g. for several CJK encodings."]],"paths":[[1,"CodecError"],[2,"DecoderTrap"],[2,"EncoderTrap"],[6,"ByteWriter"],[6,"StringWriter"],[6,"Encoder"],[6,"Decoder"],[6,"Encoding"],[1,"Vec"],[1,"String"],[1,"ErrorEncoding"],[1,"ErrorEncoder"],[1,"ErrorDecoder"],[1,"ASCIIEncoding"],[1,"ASCIIEncoder"],[1,"ASCIIDecoder"],[1,"SingleByteEncoding"],[1,"SingleByteEncoder"],[1,"SingleByteDecoder"],[1,"UTF8Encoding"],[1,"UTF8Encoder"],[1,"UTF8Decoder"],[6,"Endian"],[1,"Little"],[1,"Big"],[1,"UTF16Encoding"],[1,"UTF16Encoder"],[1,"UTF16Decoder"],[1,"Windows949Encoding"],[1,"Windows949Encoder"],[1,"Windows949Decoder"],[1,"EUCJPEncoding"],[1,"EUCJPEncoder"],[1,"EUCJP0212Decoder"],[1,"Windows31JEncoding"],[1,"Windows31JEncoder"],[1,"Windows31JDecoder"],[1,"ISO2022JPEncoding"],[1,"ISO2022JPEncoder"],[1,"ISO2022JPDecoder"],[1,"GB18030Encoding"],[1,"GB18030Encoder"],[1,"GB18030Decoder"],[1,"HZEncoding"],[1,"HZEncoder"],[1,"HZDecoder"],[1,"BigFive2003Encoding"],[1,"BigFive2003Encoder"],[1,"BigFive2003HKSCS2008Decoder"],[1,"EncoderOnlyUTF8Encoding"]]};

searchIndex['openssl'] = {"items":[[0,"","openssl",""],[0,"ssl","",""],[1,"SslContext","openssl::ssl","An SSL context object"],[1,"X509StoreContext","",""],[1,"X509","","A public key certificate"],[1,"X509Name","",""],[1,"Ssl","",""],[1,"SslStream","","A stream wrapper which handles SSL encryption for an underlying stream."],[2,"SslMethod","","Determines the SSL method supported"],[12,"Sslv3","","Only support the SSLv3 protocol",0],[12,"Tlsv1","","Only support the TLSv1 protocol",0],[12,"Sslv23","","Support the SSLv2, SSLv3 and TLSv1 protocols",0],[2,"SslVerifyMode","","Determines the type of certificate verification used"],[12,"SslVerifyPeer","","Verify that the server's certificate is trusted",1],[12,"SslVerifyNone","","Do not verify the server's certificate",1],[2,"X509FileType","",""],[12,"PEM","","",2],[12,"ASN1","","",2],[12,"Default","","",2],[2,"X509ValidationError","",""],[12,"X509UnableToGetIssuerCert","","",3],[12,"X509UnableToGetCrl","","",3],[12,"X509UnableToDecryptCertSignature","","",3],[12,"X509UnableToDecryptCrlSignature","","",3],[12,"X509UnableToDecodeIssuerPublicKey","","",3],[12,"X509CertSignatureFailure","","",3],[12,"X509CrlSignatureFailure","","",3],[12,"X509CertNotYetValid","","",3],[12,"X509CertHasExpired","","",3],[12,"X509CrlNotYetValid","","",3],[12,"X509CrlHasExpired","","",3],[12,"X509ErrorInCertNotBeforeField","","",3],[12,"X509ErrorInCertNotAfterField","","",3],[12,"X509ErrorInCrlLastUpdateField","","",3],[12,"X509ErrorInCrlNextUpdateField","","",3],[12,"X509OutOfMem","","",3],[12,"X509DepthZeroSelfSignedCert","","",3],[12,"X509SelfSignedCertInChain","","",3],[12,"X509UnableToGetIssuerCertLocally","","",3],[12,"X509UnableToVerifyLeafSignature","","",3],[12,"X509CertChainTooLong","","",3],[12,"X509CertRevoked","","",3],[12,"X509InvalidCA","","",3],[12,"X509PathLengthExceeded","","",3],[12,"X509InvalidPurpose","","",3],[12,"X509CertUntrusted","","",3],[12,"X509CertRejected","","",3],[12,"X509SubjectIssuerMismatch","","",3],[12,"X509AkidSkidMismatch","","",3],[12,"X509AkidIssuerSerialMismatch","","",3],[12,"X509KeyusageNoCertsign","","",3],[12,"X509UnableToGetCrlIssuer","","",3],[12,"X509UnhandledCriticalExtension","","",3],[12,"X509KeyusageNoCrlSign","","",3],[12,"X509UnhandledCriticalCrlExtension","","",3],[12,"X509InvalidNonCA","","",3],[12,"X509ProxyPathLengthExceeded","","",3],[12,"X509KeyusageNoDigitalSignature","","",3],[12,"X509ProxyCertificatesNotAllowed","","",3],[12,"X509InvalidExtension","","",3],[12,"X509InavlidPolicyExtension","","",3],[12,"X509NoExplicitPolicy","","",3],[12,"X509DifferentCrlScope","","",3],[12,"X509UnsupportedExtensionFeature","","",3],[12,"X509UnnestedResource","","",3],[12,"X509PermittedVolation","","",3],[12,"X509ExcludedViolation","","",3],[12,"X509SubtreeMinmax","","",3],[12,"X509UnsupportedConstraintType","","",3],[12,"X509UnsupportedConstraintSyntax","","",3],[12,"X509UnsupportedNameSyntax","","",3],[12,"X509CrlPathValidationError","","",3],[12,"X509ApplicationVerification","","",3],[12,"X509UnknownError","","",3],[0,"error","",""],[2,"SslError","openssl::ssl::error","An SSL error"],[12,"StreamError","","The underlying stream has reported an error",4],[12,"SslSessionClosed","","The SSL session has been closed by the other end",4],[12,"OpenSslErrors","","An error in the OpenSSL library",4],[2,"OpensslError","","An error from the OpenSSL library"],[12,"UnknownError","","An unknown error",5],[10,"eq","","",4],[10,"ne","","",4],[10,"clone","","",4],[10,"fmt","","",4],[10,"eq","","",5],[10,"ne","","",5],[10,"clone","","",5],[10,"fmt","","",5],[10,"get","","Creates a new `OpenSslErrors` with the current contents of the error\nstack.",4],[4,"VerifyCallback","openssl::ssl","The signature of functions that can be used to manually verify certificates"],[10,"eq","","",0],[10,"ne","","",0],[10,"hash","","",0],[10,"fmt","","",0],[10,"drop","","",6],[10,"new","","Creates a new SSL context.",6],[10,"set_verify","","Configures the certificate verification method for new connections.",6],[10,"set_CA_file","","Specifies the file that contains trusted CA certificates.",6],[10,"set_certificate_file","","Specifies the file that is client certificate",6],[10,"set_private_key_file","","Specifies the file that is client private key",6],[10,"get_error","","",7],[10,"get_current_cert","","",7],[10,"subject_name","","",8],[10,"fingerprint","","Returns certificate fingerprint calculated using provided hash",8],[10,"drop","","",9],[10,"new","","",9],[10,"set_hostname","","Set the host name to be used with SNI (Server Name Indication).",9],[10,"new_from","","Attempts to create a new SSL stream from a given `Ssl` instance.",10],[10,"new","","Creates a new SSL stream",10],[10,"get_compression","","Get the compression currently in use.  The result will be\neither None, indicating no compression is in use, or a string\nwith the compression name.",10],[10,"read","","",10],[10,"write","","",10],[10,"flush","","",10],[0,"crypto","openssl",""],[0,"hash","openssl::crypto",""],[1,"EVP_MD_CTX","openssl::crypto::hash",""],[1,"EVP_MD","",""],[1,"EVP_PKEY_CTX","",""],[1,"Hasher","",""],[2,"HashType","",""],[12,"MD5","","",11],[12,"SHA1","","",11],[12,"SHA224","","",11],[12,"SHA256","","",11],[12,"SHA384","","",11],[12,"SHA512","","",11],[12,"RIPEMD160","","",11],[3,"evpmd","",""],[3,"hash","","Hashes the supplied input data using hash t, returning the resulting hash\nvalue"],[10,"new","","",12],[10,"update","","Update this hasher with more input bytes",12],[10,"final","","Return the digest of all bytes added to this hasher since its last\ninitialization",12],[10,"drop","","",12],[0,"hmac","openssl::crypto",""],[1,"HMAC_CTX","openssl::crypto::hmac",""],[1,"HMAC","",""],[3,"HMAC","",""],[10,"update","","",13],[10,"final","","",13],[0,"pkcs5","openssl::crypto",""],[3,"pbkdf2_hmac_sha1","openssl::crypto::pkcs5","Derives a key from a password and salt using the PBKDF2-HMAC-SHA1 algorithm."],[0,"pkey","openssl::crypto",""],[1,"PKey","openssl::crypto::pkey",""],[2,"Role","","Represents a role an asymmetric key might be appropriate for."],[12,"Encrypt","","",14],[12,"Decrypt","","",14],[12,"Sign","","",14],[12,"Verify","","",14],[2,"EncryptionPadding","","Type of encryption padding to use."],[12,"OAEP","","",15],[12,"PKCS1v15","","",15],[4,"EVP_PKEY","",""],[4,"RSA","",""],[10,"new","","",16],[10,"gen","","",16],[10,"save_pub","","Returns a serialized form of the public key, suitable for load_pub().",16],[10,"load_pub","","Loads a serialized form of the public key, as produced by save_pub().",16],[10,"save_priv","","Returns a serialized form of the public and private keys, suitable for\nload_priv().",16],[10,"load_priv","","Loads a serialized form of the public and private keys, as produced by\nsave_priv().",16],[10,"size","","Returns the size of the public key modulus.",16],[10,"can","","Returns whether this pkey object can perform the specified role.",16],[10,"max_data","","Returns the maximum amount of data that can be encrypted by an encrypt()\ncall.",16],[10,"encrypt_with_padding","","",16],[10,"decrypt_with_padding","","",16],[10,"encrypt","","Encrypts data using OAEP padding, returning the encrypted data. The\nsupplied data must not be larger than max_data().",16],[10,"decrypt","","Decrypts data, expecting OAEP padding, returning the decrypted data.",16],[10,"sign","","Signs data, using OpenSSL's default scheme and sha256. Unlike encrypt(),\ncan process an arbitrary amount of data; returns the signature.",16],[10,"verify","","Verifies a signature s (using OpenSSL's default scheme and sha256) on a\nmessage m. Returns true if the signature is valid, and false otherwise.",16],[10,"sign_with_hash","","",16],[10,"verify_with_hash","","",16],[10,"drop","","",16],[0,"rand","openssl::crypto",""],[3,"rand_bytes","openssl::crypto::rand",""],[0,"symm","openssl::crypto",""],[1,"Crypter","openssl::crypto::symm","Represents a symmetric cipher context."],[2,"Mode","",""],[12,"Encrypt","","",17],[12,"Decrypt","","",17],[2,"Type","",""],[12,"AES_128_ECB","","",18],[12,"AES_128_CBC","","",18],[12,"AES_256_ECB","","",18],[12,"AES_256_CBC","","",18],[12,"RC4_128","","",18],[3,"encrypt","","Encrypts data, using the specified crypter type in encrypt mode with the\nspecified key and iv; returns the resulting (encrypted) data."],[3,"decrypt","","Decrypts data, using the specified crypter type in decrypt mode with the\nspecified key and iv; returns the resulting (decrypted) data."],[4,"EVP_CIPHER_CTX","",""],[4,"EVP_CIPHER","",""],[10,"new","","",19],[10,"pad","","Enables or disables padding. If padding is disabled, total amount of\ndata encrypted must be a multiple of block size.",19],[10,"init","","Initializes this crypter.",19],[10,"update","","Update this crypter with more data to encrypt or decrypt. Returns\nencrypted or decrypted bytes.",19],[10,"final","","Finish crypting. Returns the remaining partial block of output, if any.",19],[10,"drop","","",19],[0,"bn","openssl",""],[1,"BigNum","openssl::bn",""],[2,"RNGProperty","",""],[12,"MsbMaybeZero","","",20],[12,"MsbOne","","",20],[12,"TwoMsbOne","","",20],[0,"unchecked","",""],[10,"add","","",21],[10,"sub","","",21],[10,"mul","","",21],[10,"div","","",21],[10,"rem","","",21],[10,"shl","","",21],[10,"shr","","",21],[10,"clone","","",21],[10,"neg","","",21],[10,"new","","",21],[10,"new_from","","",21],[10,"new_from_slice","","",21],[10,"checked_sqr","","",21],[10,"checked_nnmod","","",21],[10,"checked_mod_add","","",21],[10,"checked_mod_sub","","",21],[10,"checked_mod_mul","","",21],[10,"checked_mod_sqr","","",21],[10,"checked_exp","","",21],[10,"checked_mod_exp","","",21],[10,"checked_mod_inv","","",21],[10,"checked_gcd","","",21],[10,"checked_generate_prime","","",21],[10,"is_prime","","",21],[10,"is_prime_fast","","",21],[10,"checked_new_random","","",21],[10,"checked_new_pseudo_random","","",21],[10,"checked_rand_in_range","","",21],[10,"checked_pseudo_rand_in_range","","",21],[10,"set_bit","","",21],[10,"clear_bit","","",21],[10,"is_bit_set","","",21],[10,"mask_bits","","",21],[10,"checked_shl1","","",21],[10,"checked_shr1","","",21],[10,"checked_add","","",21],[10,"checked_sub","","",21],[10,"checked_mul","","",21],[10,"checked_div","","",21],[10,"checked_mod","","",21],[10,"checked_shl","","",21],[10,"checked_shr","","",21],[10,"negate","","",21],[10,"abs_cmp","","",21],[10,"is_negative","","",21],[10,"num_bits","","",21],[10,"num_bytes","","",21],[10,"to_vec","","",21],[10,"eq","","",21],[10,"cmp","","",21],[10,"partial_cmp","","",21],[10,"drop","","",21]],"paths":[[2,"SslMethod"],[2,"SslVerifyMode"],[2,"X509FileType"],[2,"X509ValidationError"],[2,"SslError"],[2,"OpensslError"],[1,"SslContext"],[1,"X509StoreContext"],[1,"X509"],[1,"Ssl"],[1,"SslStream"],[2,"HashType"],[1,"Hasher"],[1,"HMAC"],[2,"Role"],[2,"EncryptionPadding"],[1,"PKey"],[2,"Mode"],[2,"Type"],[1,"Crypter"],[2,"RNGProperty"],[1,"BigNum"]]};

searchIndex['mime'] = {"items":[[0,"","mime","# Mime"],[1,"Mime","","Mime, or Media Type. Encapsulates common registers types."],[2,"TopLevel","",""],[12,"TopStar","","",0],[12,"Text","","",0],[12,"Image","","",0],[12,"Audio","","",0],[12,"Video","","",0],[12,"Application","","",0],[12,"Multipart","","",0],[12,"Message","","",0],[12,"Model","","",0],[12,"TopExt","","",0],[2,"SubLevel","",""],[12,"SubStar","","",1],[12,"Plain","","",1],[12,"Html","","",1],[12,"Xml","","",1],[12,"Javascript","","",1],[12,"Css","","",1],[12,"Json","","",1],[12,"Png","","",1],[12,"Gif","","",1],[12,"Bmp","","",1],[12,"Jpeg","","",1],[12,"SubExt","","",1],[2,"Attr","",""],[12,"Charset","","",2],[12,"Q","","",2],[12,"AttrExt","","",2],[2,"Value","",""],[12,"Utf8","","",3],[12,"ValueExt","","",3],[4,"Param","",""],[10,"eq","","",4],[10,"ne","","",4],[10,"clone","","",4],[10,"eq","","",0],[10,"ne","","",0],[10,"clone","","",0],[10,"fmt","","",0],[10,"from_str","","",0],[10,"eq","","",1],[10,"ne","","",1],[10,"clone","","",1],[10,"fmt","","",1],[10,"from_str","","",1],[10,"eq","","",2],[10,"ne","","",2],[10,"clone","","",2],[10,"fmt","","",2],[10,"from_str","","",2],[10,"eq","","",3],[10,"ne","","",3],[10,"clone","","",3],[10,"fmt","","",3],[10,"from_str","","",3],[10,"equiv","","",4],[10,"fmt","","",4],[10,"from_str","","",4]],"paths":[[2,"TopLevel"],[2,"SubLevel"],[2,"Attr"],[2,"Value"],[1,"Mime"]]};

searchIndex['intertwine'] = {"items":[[0,"","intertwine","Intertwine an Iterator of Iterators."],[1,"Intertwined","","An Iterator which iterates over the values from many Iterators."],[6,"Intertwine","","A mixin trait for the `intertwine` method, which constructs Intertwined values."],[9,"intertwine","","Intertwine an Iterator of Iterators",0],[10,"next","","",1]],"paths":[[6,"Intertwine"],[1,"Intertwined"]]};

searchIndex['move-acceptor'] = {"items":[[0,"","move-acceptor","A variant of the Acceptor trait which moves self in the `move_incoming` method."],[1,"MoveConnections","","An iterator over incoming connections."],[6,"MoveAcceptor","","A variant of the Acceptor trait which moves self in the `move_incoming` method."],[10,"maccept","","Wait for and accept an incoming connection.",0],[10,"move_incoming","","Get an Iterator over incoming connections.",0],[10,"next","","",1]],"paths":[[6,"MoveAcceptor"],[1,"MoveConnections"]]};

searchIndex['typeable'] = {"items":[[0,"","typeable","Exposes `Typeable`, which exposes the `get_type` method, which gives\nthe `TypeId` of any 'static type."],[6,"Typeable","","Universal mixin trait for adding a `get_type` method."],[10,"get_type","","Get the `TypeId` of this object.",0]],"paths":[[6,"Typeable"]]};

searchIndex['unsafe-any'] = {"items":[[0,"","unsafe-any","Traits for unsafe downcasting from trait objects to & or &mut references of\nconcrete types. These should only be used if you are absolutely certain of the\ntype of the data in said trait object - there be dragons etc."],[6,"UncheckedAnyDowncast","","An extension trait for unchecked downcasting of trait objects to &T."],[9,"downcast_ref_unchecked","","Returns a reference to the boxed value, assuming that it is of type `T`. If you\nare not _absolutely certain_ of `T` you should _not_ call this!",0],[6,"UncheckedAnyMutDowncast","","An extension trait for unchecked downcasting of trait objects to &mut T."],[9,"downcast_mut_unchecked","","Returns a mutable reference to the boxed value, assuming that it is of type `T`. If you\nare not _absolutely certain_ of `T` you should _not_ call this!",1],[6,"UncheckedBoxAnyDowncast","","An extension for unchecked downcasting of trait objects to Box<T>."],[9,"downcast_unchecked","","Return a box of type Box<T>, assuming the trait object contains a type T. If you are not\n_absolutely certain_ of `T` you should _not_ call this!",2],[10,"downcast_unchecked","alloc::boxed","",3]],"paths":[[6,"UncheckedAnyDowncast"],[6,"UncheckedAnyMutDowncast"],[6,"UncheckedBoxAnyDowncast"],[1,"Box"]]};

initSearch(searchIndex);
